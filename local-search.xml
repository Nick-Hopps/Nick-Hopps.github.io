<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>On Fairy-Stories</title>
    <link href="/2023/03/13/On%20Fairy%20Stories/"/>
    <url>/2023/03/13/On%20Fairy%20Stories/</url>
    
    <content type="html"><![CDATA[<blockquote><p>by J.R.R. Tolkien</p></blockquote><p>I propose to speak about fairy-stories, though I am aware that this is a rash adventure. Faerie is a perilous land, and in it are pitfalls for the unwary and dungeons for the overbold. And overbold I may be accounted, for though I have been a lover of fairy-stories since I learned to read, and have at times thought about them, I have not studied them professionally. I have been hardly more than a wandering explorer (or trespasser) in the land, full of wonder but not of information.</p><p>The realm of fairy-story is wide and deep and high and filled with many things: all manner of beasts and birds are found there; shoreless seas and stars uncounted; beauty that is an enchantment, and an ever-present peril; both joy and sorrow as sharp as swords. In that realm a man may, perhaps, count himself fortunate to have wandered, but its very richness and strangeness tie the tongue of a traveller who would report them. And while he is there it is dangerous for him to ask too many questions, lest the gates should be shut and the keys be lost.</p><p>There are, however, some questions that one who is to speak about fairy-stories must expect to answer, or attempt to answer, whatever the folk of Faërie may think of his impertinence. For instance: What are fairy-stories? What is their origin? What is the use of them? I will try to give answers to these questions, or such hints of answers to them as I have gleaned—primarily from the stories themselves, the few of all their multitude that I know.</p><h1 id="fairy-story"><a class="markdownIt-Anchor" href="#fairy-story"></a> Fairy-story</h1><p>What is a fairy-story? In this case you will turn to the Oxford English Dictionary in vain. It contains no reference to the combination fairy-story, and is unhelpful on the subject of fairies generally. In the Supplement, fairy-tale is recorded since the year 1750, and its leading sense is said to be (a) a tale about fairies, or generally a fairy legend; with developed senses, (b) an unreal or incredible story, and © a falsehood.</p><p>The last two senses would obviously make my topic hopelessly vast. But the first sense is too narrow. Not too narrow for an essay; it is wide enough for many books, but too narrow to cover actual usage. Especially so, if we accept the lexicographer’s definition of fairies: “supernatural beings of diminutive size, in popular belief supposed to possess magical powers and to have great influence for good or evil over the affairs of man.”</p><p>Supernatural is a dangerous and difficult word in any of its senses, looser or stricter. But to fairies it can hardly be applied, unless super is taken merely as a superlative prefix. For it is man who is, in contrast to fairies, supernatural (and often of diminutive stature); whereas they are natural, far more natural than he. Such is their doom. The road to fairyland is not the road to Heaven; nor even to Hell, I believe, though some have held that it may lead thither indirectly by the Devil’s tithe.</p><blockquote><p>O see ye not yon narrow road</p><p>So thick beset wi’ thorns and briers?</p><p>That is the path of Righteousness,</p><p>Though after it but few inquires.</p><p>And see ye not yon braid, braid road</p><p>That lies across the lily leven?</p><p>That is the path of Wickedness,</p><p>Though some call it the Road to Heaven.</p><p>And see ye not yon bonny road</p><p>That winds about yon fernie brae?</p><p>That is the road to fair Elfland,</p><p>Where thou and I this night maun gae.</p></blockquote><p>As for diminutive size: I do not deny that the notion is a leading one in modern use. I have often thought that it would be interesting to try to find out how that has come to be so; but my knowledge is not sufficient for a certain answer. Of old there were indeed some inhabitants of Faerie that were small (though hardly diminutive), but smallness was not characteristic of that people as a whole. The diminutive being, elf or fairy, is (I guess) in England largely a sophisticated product of literary fancy. It is perhaps not unnatural that in England, the land where the love of the delicate and fine has often reappeared in art, fancy should in this matter turn towards the dainty and diminutive, as in France it went to court and put on powder and diamonds. Yet I suspect that this flower-and-butterfly minuteness was also a product of “rationalization,” which transformed the glamour of Elfland into mere finesse, and invisibility into a fragility that could hide in a cowslip or shrink behind a blade of grass. It seems to become fashionable soon after the great voyages had begun to make the world seem too narrow to hold both men and elves; when the magic land of Hy Breasail in the West had become the mere Brazils, the land of red-dye-wood. In any case it was largely a literary business in which William Shakespeare and Michael Drayton played a part. Drayton’s Nymphidia is one ancestor of that long line of flower-fairies and fluttering sprites with antennae that I so disliked as a child, and which my children in their turn detested. Andrew Lang had similar feelings. In the preface to the Lilac Fairy Book he refers to the tales of tiresome contemporary authors: “they always begin with a little boy or girl who goes out and meets the fairies of polyanthuses and gardenias and apple-blossom. . . . These fairies try to be funny and fail; or they try to preach and succeed.” But the business began, as I have said, long before the nineteenth century, and long ago achieved tiresomeness, certainly the tiresomeness of trying to be funny and failing. Drayton’s Nymphidia is, considered as a fairy-story (a story about fairies), one of the worst ever written. The palace of Oberon has walls of spider’s legs,</p><blockquote><p>And windows of the eyes of cats,</p><p>And for the roof, instead of slats,</p><p>Is covered with the wings of bats.</p></blockquote><p>The knight Pigwiggen rides on a frisky earwig, and sends his love, Queen Mab, a bracelet of emmets’ eyes, making an assignation in a cowslip-flower. But the tale that is told amid all this prettiness is a dull story of intrigue and sly go-betweens; the gallant knight and angry husband fall into the mire, and their wrath is stilled by a draught of the waters of Lethe. It would have been better if Lethe had swallowed the whole affair. Oberon, Mab, and Pigwiggen may be diminutive elves or fairies, as Arthur, Guinevere, and Lancelot are not; but the good and evil story of Arthur’s court is a “fairy-story” rather than this tale of Oberon. Fairy, as a noun more or less equivalent to elf, is a relatively modern word, hardly used until the Tudor period. The first quotation in the Oxford Dictionary (the only one before A.D.1450) is significant. It is taken from the poet Gower: as he were a faierie. But this Gower did not say. He wrote as he were of faierie, “as if he were come from Faërie.” Gower was describing a young gallant who seeks to bewitch the hearts of the maidens in church.</p><blockquote><p>His croket kembd and thereon set</p><p>A Nouche with a chapelet,</p><p>Or elles one of grene leves</p><p>Which late com out of the greves,</p><p>Al for he sholde seme freissh;</p><p>And thus he loketh on the fteissh,</p><p>Riht as an hauk which hath a sihte</p><p>Upon the foul ther he schal lihte,</p><p>And as he were of faierie</p><p>He scheweth him tofore here yhe.</p></blockquote><p>This is a young man of mortal blood and bone; but he gives a much better picture of the inhabitants of Elf-land than the definition of a “fairy” under which he is, by a double error, placed. For the trouble with the real folk of Faerie is that they do not always look like what they are; and they put on the pride and beauty that we would fain wear ourselves. At least part of the magic that they wield for the good or evil of man is power to play on the desires of his body and his heart. The Queen of Elfland, who carried off Thomas the Rhymer upon her milk-white steed swifter than the wind, came riding by the Eildon Tree as a lady, if one of enchanting beauty. So that Spenser was in the true tradition when he called the knights of his Faerie by the name of Elfe. It belonged to such knights as Sir Guyon rather than to Pigwiggen armed with a hornet’s sting.</p><p>Now, though I have only touched (wholly inadequately) on elves and fairies, I must turn back; for I have digressed from my proper theme: fairy-stories. I said the sense “stories about fairies” was too narrow. It is too narrow, even if we reject the diminutive size, for fairy-stories are not in normal English usage stories about fairies or elves, but stories about Fairy, that is Faerie, the realm or state in which fairies have their being. Faerie contains many things besides elves and fays, and besides dwarfs, witches, trolls, giants, or dragons: it holds the seas, the sun, the moon, the sky; and the earth, and all things that are in it: tree and bird, water and stone, wine and bread, and ourselves, mortal men, when we are enchanted.</p><p>Stories that are actually concerned primarily with “fairies,” that is with creatures that might also in modern English be called “elves,” are relatively rare, and as a rule not very interesting. Most good “fairy-stories” are about the adventures of men in the Perilous Realm or upon its shadowy marches. Naturally so; for if elves are true, and really exist independently of our tales about them, then this also is certainly true: elves are not primarily concerned with us, nor we with them. Our fates are sundered, and our paths seldom meet. Even upon the borders of Faërie we encounter them only at some chance crossing of the ways.</p><p>The definition of a fairy-story—what it is, or what it should be—does not, then, depend on any definition or historical account of elf or fairy, but upon the nature of Faërie: the Perilous Realm itself, and the air that blows in that country. I will not attempt to define that, nor to describe it directly. It cannot be done. Faërie cannot be caught in a net of words; for it is one of its qualities to be indescribable, though not imperceptible. It has many ingredients, but analysis will not necessarily discover the secret of the whole. Yet I hope that what I have later to say about the other questions will give some glimpses of my own imperfect vision of it. For the moment I will say only this: a “fairy-story” is one which touches on or uses Faerie, whatever its own main purpose may be: satire, adventure, morality, fantasy. Faerie itself may perhaps most nearly be translated by Magic—but it is magic of a peculiar mood and power, at the furthest pole from the vulgar devices of the laborious, scientific, magician. There is one proviso: if there is any satire present in the tale, one thing must not be made fun of, the magic itself. That must in that story be taken seriously, neither laughed at nor explained away. Of this seriousness the medieval Sir Gawain and the Green Knight is an admirable example.</p><p>But even if we apply only these vague and ill-defined limits, it becomes plain that many, even the learned in such matters, have used the term “fairy-tale” very carelessly. A glance at those books of recent times that claim to be collections of “fairy-stories” is enough to show that tales about fairies, about the fair family in any of its houses, or even about dwarfs and goblins, are only a small part of their content. That, as we have seen, was to be expected. But these books also contain many tales that do not use, do not even touch upon, Faerie at all; that have in fact no business to be included.</p><p>I will give one or two examples of the expurgations I would perform. This will assist the negative side of definition. It will also be found to lead on to the second question: what are the origins of fairy-stories?</p><p>The number of collections of fairy-stories is now very great. In English none probably rival either the popularity, or the inclusiveness, or the general merits of the twelve books of twelve colours which we owe to Andrew Lang and to his wife. The first of these appeared more than seventy years ago (1889), and is still in print. Most of its contents pass the test, more or less clearly. I will not analyse them, though an analysis might be interesting, but I note in passing that of the stories in this Blue Fairy Book none are primarily about “fairies,” few refer to them. Most of the tales are taken from French sources: a just choice in someways at that time, as perhaps it would be still (though not to my taste, now or in childhood). At any rate, so powerful has been the influence of Charles Perrault, since his Contes de ma Mère l’Oye were first Englished in the eighteenth century, and of such other excerpts from the vast storehouse of the Cabinet des Fées as have become well known, that still, I suppose, if you asked a man to name at random a typical “fairy-story,” he would be most likely to name one of these French things: such as Puss-in-Boots, Cinderella, or Little Red Riding Hood. With some people Grimm’s Fairy Tales might come first to mind.</p><p>But what is to be said of the appearance in the Blue Fairy Book of A Voyage to Lilliput? I will say this: it is not a fairy-story, neither as its author made it, nor as it here appears “condensed” by Miss May Kendall. It has no business in this place. I fear that it was included merely because Lilliputians are small, even diminutive—the only way in which they are a tall remarkable. But smallness is in Faerie, as in our world, only an accident. Pygmies are no nearer to fairies than are Patagonians. I do not rule this story out because of its satirical intent: there is satire, sustained or intermittent, in undoubted fairy-stories, and satire may often have been intended in traditional tales where we do not now perceive it. I rule it out, because the vehicle of the satire, brilliant invention though it may be, belongs to the class of travellers’ tales. Such tales report many marvels, but they are marvels to be seen in this mortal world in some region of our own time and space; distance alone conceals them. The tales of Gulliver have no more right of entry than the yarns of Baron Munchausen; or than, say, The First Men in the Moon or The Time-Machine. Indeed, for the Eloi and the Morlocks there would be a better claim than for the Lilliputians. Lilliputians are merely men peered down at, sardonically, from just above the house-tops. Eloi and Morlocks live far away in an abyss of time so deep as to work an enchantment upon them; and if they are descended from ourselves, it may be remembered that an ancient English thinker once derived the ylfe, the very elves, through Cain from Adam. This enchantment of distance, especially of distant time, is weakened only by the preposterous and incredible Time Machine itself. But we see in this example one of the main reasons why the borders of fairy-story are inevitably dubious. The magic of Faerie is not an end in itself, its virtue is in its operations: among these are the satisfaction of certain primordial human desires. One of these desires is to survey the depths of space and time. Another is (as will be seen) to hold communion with other living things. A story may thus deal with the satisfaction of these desires, with or without the operation of either machine or magic, and in proportion as it succeeds it will approach the quality and have the flavour of fairy-story.</p><p>Next, after travellers’ tales, I would also exclude, or rule out of order, any story that uses the machinery of Dream, the dreaming of actual human sleep, to explain the apparent occurrence of its marvels. At the least, even if the reported dream was in other respects in itself a fairy-story, I would condemn the whole as gravely defective: like a good picture in a disfiguring frame. It is true that Dream is not unconnected with Faërie. In dreams strange powers of the mind may be unlocked. In some of them a man may for a space wield the power of Faërie, that power which, even as it conceives the story, causes it to take living form and colour before the eyes. A real dream may indeed sometimes be a fairy-story of almost elvish ease and skill— while it is being dreamed. But if a waking writer tells you that his tale is only a thing imagined in his sleep, he cheats deliberately the primal desire at the heart of Faerie: the realization, independent of the conceiving mind, of imagined wonder. It is often reported of fairies (truly or lyingly, I do not know) that they are workers of illusion, that they are cheaters of men by “fantasy”; but that is quite another matter. That is their affair. Such trickeries happen, at any rate, inside tales in which the fairies are not themselves illusions; behind the fantasy real wills and powers exist, independent of the minds and purposes of men.</p><p>It is at any rate essential to a genuine fairy-story, as distinct from the employment of this form for lesser or debased purposes, that it should be presented as “true.” The meaning of “true” in this connexion I will consider in a moment. But since the fairy-story deals with “marvels,” it cannot tolerate any frame or machinery suggesting that the whole story in which they occur is a figment or illusion. The tale itself may, of course, be so good that one can ignore the frame. Or it may be successful and amusing as a dream-story. So are Lewis Carroll’s Alice stories, with their dream-frame and dream-transitions. For this (and other reasons) they are not fairy-stories.</p><p>There is another type of marvellous tale that I would exclude from the title “fairy-story,” again certainly not because I do not like it: namely pure “Beast-fable.” I will choose an example from Lang’s Fairy Books: The Monkey’s Heart, a Swahili tale which is given in the Lilac Fairy Book. In this story a wicked shark tricked a monkey into riding on his back, and carried him half-way to his own land, before he revealed the fact that the sultan of that country was sick and needed a monkey’s heart to cure his disease. But the monkey outwitted the shark, and induced him to return by convincing him that the heart had been left behind at home, hanging in a bag on a tree.</p><p>The beast-fable has, of course, a connexion with fairy-stories. Beasts and birds and other creatures often talk like men in real fairy-stories. In some part (often small) this marvel derives from one of the primal “desires” that lie near the heart of Faerie: the desire of men to hold communion with other living things. But the speech of beasts in a beast-fable, as developed into a separate branch, has little reference to that desire, and often wholly forgets it. The magical understanding by men of the proper languages of birds and beasts and trees, that is much nearer to the true purposes of Faerie. But in stories in which no human being is concerned; or in which the animals are the heroes and heroines, and men and women, if they appear, are mere adjuncts; and above all those in which the animal form is only a mask upon a human face, a device of the satirist or the preacher, in these we have beast-fable and not fairy-story: whether it be Reynard the Fox, or The Nun’s Priest’s Tale, or Brer Rabbit, or merely The Three Little Pigs. The stories of Beatrix Potter lie near the borders of Faerie, but outside it, I think, for the most part. Their nearness is due largely to their strong moral element: by which I mean their inherent morality, not any allegorical signification. But Peter Rabbit, though it contains a prohibition, and though there are prohibitions in fairyland (as, probably, there are throughout the universe on every plane and in every dimension), remains a beast-fable.</p><p>Now The Monkeys Heart is also plainly only a beast-fable. I suspect that its inclusion in a “Fairy Book” is due not primarily to its entertaining quality, but precisely to the monkey’s heart supposed to have been left behind in a bag. That was significant to Lang, the student of folk-lore, even though this curious idea is here used only as a joke; for, in this tale, the monkey’s heart was in fact quite normal and in his breast. None the less this detail is plainly only a secondary use of an ancient and very widespread folk-lore notion, which does occur in fairy-stories; the notion that the life or strength of a man or creature may reside in some other place or thing; or in some part of the body (especially the heart) that can be detached and hidden in a bag, or under a stone, or in an egg. At one end of recorded folk-lore history this idea was used by George MacDonald in his fairy-story The Giant’s Heart, which derives this central motive (as well as many other details) from well-known traditional tales. At the other end, indeed in what is probably one of the oldest stories in writing, it occurs in The Tale of the Two Brothers on the Egyptian D’Orsigny papyrus. There the younger brother says to the elder:</p><p>I shall enchant my heart, and I shall place it upon the top of the flower of the cedar. Now the cedar will be cut down and my heart will fall to the ground, and thou shalt come to seek it, even though thou pass seven years in seeking it; but when thou has found it, put it into a vase of cold water, and in very truth I shall live.</p><p>But that point of interest and such comparisons as these bring us to the brink of the second question: What are the origins of “fairy-stories”? That must, of course, mean: the origin or origins of the fairy elements. To ask what is the origin of stories (however qualified) is to ask what is the origin of language and of the mind.</p><h1 id="origins"><a class="markdownIt-Anchor" href="#origins"></a> Origins</h1><p>Actually the question: What is the origin of the fairy element? lands us ultimately in the same fundamental inquiry; but there are many elements in fairy-stories (such as this detachable heart, or swan-robes, magic rings, arbitrary prohibitions, wicked stepmothers, and even fairies themselves) that can be studied without tackling this main question. Such studies are, however, scientific (at least in intent); they are the pursuit of folklorists or anthropologists: that is of people using the stories not as they were meant to be used, but as a quarry from which to dig evidence, or information, about matters in which they are interested. A perfectly legitimate procedure in itself—but ignorance or forgetfulness of the nature of a story (as a thing told in its entirety) has often led such inquirers into strange judgments. To investigators of this sort recurring similarities (such as this matter of the heart) seem specially important. So much so that students of folk-lore are apt to get off their own proper track, or to express themselves in a misleading “shorthand”: misleading in particular, if it gets out of their monographs into books about literature. They are inclined to say that any two stories that are built round the same folk-lore motive, or are made up of a generally similar combination of such motives, are “the same stories.” We read that Beowulf “is only a version of Dat Erdmänneken”; that “The Black Bull of Norroway is Beauty and the Beast,” or “is the same story as Eros and Psyche”; that the Norse Mastermaid (or the Gaelic Battle of the Birds and its many congeners and variants) is “the same story as the Greek tale of Jason and Medea.”</p><p>Statements of that kind may express (in undue abbreviation) some element of truth; but they are not true in a fairy-story sense, they are not true in art or literature. It is precisely the colouring, the atmosphere, the unclassifiable individual details of a story, and above all the general purport that informs with life the undissected bones of the plot, that really count. Shakespeare’s King Lear is not the same as Layamon’s story in his Brut. Or to take the extreme case of Red Riding Hood: it is of merely secondary interest that the retold versions of this story, in which the little girl is saved by wood-cutters, is directly derived from Perrault’s story in which she was eaten by the wolf. The really important thing is that the later version has a happy ending (more or less, and if we do not mourn the grandmother overmuch), and that Perrault’s version had not. And that is a very profound difference, to which I shall return. Of course, I do not deny, for I feel strongly, the fascination of the desire to unravel the intricately knotted and ramified history of the branches on the Tree of Tales. It is closely connected with the philologists’ study of the tangled skein of Language, of which I know some small pieces. But even with regard to language it seems to me that the essential quality and aptitudes of a given language in a living monument is both more important to seize and far more difficult to make explicit than its linear history. So with regard to fairy stories, I feel that it is more interesting, and also in its way more difficult, to consider what they are, what they have become for us, and what values the long alchemic processes of time have produced in them. In Dasent’s words I would say: “We must be satisfied with the soup that is set before us, and not desire to see the bones of the ox out of which it has been boiled. ”Though, oddly enough, Dasent by “the soup” meant a mishmash of bogus pre-history founded on the early surmises of Comparative Philology; and by “desire to see the bones” he meant a demand to see the workings and the proofs that led to these theories. By “the soup” I mean the story as it is served up by its author or teller, and by “the bones” its sources or material—even when (by rare luck) those can be with certainty discovered. But I do not, of course, forbid criticism of the soup as soup.</p><p>I shall therefore pass lightly over the question of origins. I am too unlearned to deal with it in any other way; but it is the least important of the three questions for my purpose, and a few remarks will suffice. It is plain enough that fairy-stories (in wider or in narrower sense) are very ancient indeed. Related things appear in very early records; and they are found universally, wherever there is language. We are therefore obviously confronted with a variant of the problem that the archaeologist encounters, or the comparative philologist: with the debate between independent evolution (or rather invention) of the similar; inheritance from a common ancestry; and diffusion at various times from one or more centres. Most debates depend on an attempt (by one or both sides) at over-simplification; and I do not suppose that this debate is an exception. The history of fairy-stories is probably more complex than the physical history of the human race, and as complex as the history of human language. All three things: independent invention, inheritance, and diffusion, have evidently played their part in producing the intricate web of Story. It is now beyond all skill but that of the elves to unravel it. Of these three invention is the most important and fundamental, and so (not surprisingly) also the most mysterious. To an inventor, that is to a storymaker, the other two must in the end lead back. Diffusion (borrowing in space) whether of an artefact or a story, only refers the problem of origin elsewhere. At the centre of the supposed diffusion there is a place where once an inventor lived. Similarly with inheritance (borrowing in time): in this way we arrive at last only at an ancestral inventor. While if we believe that sometimes there occurred the independent striking out of similar ideas and themes or devices, we simply multiply the ancestral inventor but do not in that way the more clearly understand his gift.</p><p>Philology has been dethroned from the high place it once had in this court of inquiry. Max Müller’s view of mythology as a “disease of language” can be abandoned without regret. Mythology is not a disease at all, though it may like all human things become diseased. You might as well say that thinking is a disease of the mind. It would be more near the truth to say that languages, especially modern European languages, are a disease of mythology. But Language cannot, all the same, be dismissed. The incarnate mind, the tongue, and the tale are in our world coeval. The human mind, endowed with the powers of generalization and abstraction, sees not only green-grass, discriminating it from other things (and finding it fair to look upon), but sees that it is green as well as being grass. But how powerful, how stimulating to the very faculty that produced it, was the invention of the adjective: no spell or incantation in Faerie is more potent. And that is not surprising: such incantations might indeed be said to be only another view of adjectives, a part of speech in a mythical grammar.The mind that thought of light, heavy, grey, yellow, still, swift, also conceived of magic that would make heavy things light and able to fly, turn grey lead into yellow gold, and the still rock into a swift water. If it could do the one, it could do the other; it inevitably did both. When we can take green from grass, blue from heaven, and red from blood, we have already an enchanter’s power—upon one plane; and the desire to wield that power in the world external to our minds awakes. It does not follow that we shall use that power well upon any plane. We may put a deadly green upon a man’s face and produce a horror; we may make the rare and terrible blue moon to shine; or we may cause woods to spring with silver leaves and rams to wear fleeces of gold, and put hot fire into the belly of the cold worm. But in such “fantasy,” as it is called, new form is made; Faerie begins; Man becomes a sub-creator.</p><p>An essential power of Faerie is thus the power of making immediately effective by the will the visions of “fantasy.” Not all are beautiful or even wholesome, not at any rate the fantasies of fallen Man. And he has stained the elves who have this power (in verity or fable) with his own stain. This aspect of “mythology”—sub-creation, rather than either representation or symbolic interpretation of the beauties and terrors of the world—is, I think, too little considered. Is that because it is seen rather in Faerie than upon Olympus? Because it is thought to belong to the “lower mythology” rather than to the “higher”? There has been much debate concerning the relations of these things, of folk-tale and myth; but, even if there had been no debate, the question would require some notice in any consideration of origins, however brief.</p><p>At one time it was a dominant view that all such matter was derived from “nature-myths.” The Olympians were personifications of the sun, of dawn, of night, and so on, and all the stories told about them were originally myths (allegories would have been a better word) of the greater elemental changes and processes of nature. Epic, heroic legend, saga, then localized these stories in real places and humanized them by attributing them to ancestral heroes, mightier than men and yet already men. And finally these legends, dwindling down, became folk-tales, Märchen, fairy-stories—nursery-tales.</p><p>That would seem to be the truth almost upside down. The nearer the so-called “nature myth,” or allegory, of the large processes of nature is to its supposed archetype, the less interesting it is, and indeed the less is it of a myth capable of throwing any illumination whatever on the world. Let us assume for the moment, as this theory assumes, that nothing actually exists corresponding to the “gods” of mythology: no personalities, only astronomical or meteorological objects. Then these natural objects can only be arrayed with a personal significance and glory by a gift, the gift of a person, of a man. Personality can only be derived from a person. The gods may derive their colour and beauty from the high splendours of nature, but it was Man who obtained these for them, abstracted them from sun and moon and cloud; their personality they get direct from him; the shadow or flicker of divinity that is upon them they receive through him from the invisible world, the Supernatural. There is no fundamental distinction between the higher and lower mythologies. Their peoples live, if they live at all, by the same life, just as in the mortal world do kings and peasants.</p><p>Let us take what looks like a clear case of Olympian nature-myth: the Norse god Thórr. His name is Thunder, of which Thórr is the Norse form; and it is not difficult to interpret his hammer, Miöllnir, as lightning. Yet Thórr has (as far as our late records go) a very marked character, or personality, which cannot be found in thunder or in lightning, even though some details can, as it were, be related to these natural phenomena: for instance, his red beard, his loud voice and violent temper, his blundering and smashing strength. None the less it is asking a question without much meaning, if we inquire: Which came first, nature allegories about personalized thunder in the mountains, splitting rocks and trees; or stories about an irascible, not very clever, redbeard farmer, of a strength beyond common measure, a person (in all but mere stature) very like the Northern farmers, the boendr by whom Thórr was chiefly beloved? To a picture of such a man Thórr may be held to have “dwindled,” or from it the god may be held to have been enlarged. But I doubt whether either view is right—not by itself, not if you insist that one of these things must precede the other. It is more reasonable to suppose that the farmer popped up in the very moment when Thunder got a voice and face; that there was a distant growl of thunder in the hills every time a storyteller heard a farmer in a rage.</p><p>Thórr must, of course, be reckoned a member of the higher aristocracy of mythology: one ofthe rulers of the world. Yet the tale that is told of him in Thrymskvitha (in the Elder Edda) is certainly just a fairy-story. It is old, as far as Norse poems go, but that is not far back (say A.D. 900 or a little earlier, in this case). But there is no real reason for supposing that this tale is “unprimitive,” at any rate in quality: that is, because it is of folk-tale kind and not very dignified. If we could go backwards in time, the fairy-story might be found to change in details, or to give way to other tales. But there would always be a “fairy-tale” as long as there was any Thórr. When the fairy-tale ceased, there would be just thunder, which no human ear had yet heard.</p><p>Something really “higher” is occasionally glimpsed in mythology: Divinity, the right to power (as distinct from its possession), the due worship; in fact “religion.” Andrew Lang said, and is by some still commended for saying, that mythology and religion (in the strict sense of that word) are two distinct things that have become inextricably entangled, though mythology is in itself almost devoid of religious significance.</p><p>Yet these things have in fact become entangled—or maybe they were sundered long ago and have since groped slowly, through a labyrinth of error, through confusion, back towards refusion. Even fairy-stories as a whole have three faces: the Mystical towards the Supernatural; the Magical towards Nature; and the Mirror of scorn and pity towards Man. The essential face of Faerie is the middle one, the Magical. But the degree in which the others appear (if at all) is variable, and may be decided by the individual story-teller. The Magical, the fairy-story, may be used as a Mirour de l’Omme; and it may (but not so easily) be made a vehicle of Mystery. This at least is what George Mac-Donald attempted, achieving stories of power and beauty when he succeeded, as in The Golden Key (which he called a fairy-tale); and even when he partly failed, as in Lilith (which he called a romance).</p><p>For a moment let us return to the “Soup” that I mentioned above. Speaking of the history of stories and especially of fairy-stories we may say that the Pot of Soup, the Cauldron of Story, has always been boiling, and to it have continually been added new bits, dainty and undainty. For this reason, to take a casual example, the fact that a story resembling the one known as The Goosegirl (Die Gänsemagd in Grimm) is told in the thirteenth century of Bertha Broadfoot, mother of Charlemagne, really proves nothing either way: neither that the story was (in the thirteenth century) descending from Olympus or Asgard by way of an already legendary king of old, on its way to become a Hausmärchen; nor that it was on its way up. The story is found to be widespread, unattached to the mother of Charlemagne or to any historical character. From this fact by itself we certainly cannot deduce that it is not true ofCharlemagne’s mother, though that is the kind of deduction that is most frequently made from that kind of evidence. The opinion that the story is not true of Bertha Broadfoot must be founded on something else: on features in the story which the critic’s philosophy does not allow to be possible in “real life,” so that he would actually disbelieve the tale, even if it were found nowhere else; or on the existence of good historical evidence that Bertha’s actual life was quite different, so that he would disbelieve the tale, even if his philosophy allowed that it was perfectly possible in “real life.” No one, I fancy, would discredit a story that the Archbishop of Canterbury slipped on a banana skin merely because he found that a similar comic mishap had been reported of many people, and especially of elderly gentlemen of dignity. He might disbelieve the story, if he discovered that in it an angel (or even a fairy) had warned the Archbishop that he would slip if he wore gaiters on a Friday. He might also disbelieve the story, if it was stated to have occurred in the period between, say, 1940 and 1945. So much for that. It is an obvious point, and it has been made before; but I venture to make it again (although it is a little beside my present purpose), for it is constantly neglected by those who concern themselves with the origins of tales.</p><p>But what of the banana skin? Our business with it really only begins when it has been rejected by historians. It is more useful when it has been thrown away. The historian would be likely to say that the banana-skin story “became attached to the Archbishop,” as he does say on fair evidence that “the Goosegirl Märchen became attached to Bertha.” That way of putting it is harmless enough, in what is commonly known as “history.” But is it really a good description of what is going on and has gone on in the history of story-making? I do not think so. I think it would be nearer the truth to say that the Archbishop became attached to the banana skin, or that Bertha was turned into the Goosegirl. Better still: I would say tha tCharlemagne’s mother and the Archbishop were put into the Pot, in fact got into the Soup. They were just new bits added to the stock. A considerable honour, for in that soup were many things older, more potent, more beautiful, comic, or terrible than they were in themselves (considered simply as figures of history).</p><p>It seems fairly plain that Arthur, once historical (but perhaps as such not of great importance), was also put into the Pot. There he was boiled for a long time, together with many other older figures and devices, of mythology and Faerie, and even some other stray bones of history (such as Alfred’s defence against the Danes), until he emerged as a King of Faerie. The situation is similar in the great Northern “Arthurian” court of the Shield-Kings of Denmark, the Scyldingas of ancient English tradition. King Hrothgar and his family have many manifest marks of true history, far more than Arthur; yet even in the older (English) accounts of them they are associated with many figures and events of fairy-story: they have been in the Pot. But I refer now to the remnants of the oldest recorded English tales of Faerie (or its borders), in spite of the fact that they are little known in England, not to discuss the turning of the bear-boy into the knight Beowulf, or to explain the intrusion of the ogre Grendel into the royal hall of Hrothgar. I wish to point to something else that these traditions contain: a singularly suggestive example of the relation of the “fairy-tale element” to gods and kings and nameless men, illustrating (I believe) the view that this element does not rise or fall, but is there, in the Cauldron of Story, waiting for the great figures of Myth and History, and for the yet nameless He or She, waiting for the moment when they are cast into the simmering stew, one by one or all together, without consideration of rank or precedence.</p><p>The great enemy of King Hrothgar was Froda, King of the Heathobards. Yet of Hrothgar’s daughter Freawaru we hear echoes of a strange tale—not a usual one in Northern heroic legend: the son of the enemy of her house, Ingeld son of Froda, fell in love with her and wedded her, disastrously. But that is extremely interesting and significant. In the background of the ancient feud looms the figure of that god whom the Norsemen called Frey (the Lord) or Yngvi-frey, and the Angles called Ing: a god of the ancient Northern mythology (and religion) of Fertility and Corn. The enmity of the royal houses was connected with the sacred site of a cult of that religion. Ingeld and his father bear names belonging to it. Freawaru herself is named “Protection of the Lord (of Frey).” Yet one of the chief things told later (in Old Icelandic) about Frey is the story in which he falls in love from afar with the daughter of the enemies of the gods, Gerdr, daughter of the giant Gymir, and weds her. Does this prove that Ingeld and Freawaru, or their love, are “merely mythical”? I think not. History often resembles “Myth,” because they are both ultimately of the same stuff. If indeed Ingeld and Freawaru never lived, or at least never loved, then it is ultimately from nameless man and woman that they get their tale, or rather into whose tale they have entered. They have been put into the Cauldron, where so many potent things lie simmering agelong on the fire, among them Love-at-first-sight. So too of the god. If no young man had ever fallen in love by chance meeting with a maiden, and found old enmities to stand between him and his love, then the god Frey would never have seen Gerdr the giant’s daughter from the high-seat of Odin. But if we speak of a Cauldron, we must not wholly forget the Cooks. There are many things in the Cauldron, but the Cooks do not dip in the ladle quite blindly. Their selection is important. The gods are after all gods, and it is a matter of some moment what stories are told of them. So we must freely admit that a tale of love is more likely to be told of a prince in history, indeed is more likely actually to happen in an historical family whose traditions are those of Golden Frey and the Vanir, rather than those of Odin the Goth, the Necromancer, glutter of the crows, Lord of the Slain. Small wonder that spell means both a story told, and a formula of power over living men.</p><p>But when we have done all that research—collection and comparison of the tales of many lands—can do; when we have explained many of the elements commonly found embedded in fairy-stories (such as step-mothers, enchanted bears and bulls, cannibal witches, taboos on names, and the like) as relics of ancient customs once practised in daily life, or of beliefs once held as beliefs and not as “fancies”— there remains still a point too often forgotten: that is the effect produced now by these old things in the stories as they are.</p><p>For one thing they are now old, and antiquity has an appeal in itself. The beauty and horror of The Juniper Tree (Von dem Machandelboom), with its exquisite and tragic beginning, the abominable cannibal stew, the gruesome bones, the gay and vengeful bird-spirit coming out of a mist that rose from the tree, has remained with me since childhood; and yet always the chief flavour of that tale lingering in the memory was not beauty or horror, but distance and a great abyss of time, not measurable even by twe tusend Johr. Without the stew and the bones—which children are now too often spared in mollified versions of Grimm —that vision would largely have been lost. I do not think I was harmed by the horror in the fairytale setting, out of whatever dark beliefs and practices of the past it may have come. Such stories have now a mythical or total (unanalysable) effect, an effect quite independent of the findings of Comparative Folklore, and one which it cannot spoil or explain; they open a door on Other Time, and if we pass through, though only for a moment, we stand outside our own time, outside Time itself, maybe.</p><p>If we pause, not merely to note that such old elements have been preserved, but to think how they have been preserved, we must conclude, I think, that it has happened, often if not always, precisely because of this literary effect. It cannot have been we, or even the brothers Grimm, that first felt it. Fairy-stories are by no means rocky matrices out of which the fossils cannot be prised except by an expert geologist. The ancient elements can be knocked out, or forgotten and dropped out, or replaced by other ingredients with the greatest ease: as any comparison of a story with closely related variants will show. The things that are there must often have been retained (or inserted) because the oral narrators, instinctively or consciously, felt their literary “significance.” Even where a prohibition in a fairy-story is guessed to be derived from some taboo once practised long ago, it has probably been preserved in the later stages of the tale’s history because of the great mythical significance of prohibition. A sense of that significance may indeed have lain behind some of the taboos themselves. Thou shalt not—or else thou shall depart beggared into endless regret. The gentlest “nursery-tales” know it. Even Peter Rabbit was forbidden a garden, lost his blue coat, and took sick. The Locked Door stands as an eternal Temptation.</p><h1 id="children"><a class="markdownIt-Anchor" href="#children"></a> Children</h1><p>I will now turn to children, and so come to the last and most important of the three questions: what, if any, are the values and functions of fairy-stories now? It is usually assumed that children are the natural or the specially appropriate audience for fairy-stories. In describing a fairy-story which they think adults might possibly read for their own entertainment, reviewers frequently indulge in such waggeries as: “this book is for children from the ages of six to sixty.” But I have never yet seen the puff of a new motor-model that began thus: “this toy will amuse infants from seventeen to seventy”; though that to my mind would be much more appropriate. Is there any essential connexion between children and fairy-stories? Is there any call for comment, if an adult reads them for himself? Reads them as tales, that is, not studies them as curios. Adults are allowed to collect and study anything, even old theatre programmes or paper bags.</p><p>Among those who still have enough wisdom not to think fairy-stories pernicious, the common opinion seems to be that there is a natural connexion between the minds of children and fairy-stories, of the same order as the connexion between children’s bodies and milk. I think this is an error; at best an error of false sentiment, and one that is therefore most often made by those who, for whatever private reason (such as childlessness), tend to think of children as a special kind of creature, almost a different race, rather than as normal, if immature, members of a particular family, and of the human family at large.</p><p>Actually, the association of children and fairy-stories is an accident of our domestic history. Fairy-stories have in the modern lettered world been relegated to the “nursery,” as shabby or old-fashioned furniture is relegated to the play-room, primarily because the adults do not want it, and do not mind if it is misused. It is not the choice of the children which decides this. Children as a class—except in a common lack of experience they are not one—neither like fairy-stories more, nor understand them better than adults do; and no more than they like many other things. They are young and growing, and normally have keen appetites, so the fairy-stories as a rule go down well enough. But in fact only some children, and some adults, have any special taste for them; and when they have it, it is not exclusive, nor even necessarily dominant. It is a taste, too, that would not appear, I think, very early in childhood without artificial stimulus; it is certainly one that does not decrease but increases with age, if it is innate.</p><p>It is true that in recent times fairy-stories have usually been written or “adapted” for children. But so may music be, or verse, or novels, or history, or scientific manuals. It is a dangerous process, even when it is necessary. It is indeed only saved from disaster by the fact that the arts and sciences are not as a whole relegated to the nursery; the nursery and schoolroom are merely given such tastes and glimpses of the adult thing as seem fit for them in adult opinion (often much mistaken). Any one of these things would, if left altogether in the nursery, become gravely impaired. So would a beautiful table, a good picture, or a useful machine (such as a microscope), be defaced or broken, if it were left long unregarded in a schoolroom. Fairy-stories banished in this way, cut off from a full adult art, would in the end be ruined; indeed in so far as they have been so banished, they have been ruined.</p><p>The value of fairy-stories is thus not, in my opinion, to be found by considering children in particular. Collections of fairy-stories are, in fact, by nature attics and lumber-rooms, only by temporary and local custom play-rooms. Their contents are disordered, and often battered, a jumble of different dates, purposes, and tastes; but among them may occasionally be found a thing of permanent virtue: an old work of art, not too much damaged, that only stupidity would ever have stuffed away.</p><p>Andrew Lang’s Fairy Books are not, perhaps, lumber-rooms. They are more like stalls in a rummage-sale. Someone with a duster and a fair eye for things that retain some value has been round the attics and box-rooms. His collections are largely a by-product of his adult study of mythology and folk-lore; but they were made into and presented as books for children. Some of the reasons that Lang gave are worth considering.</p><p>The introduction to the first of the series speaks of “children to whom and for whom they are told.” “They represent,” he says, “the young age of man true to his early loves, and have his unblunted edge of belief, a fresh appetite for marvels.” ” ‘Is it true?’ ” he says, “is the great question children ask.”</p><p>I suspect that belief and appetite for marvels are here regarded as identical or as closely related. They are radically different, though the appetite for marvels is not at once or at first differentiated by a growing human mind from its general appetite. It seems fairly clear that Lang was using belief in its ordinary sense: belief that a thing exists or can happen in the real (primary) world. If so, then I fear that Lang’s words, stripped of sentiment, can only imply that the teller of marvellous tales to children must, or may, or at any rate does trade on their credulity, on the lack of experience which makes it less easy for children to distinguish fact from fiction in particular cases, though the distinction in itself is fundamental to the sane human mind, and to fairy-stories.</p><p>Children are capable, of course, of literary belief, when the story-maker’s art is good enough to produce it. That state of mind has been called “willing suspension of disbelief.” But this does not seem to me a good description of what happens. What really happens is that the story-maker proves a successful “sub-creator.” He makes a Secondary World which your mind can enter. Inside it, what he relates is “true”: it accords with the laws of that world. You therefore believe it, while you are, as it were, inside. The moment disbelief arises, the spell is broken; the magic, or rather art, has failed. You are then out in the Primary World again, looking at the little abortive Secondary World from outside. If you are obliged, by kindliness or circumstance, to stay, then disbelief must be suspended (or stifled), otherwise listening and looking would become intolerable. But this suspension of disbelief is a substitute for the genuine thing, a subterfuge we use when condescending to games or make-believe, or when trying (more or less willingly) to find what virtue we can in the work of an art that has for us failed.</p><p>A real enthusiast for cricket is in the enchanted state: Secondary Belief. I, when I watch a match, am on the lower level. I can achieve (more or less) willing suspension of disbelief, when I am held there and supported by some other motive that will keep away boredom: for instance, a wild, heraldic, preference for dark blue rather than light. This suspension of disbelief may thus be a somewhat tired, shabby, or sentimental state of mind, and so lean to the “adult.” I fancy it is often the state of adults in the presence of a fairy-story. They are held there and supported by sentiment (memories of childhood, or notions of what childhood ought to be like); they think they ought to like the tale. But if they really liked it, for itself, they would not have to suspend disbelief: they would believe—in this sense.</p><p>Now if Lang had meant anything like this there might have been some truth in his words. It may be argued that it is easier to work the spell with children. Perhaps it is, though I am not sure of this. The appearance that it is so is often, I think, an adult illusion produced by children’s humility, their lack of critical experience and vocabulary, and their voracity (proper to their rapid growth). They like or try to like what is given to them: if they do not like it, they cannot well express their dislike or give reasons for it (and so may conceal it); and they like a great mass of different things indiscriminately, without troubling to analyse the planes of their belief. In any case I doubt if this potion—the enchantment of the effective fairy-story— is really one of the kind that becomes “blunted” by use, less potent after repeated draughts.</p><p>”‘Is it true?’ is the great question children ask,” Lang said. They do ask that question, I know; and it is not one to be rashly or idly answered. But that question is hardly evidence of “unblunted belief,” or even of the desire for it. Most often it proceeds from the child’s desire to know which kind of literature he is faced with. Children’s knowledge of the world is often so small that they cannot judge, off-hand and without help, between the fantastic, the strange (that is rare or remote facts), the nonsensical, and the merely “grown-up” (that is ordinary things of their parents’ world, much of which still remains unexplored). But they recognize the different classes, and may like all of them at times. Of course the borders between them are often fluctuating or confused; but that is not only true for children. We all know the differences in kind, but we are not always sure how to place anything that we hear. A child may well believe a report that there are ogres in the next county; many grown up persons find it easy to believe of another country; and as for another planet, very few adults seem able to imagine it as peopled, if at all, by anything but monsters of iniquity.</p><p>Now I was one of the children whom Andrew Lang was addressing—I was born at about the same time as the Green Fairy Book—the children for whom he seemed to think that fairy-stories were the equivalent of the adult novel, and of whom he said: “Their taste remains like the taste of their naked ancestors thousands of years ago; and they seem to like fairy-tales better than history, poetry, geography, or arithmetic.” But do we really know much about these “naked ancestors,” except that they were certainly not naked? Our fairy-stories, however old certain elements in them may be, are certainly not the same as theirs. Yet if it is assumed that we have fairy-stories because they did, then probably we have history, geography, poetry, and arithmetic because they liked these things too, as far as they could get them, and in so far as they had yet separated the many branches of their general interest in everything.</p><p>And as for children of the present day, Lang’s description does not fit my own memories, or my experience of children. Lang may have been mistaken about the children he knew, but if he was not, then at any rate children differ considerably, even within the narrow borders of Britain, and such generalizations which treat them as a class (disregarding their individual talents, and the influences of the countryside they live in, and their upbringing) are delusory. I had no special “wish to believe.” I wanted to know. Belief depended on the way in which stories were presented to me, by older people, or by the authors, or on the inherent tone and quality of the tale. But at no time can I remember that the enjoyment of a story was dependent on belief that such things could happen, or had happened, in “real life.” Fairy-stories were plainly not primarily concerned with possibility, but with desirability. If they awakened desire, satisfying it while often whetting it unbearably, they succeeded. It is not necessary to be more explicit here, for I hope to say something later about this desire, a complex of many ingredients, some universal, some particular to modern men (including modern children), or even to certain kinds of men. I had no desire to have either dreams or adventures like Alice, and the amount of them merely amused me. I had very little desire to look for buried treasure or fight pirates, and Treasure Island left me cool. Red Indians were better: there were bows and arrows (I had and have a wholly unsatisfied desire to shoot well with a bow), and strange languages, and glimpses of an archaic mode of life, and, above all, forests in such stories. But the land of Merlin and Arthur was better than these, and best of all the nameless North of Sigurd of the Völsungs, and the prince of all dragons. Such lands were preeminently desirable. I never imagined that the dragon was of the same order as the horse. And that was not solely because I saw horses daily, but never even the footprint of a worm. The dragon had the trademark of Faerie written plain upon him. In whatever world he had his being it was an Other-world. Fantasy, the making or glimpsing of Other-worlds, was the heart of the desire of Faërie. I desired dragons with a profound desire. Of course, I in my timid body did not wish to have them in the neighbourhood, intruding into my relatively safe world, in which it was, for instance, possible to read stories in peace of mind, free from fear. But the world that contained even the imagination of Fáfnir was richer and more beautiful, at whatever cost of peril. The dweller in the quiet and fertile plains may hear of the tormented hills and the unharvested sea and long for them in his heart. For the heart is hard though the body be soft.</p><p>All the same, important as I now perceive the fairy-story element in early reading to have been, speaking for myself as a child, I can only say that a liking for fairy-stories was not a dominant characteristic of early taste. A real taste for them awoke after “nursery” days, and after the years, few but long-seeming, between learning to read and going to school. In that (I nearly wrote “happy” or “golden,” it was really a sad and troublous) time I liked many other things as well, or better: such as history, astronomy, botany, grammar, and etymology. I agreed with Lang’s generalized “children” not at all in principle, and only in some points by accident: I was, for instance, insensitive to poetry, and skipped it if it came in tales. Poetry I discovered much later in Latin and Greek, and especially through being made to try and translate English verse into classical verse. A real taste for fairy-stories was wakened by philology on the threshold of manhood, and quickened to full life by war.</p><p>I have said, perhaps, more than enough on this point. At least it will be plain that in my opinion fairy-stories should not be specially associated with children. They are associated with them: naturally, because children are human and fairy-stories are a natural human taste (though not necessarily a universal one); accidentally, because fairy-stories are a large part of the literary lumber that in latter-day Europe has been stuffed away in attics; unnaturally, because of erroneous sentiment about children, a sentiment that seems to increase with the decline in children.</p><p>It is true that the age of childhood-sentiment has produced some delightful books (especially charming, however, to adults) of the fairy kind or near to it; but it has also produced a dreadful undergrowth of stories written or adapted to what was or is conceived to be the measure of children’s minds and needs. The old stories are mollified or bowdlerized, instead of being reserved; the imitations are often merely silly, Pigwiggenry without even the intrigue; or patronizing; or (deadliest of all) covertly sniggering, with an eye on the other grown-ups present. I will not accuse Andrew Lang of sniggering, but certainly he smiled to himself, and certainly too often he had an eye on the faces of other clever people over the heads of his child-audience —to the very grave detriment of the Chronicles of Pantouflia.</p><p>Dasent replied with vigour and justice to the prudish critics of his translations from Norse popular tales. Yet he committed the astonishing folly of particularly forbidding children to read the last two in his collection. That a man could study fairy-stories and not learn better than that seems almost incredible. But neither criticism, rejoinder, nor prohibition would have been necessary if children had not unnecessarily been regarded as the inevitable readers of the book. I do not deny that there is a truth in Andrew Lang’s words (sentimental though they may sound): “He who would enter into the Kingdom of Faerie should have the heart of a little child.” For that possession is necessary to all high adventure, into kingdoms both less and far greater than Faerie. But humility and innocence— these things “the heart of a child” must mean in such a context—do not necessarily imply an uncritical wonder, nor indeed an uncritical tenderness. Chesterton once remarked that the children in whose company he saw Maeterlinck’s Blue Bird were dissatisfied “because it did not end with a Day of Judgement, and it was not revealed to the hero and the heroine that the Dog had been faithful and the Cat faithless.” “For children,” he says, “are innocent and love justice; while most of us are wicked and naturally prefer mercy.”</p><p>Andrew Lang was confused on this point. He was at pains to defend the slaying of the Yellow Dwarf by Prince Ricardo in one of his own fairy-stories. ”I hate cruelty,” he said, ”. . . but that was in fair fight, sword in hand, and the dwarf, peace to his ashes! died in harness.” Yet it is not clear that “fair fight” is less cruel than “fair judgement”; or that piercing a dwarf with a sword is more just than the execution of wicked kings and evil stepmothers—which Lang abjures: he sends the criminals (as he boasts) to retirement on ample pensions. That is mercy untempered by justice. It is true that this plea was not addressed to children but to parents and guardians, to whom Lang was recommending his own Prince Prigio and Prince Ricardo as suitable for their charges. It is parents and guardians who have classified fairy-stories as Juvenilia. And this is a small sample of the falsification of values that results.</p><p>If we use child in a good sense (it has also legitimately a bad one) we must not allow that to push us into the sentimentality of only using adult or grown-up in a bad sense (it has also legitimately a good one). The process of growing older is not necessarily allied to growing wickeder, though the two do often happen together. Children are meant to grow up, and not to become Peter Pans. Not to lose innocence and wonder, but to proceed on the appointed journey: that journey upon which it is certainly not better to travel hopefully than to arrive, though we must travel hopefully if we are to arrive. But it is one of the lessons of fairy-stories (if we can speak of the lessons of things that do not lecture) that on callow, lumpish, and selfish youth peril, sorrow, and the shadow of death can bestow dignity, and even sometimes wisdom.</p><p>Let us not divide the human race into Eloi and Morlocks: pretty children—“elves” as the eighteenth century often idiotically called them—with their fairytales (carefully pruned), and dark Morlocks tending their machines. If fairy-story as a kind is worth reading at all it is worthy to be written for and read by adults. They will, of course, put more in and get more out than children can. Then, as a branch of a genuine art, children may hope to get fairy-stories fit for them to read and yet within their measure; as they may hope to get suitable introductions to poetry, history, and the sciences. Though it may be better for them to read some things, especially fairy-stories, that are beyond their measure rather than short of it. Their books like their clothes should allow for growth, and their books at any rate should encourage it.</p><p>Very well, then. If adults are to read fairy-stories as a natural branch of literature—neither playing at being children, nor pretending to be choosing for children, nor being boys who would not grow up—what are the values and functions of this kind? That is, I think, the last and most important question. I have already hinted at some of my answers. First of all: if written with art, the prime value of fairy-stories will simply be that value which, as literature, they share with other literary forms. But fairy-stories offer also, in a peculiar degree or mode, these things: Fantasy, Recovery, Escape, Consolation, all things of which children have, as a rule, less need than older people. Most of them are nowadays very commonly considered to be bad for anybody. I will consider them briefly, and will begin with Fantasy.</p><h1 id="fantasy"><a class="markdownIt-Anchor" href="#fantasy"></a> Fantasy</h1><p>The human mind is capable of forming mental images of things not actually present. The faculty of conceiving the images is (or was) naturally called Imagination. But in recent times, in technical not normal language, Imagination has often been held to be something higher than the mere image-making, ascribed to the operations of Fancy (a reduced and depreciatory form of the older word Fantasy); an attempt is thus made to restrict, I should say misapply, Imagination to “the power of giving to ideal creations the inner consistency of reality.”</p><p>Ridiculous though it may be for one so ill-instructed to have an opinion on this critical matter, I venture to think the verbal distinction philologically inappropriate, and the analysis inaccurate. The mental power of image-making is one thing, or aspect; and it should appropriately be called Imagination. The perception of the image, the grasp of its implications, and the control, which are necessary to a successful expression, may vary in vividness and strength: but this is a difference of degree in Imagination, not a difference in kind. The achievement of the expression, which gives (or seems to give) “the inner consistency of reality,” is indeed another thing, or aspect, needing another name: Art, the operative link between Imagination and the final result, Sub-creation. For my present purpose I require a word which shall embrace both the Sub-creative Art in itself and a quality of strangeness and wonder in the Expression, derived from the Image: a quality essential to fairy-story. I propose, therefore, to arrogate to myself the powers of Humpty-Dumpty, and to use Fantasy for this purpose: in a sense, that is, which combines with its older and higher use as an equivalent of Imagination the derived notions of “unreality” (that is, of unlikeness to the Primary World), of freedom from the domination of observed “fact,” in short of the fantastic. I am thus not only aware but glad of the etymological and semantic connexions of fantasy with fantastic: with images of things that are not only “not actually present,” but which are indeed not to be found in our primary world at all, or are generally believed not to be found there. But while admitting that, I do not assent to the depreciative tone. That the images are of things not in the primary world (if that indeed is possible) is a virtue, not a vice. Fantasy (in this sense) is, I think, not a lower but a higher form of Art, indeed the most nearly pure form, and so (when achieved) the most potent.</p><p>Fantasy, of course, starts out with an advantage: arresting strangeness. But that advantage has been turned against it, and has contributed to its disrepute. Many people dislike being “arrested.” They dislike any meddling with the Primary World, or such small glimpses of it as are familiar to them. They, therefore, stupidly and even maliciously confound Fantasy with Dreaming, in which there is no Art; and with mental disorders, in which there is not even control: with delusion and hallucination.</p><p>But the error or malice, engendered by disquiet and consequent dislike, is not the only cause of this confusion. Fantasy has also an essential drawback: it is difficult to achieve. Fantasy may be, as I think, not less but more sub-creative; but at any rate it is found in practice that “the inner consistency of reality” is more difficult to produce, the more unlike are the images and the rearrangements of primary material to the actual arrangements of the Primary World. It is easier to produce this kind of “reality” with more “sober” material. Fantasy thus, too often, remains undeveloped; it is and has been used frivolously, or only half-seriously, or merely for decoration: it remains merely “fanciful.” Anyone inheriting the fantastic device of human language can say the green sun. Many can then imagine or picture it. But that is not enough—though it may already be a more potent thing than many a “thumbnail sketch” or “transcript of life” that receives literary praise.</p><p>To make a Secondary World inside which the green sun will be credible, commanding Secondary Belief, will probably require labour and thought, and will certainly demand a special skill, a kind of elvish craft. Few attempt such difficult tasks. But when they are attempted and in any degree accomplished then we have a rare achievement of Art: indeed narrative art, story-making in its primary and most potent mode.</p><p>In human art Fantasy is a thing best left to words, to true literature. In painting, for instance,the visible presentation of the fantastic image is technically too easy; the hand tends to outrun the mind, even to overthrow it. Silliness or morbidity are frequent results. It is a misfortune that Drama, an art fundamentally distinct from Literature, should so commonly be considered together with it, or as a branch of it. Among these misfortunes we may reckon the depreciation of Fantasy. For in part at least this depreciation is due to the natural desire of critics to cry up the forms of literature or “imagination” that they themselves, innately or by training, prefer. And criticism in a country that has produced so great a Drama, and possesses the works of William Shakespeare, tends to be far too dramatic. But Drama is naturally hostile to Fantasy. Fantasy, even of the simplest kind, hardly ever succeeds in Drama, when that is presented as it should be, visibly and audibly acted. Fantastic forms are not to be counterfeited. Men dressed up as talking animals may achieve buffoonery or mimicry, but they do not achieve Fantasy. This is, I think, well illustrated by the failure of the bastard form, pantomime. The nearer it is to “dramatized fairy-story” the worse it is. It is only tolerable when the plot and its fantasy are reduced to a mere vestigiary framework for farce, and no “belief” of any kind in any part of the performance is required or expected of anybody. This is, of course, partly due to the fact that the producers of drama have to, or try to, work with mechanism to represent either Fantasy or Magic. I once saw a so-called “children’s pantomime,” the straight story of Puss-in-Boots, with even the metamorphosis of the ogre into a mouse. Had this been mechanically successful it would either have terrified the spectators or else have been just a turn of high-class conjuring. As it was, though done with some ingenuity of lighting, disbelief had not so much to be suspended as hanged, drawn, and quartered.</p><p>In Macbeth, when it is read, I find the witches tolerable: they have a narrative function and some hint of dark significance; though they are vulgarized, poor things of their kind. They are almost intolerable in the play. They would be quite intolerable, if I were not fortified by some memory of them as they are in the story as read. I am told that I should feel differently if I had the mind of the period, with its witch-hunts and witch-trials. But that is to say: if I regarded the witches as possible, indeed likely, in the Primary World; in other words, if they ceased to be “Fantasy.” That argument concedes the point. To be dissolved, or to be degraded, is the likely fate of Fantasy when a dramatist tries to use it, even such a dramatist as Shakespeare. Macbeth is indeed a work by a playwright who ought, at least on this occasion, to have written a story, if he had the skill or patience for that art.</p><p>A reason, more important, I think, than the inadequacy of stage-effects, is this: Drama has, of its very nature, already attempted a kind of bogus, or shall I say at least substitute, magic: the visible and audible presentation of imaginary men in a story. That is in itself an attempt to counterfeit the magician’s wand. To introduce, even with mechanical success, into this quasi magical secondary world a further fantasy or magic is to demand, as it were, an inner or tertiary world. It is a world too much. To make such a thing may not be impossible. I have never seen it done with success. But at least it cannot be claimed as the proper mode of Drama, in which walking and talking people have been found to be the natural instruments of Art and illusion.</p><p>For this precise reason—that the characters, and even the scenes, are in Drama not imagined but actually beheld—Drama is, even though it uses a similar material (words, verse, plot), an art fundamentally different from narrative art. Thus, if you prefer Drama to Literature (as many literary critics plainly do), or form your critical theories primarily from dramatic critics, or even from Drama, you are apt to misunderstand pure story-making, and to constrain it to the limitations of stage-plays. You are, for instance, likely to prefer characters, even the basest and dullest, to things. Very little about trees as trees can be got into a play.</p><p>Now “Faërian Drama”—those plays which according to abundant records the elves have often presented to men—can produce Fantasy with a realism and immediacy beyond the compass of any human mechanism. As a result their usual effect (upon a man) is to go beyond Secondary Belief. If you are present at a Faërian drama you yourself are, or think that you are, bodily inside its Secondary World. The experience may be very similar to Dreaming and has (it would seem) sometimes (by men) been confounded with it. But in Faërian drama you are in a dream that some other mind is weaving, and the knowledge of that alarming fact may slip from your grasp. To experience directly a Secondary World: the potion is too strong, and you give to it Primary Belief, however marvellous the events. You are deluded—whether that is the intention of the elves (always or at any time) is another question. They at any rate are not themselves deluded. This is for them a form of Art, and distinct from Wizardry or Magic, properly so called. They do not live in it, though they can, perhaps, afford to spend more time at it than human artists can. The Primary World, Reality, of elves and men is the same, if differently valued and perceived.</p><p>We need a word for this elvish craft, but all the words that have been applied to it have been blurred and confused with other things. Magic is ready to hand, and I have used it above, but I should not have done so: Magic should be reserved for the operations of the Magician. Art is the human process that produces by the way (it is not its only or ultimate object) Secondary Belief. Art of the same sort, if more skilled and effortless, the elves can also use, or so the reports seem to show; but the more potent and specially elvish craft I will, for lack of a less debatable word, call Enchantment. Enchantment produces a Secondary World into which both designer and spectator can enter, to the satisfaction of their senses while they are inside; but in its purity it is artistic in desire and purpose. Magic produces, or pretends to produce, an alteration in the Primary World. It does not matter by whom it is said to be practised, fay or mortal, it remains distinct from the other two; it is not an art but a technique; its desire is power in this world, domination of things and wills.</p><p>To the elvish craft, Enchantment, Fantasy aspires, and when it is successful of all forms of human art most nearly approaches. At the heart of many man-made stories of the elves lies, open or concealed, pure or alloyed, the desire for a living, realized sub-creative art, which (however much it may outwardly resemble it) is inwardly wholly different from the greed for self-centred power which is the mark of the mere Magician. Of this desire the elves, in their better (but still perilous) part, are largely made; and it is from them that we may learn what is the central desire and aspiration of human Fantasy—even if the elves are, all the more in so far as they are, only a product of Fantasy itself. That creative desire is only cheated by counterfeits, whether the innocent but clumsy devices of the human dramatist, or the malevolent frauds of the magicians. In this world it is for men unsatisfiable, and so imperishable. Uncorrupted, it does not seek delusion nor bewitchment and domination; it seeks shared enrichment, partners in making and delight, not slaves.</p><p>To many, Fantasy, this sub-creative art which plays strange tricks with the world and all that is in it, combining nouns and redistributing adjectives, has seemed suspect, if not illegitimate. To some it has seemed at least a childish folly, a thing only for peoples or for persons in their youth. As for its legitimacy I will say no more than to quote a brief passage from a letter I once wrote to a man who described myth and fairy-story as “lies”; though to do him justice he was kind enough and confused enough to call fairy-story-making “Breathing a lie through Silver.”</p><blockquote><p>“Dear Sir,” I said—Although now long estranged,</p><p>Man is not wholly lost nor wholly changed.</p><p>Disgraced he may be, yet is not dethroned,</p><p>and keeps the rags of lordship once he owned:</p><p>Man, Sub-creator, the refracted Light</p><p>through whom is splintered from a single White</p><p>to many hues, and endlessly combined</p><p>in living shapes that move from mind to mind.</p><p>Though all the crannies of the world we filled</p><p>with Elves and Goblins, though we dared to build</p><p>Gods and their houses out of dark and light,</p><p>and sowed the seed of dragons—'twas our right</p><p>(used or misused). That right has not decayed:</p><p>we make still by the law in which we’re made.”</p></blockquote><p>Fantasy is a natural human activity. It certainly does not destroy or even insult Reason; and it does not either blunt the appetite for, nor obscure the perception of, scientific verity. On the contrary. The keener and the clearer is the reason, the better fantasy will it make. If men were ever in a state in which they did not want to know or could not perceive truth (facts or evidence), then Fantasy would languish until they were cured. If they ever get into that state (it would not seem at all impossible), Fantasy will perish, and become Morbid Delusion.</p><p>For creative Fantasy is founded upon the hard recognition that things are so in the world a sit appears under the sun; on a recognition of fact, but not a slavery to it. So upon logic was founded the nonsense that displays itself in the tales and rhymes of Lewis Carroll. If men really could not distinguish between frogs and men, fairy-stories about frog-kings would not have arisen.</p><p>Fantasy can, of course, be carried to excess. It can be ill done. It can be put to evil uses. It may even delude the minds out of which it came. But of what human thing in this fallen world is that not true? Men have conceived not only of elves, but they have imagined gods, and worshipped them, even worshipped those most deformed by their authors’ own evil. But they have made false gods out of other materials: their notions, their banners, their monies; even their sciences and their social and economic theories have demanded human sacrifice. Abusus non tollit usum. Fantasy remains a human right: we make in our measure and in our derivative mode, because we are made: and not only made, but made in the image and likeness of a Maker.</p><h1 id="recovery-escape-consolation"><a class="markdownIt-Anchor" href="#recovery-escape-consolation"></a> Recovery, Escape, Consolation</h1><p>As for old age, whether personal or belonging to the times in which we live, it may be true, as is often supposed, that this imposes disabilities. But it is in the main an idea produced by the mere study of fairy-stories. The analytic study of fairy-stories is as bad a preparation for the enjoying or the writing of them as would be the historical study of the drama of all lands and times for the enjoyment or writing of stage-plays. The study may indeed become depressing. It is easy for the student to feel that with all his labour he is collecting only a few leaves, many of them now torn or decayed, from the countless foliage of the Tree of Tales, with which the Forest of Days is carpeted. It seems vain to add to the litter. Who can design a new leaf? The patterns from bud to unfolding, and the colours from spring to autumn were all discovered by men long ago. But that is not true. The seed of the tree can be replanted in almost any soil, even in one so smoke-ridden (as Lang said) as that of England. Spring is, of course, not really less beautiful because we have seen or heard of other like events: like events, never from world’s beginning to world’s end the same event. Each leaf, of oak and ash and thorn, is a unique embodiment of the pattern, and for some this very year may be the embodiment, the first ever seen and recognized, though oaks have put forth leaves for countless generations of men.</p><p>We do not, or need not, despair of drawing because all lines must be either curved or straight, nor of painting because there are only three “primary” colours. We may indeed be older now, in so far as we are heirs in enjoyment or in practice of many generations of ancestors in the arts. In this inheritance of wealth there may be a danger of boredom or of anxiety to be original, and that may lead to a distaste for fine drawing, delicate pattern, and “pretty” colours, or else to mere manipulation and over-elaboration of old material, clever and heartless. But the true road of escape from such weariness is not to be found in the wilfully awkward, clumsy, or misshapen, not in making all things dark or unremittingly violent; nor in the mixing of colours on through subtlety to drabness, and the fantastical complication of shapes to the point of silliness and on towards delirium. Before we reach such states we need recovery. We should look at green again, and be startled anew (but not blinded) by blue and yellow and red. We should meet the centaur and the dragon, and then perhaps suddenly behold, like the ancient shepherds, sheep, and dogs, and horses—and wolves. This recovery fairy-stories help us to make. In that sense only a taste for them may make us, or keep us, childish.</p><p>Recovery (which includes return and renewal of health) is a re-gaining—regaining of a clear view. I do not say “seeing things as they are” and involve myself with the philosophers, though I might venture to say “seeing things as we are (or were) meant to see them”—as things apart from ourselves. We need, in any case, to clean our windows; so that the things seen clearly may be freed from the drab blur of triteness or familiarity—from possessiveness. Of all faces those of our familiares are the ones both most difficult to play fantastic tricks with, and most difficult really to see with fresh attention, perceiving their likeness and unlikeness: that they are faces, and yet unique faces. This triteness is really the penalty of “appropriation”: the things that are trite, or (in a bad sense) familiar, are the things that we have appropriated, legally or mentally. We say we know them. They have become like the things which once attracted us by their glitter, or their colour, or their shape, and we laid hands on them, and then locked them in our hoard, acquired them, and acquiring ceased to look at them.</p><p>Of course, fairy-stories are not the only means of recovery, or prophylactic against loss. Humility is enough. And there is (especially for the humble) Mooreeffoc, or Chestertonian Fantasy. Mooreeffoc is a fantastic word, but it could be seen written up in every town in this land. It is Coffee-room, viewed from the inside through a glass door, as it was seen by Dickens on a dark London day; and it was used by Chesterton to denote the queerness of things that have become trite, when they are seen suddenly from a new angle. That kind of “fantasy” most people would allow to be wholesome enough; and it can never lack for material. But it has, I think, only a limited power; for the reason that recovery of freshness of vision is its only virtue. The word Mooreeffoc may cause you suddenly to realize that England is an utterly alien land, lost either in some remote past age glimpsed by history, or in some strange dim future to be reached only by a time-machine; to see the amazing oddity and interest of its inhabitants and their customs and feeding-habits; but it cannot do more than that: act as a time-telescope focused on one spot. Creative fantasy, because it is mainly trying to do something else (make something new), may open your hoard and let all the locked things fly away like cage-birds. The gems all turn into flowers or flames, and you will be warned that all you had (or knew) was dangerous and potent, not really effectively chained, free and wild; no more yours than they were you.</p><p>The “fantastic” elements in verse and prose of other kinds, even when only decorative or occasional, help in this release. But not so thoroughly as a fairy-story, a thing built on or about Fantasy, of which Fantasy is the core. Fantasy is made out of the Primary World, but a good craftsman loves his material, and has a knowledge and feeling for clay, stone and wood which only the art of making can give. By the forging of Gram cold iron was revealed; by the making of Pegasus horses were ennobled; in the Trees of the Sun and Moon root and stock, flower and fruit are manifested in glory.</p><p>And actually fairy-stories deal largely, or (the better ones) mainly, with simple or fundamental things, untouched by Fantasy, but these simplicities are made all the more luminous by their setting. For the story-maker who allows himself to be “free with” Nature can be her lover not her slave. It was in fairy-stories that I first divined the potency of the words, and the wonder of the things, such as stone, and wood, and iron; tree and grass; house and fire; bread and wine.</p><p>I will now conclude by considering Escape and Consolation, which are naturally closely connected. Though fairy-stories are of course by no means the only medium of Escape, they are today one of the most obvious and (to some) outrageous forms of “escapist” literature; and it is thus reasonable to attach to a consideration of them some considerations of this term “escape” in criticism generally.</p><p>I have claimed that Escape is one of the main functions of fairy-stories, and since I do not disapprove of them, it is plain that I do not accept the tone of scorn or pity with which “Escape” is now so often used: a tone for which the uses of the word outside literary criticism give no warrant at all. In what the misusers are fond of calling Real Life, Escape is evidently as a rule very practical, and may even be heroic. In real life it is difficult to blame it, unless it fails; in criticism it would seem to be the worse the better it succeeds. Evidently we are faced by a misuse of words, and also by a confusion of thought. Why should a man be scorned if, finding himself in prison, he tries to get out and go home? Or if, when he cannot do so, he thinks and talks about other topics than jailers and prison-walls? The world outside has not become less real because the prisoner cannot see it. In using escape in this way the critics have chosen the wrong word, and, what is more, they are confusing, not always by sincere error, the Escape of the Prisoner with the Flight of the Deserter. Just so a Party-spokesman might have labelled departure from the misery of the Führer’s or any other Reich and even criticism of it as treachery. In the same way these critics, to make confusion worse, and so to bring into contempt their opponents, stick their label of scorn not only on to Desertion, but on to real Escape, and what are often its companions, Disgust, Anger, Condemnation, and Revolt. Not only do they confound the escape of the prisoner with the flight of the deserter; but they would seem to prefer the acquiescence of the “quisling” to the resistance of the patriot. To such thinking you have only to say “the land you loved is doomed” to excuse any treachery, indeed to glorify it.</p><p>For a trifling instance: not to mention (indeed not to parade) electric street-lamps of mass produced pattern in your tale is Escape (in that sense). But it may, almost certainly does, proceed from a considered disgust for so typical a product of the Robot Age, that combines elaboration and ingenuity of means with ugliness, and (often) with inferiority of result. These lamps may be excluded from the tale simply because they are bad lamps; and it is possible that one of the lessons to be learnt from the story is the realization of this fact. But out comes the big stick: “Electric lamps have come to stay,” they say. Long ago Chesterton truly remarked that, as soon as he heard that anything “had come to stay,” he knew that it would be very soon replaced—indeed regarded as pitiably obsolete and shabby. “The march of Science, its tempo quickened by the needs of war, goes inexorably on… making some things obsolete, and foreshadowing new developments in the utilization of electricity”: an advertisement. This says the same thing only more menacingly. The electric street-lamp may indeed be ignored, simply because it is so insignificant and transient. Fairy-stories, at any rate, have many more permanent and fundamental things to talk about. Lightning, for example. The escapist is not so subservient to the whims of evanescent fashion as these opponents. He does not make things (which it may be quite rational to regard as bad) his masters or his gods by worshipping them as inevitable, even “inexorable.” And his opponents, so easily contemptuous, have no guarantee that he will stop there: he might rouse men to pull down the street-lamps. Escapism has another and even wickeder face: Reaction.</p><p>Not long ago—incredible though it may seem—I heard a clerk of Oxenford declare that he “welcomed” the proximity of mass-production robot factories, and the roar of self-obstructive mechanical traffic, because it brought his university into “contact with real life.” He may have meant that the way men were living and working in the twentieth century was increasing in barbarity at an alarming rate, and that the loud demonstration of this in the streets of Oxford might serve as a warning that it is not possible to preserve for long an oasis of sanity in a desert of unreason by mere fences, without actual offensive action (practical and intellectual). I fear he did not. In any case the expression “real life” in this context seems to fall short of academic standards. The notion that motor-cars are more “alive” than, say, centaurs or dragons is curious; that they are more “real” than, say, horses is pathetically absurd. How real, how startlingly alive is a factory chimney compared with an elm-tree: poor obsolete thing, insubstantial dream of an escapist!</p><p>For my part, I cannot convince myself that the roof of Bletchley station is more “real” than the clouds. And as an artefact I find it less inspiring than the legendary dome of heaven. Thebridge to platform 4 is to me less interesting than Bifröst guarded by Heimdall with the Gjallarhorn. From the wildness of my heart I cannot exclude the question whether railway engineers ,if they had been brought up on more fantasy, might not have done better with all their abundant means than they commonly do. Fairy-stories might be, I guess, better Masters of Arts than the academic person I have referred to.</p><p>Much that he (I must suppose) and others (certainly) would call “serious” literature is no more than play under a glass roof by the side of a municipal swimming-bath. Fairy-stories may invent monsters that fly the air or dwell in the deep, but at least they do not try to escape from heaven or the sea.</p><p>And if we leave aside for a moment “fantasy,” I do not think that the reader or the maker of fairy-stories need even be ashamed of the “escape” of archaism: of preferring not dragons but horses, castles, sailing-ships, bows and arrows; not only elves, but knights and kings and priests. For it is after all possible for a rational man, after reflection (quite unconnected with fairy-story or romance), to arrive at the condemnation, implicit at least in the mere silence of “escapist” literature, of progressive things like factories, or the machine-guns and bombs that appear to be their most natural and inevitable, dare we say “inexorable,” products.</p><p>“The rawness and ugliness of modern European life”—that real life whose contact we should welcome —“is the sign of a biological inferiority, of an insufficient or false reaction to environment.” The maddest castle that ever came out of a giant’s bag in a wild Gaelic story is not only much less ugly than a robot-factory, it is also (to use a very modern phrase) “in a very real sense” a great deal more real. Why should we not escape from or condemn the “grim Assyrian” absurdity of top-hats, or the Morlockian horror of factories? They are condemned even by the writers of that most escapist form of all literature, stories of Science fiction. These prophets often foretell (and many seem to yearn for) a world like one big glass-roofed railway-station. But from them it is as a rule very hard to gather what men in such a world-town will do. They may abandon the “full Victorian panoply” for loose garments (with zip-fasteners), but will use this freedom mainly, it would appear, in order to play with mechanical toys in the soon-cloying game of moving at high speed. To judge by some of these tales they will still be as lustful, vengeful, and greedy as ever; and the ideals of their idealists hardly reach farther than the splendid notion of building more towns of the same sort on other planets. It is indeed an age of “improved means to deteriorated ends.” It is part of the essential malady of such days—producing the desire to escape, not indeed from life, but from our present time and self-made misery—that we are acutely conscious both of the ugliness of our works, and of their evil. So that to us evil and ugliness seem indissolubly allied. We find it difficult to conceive of evil and beauty together. The fear of the beautiful fay that ran through the elder ages almost eludes our grasp. Even more alarming: goodness is itself bereft of its proper beauty. In Faerie one can indeed conceive of an ogre who possesses a castle hideous as a nightmare (for the evil of the ogre wills it so), but one cannot conceive of a house built with a good purpose—an inn, a hostel for travellers, the hall of a virtuous and noble king—that is yet sickeningly ugly. At the present day it would be rash to hope to see one that was not—unless it was built before our time.</p><p>This, however, is the modern and special (or accidental) “escapist” aspect of fairy-stories, which they share with romances, and other stories out of or about the past. Many stories out of the past have only become “escapist” in their appeal through surviving from a time when men were as a rule delighted with the work of their hands into our time, when many men feel disgust with man-made things.</p><p>But there are also other and more profound “escapisms” that have always appeared in fairytale and legend. There are other things more grim and terrible to fly from than the noise, stench, ruthlessness, and extravagance of the internal-combustion engine. There are hunger, thirst, poverty, pain, sorrow, injustice, death. And even when men are not facing hard things such as these, there are ancient limitations from which fairy-stories offer a sort of escape, and old ambitions and desires (touching the very roots of fantasy) to which they offer a kind of satisfaction and consolation. Some are pardonable weaknesses or curiosities: such as the desire to visit, free as a fish, the deep sea; or the longing for the noiseless, gracious, economical flight of a bird, that longing which the aeroplane cheats, except in rare moments, seen high and by wind and distance noiseless, turning in the sun: that is, precisely when imagined and not used. There are profounder wishes: such as the desire to converse with other living things. On this desire, as ancient as the Fall, is largely founded the talking of beasts and creatures in fairy-tales, and especially the magical understanding of their proper speech. This is the root, and not the “confusion” attributed to the minds of men of the unrecorded past, an alleged “absence of the sense of separation of ourselves from beasts.” A vivid sense of that separation is very ancient; but also a sense that it was a severance: a strange fate and a guilt lies on us. Other creatures are like other realms with which Man has broken off relations, and sees now only from the outside at a distance, being at war with them, or on the terms of an uneasy armistice. There are a few men who are privileged to travel abroad a little; others must be content with travellers’ tales. Even about frogs. In speaking of that rather odd but widespread fairy-story The Frog-King Max Müller asked in his prim way: “How came such a story ever to be invented? Human beings were, we may hope, at all times sufficiently enlightened to know that a marriage between a frog and the daughter of a queen was absurd.” Indeed we may hope so! For if not, there would be no point in this story at all, depending as it does essentially on the sense of the absurdity. Folk-lore origins (or guesses about them) are here quite beside the point. It is of little avail to consider totemism. For certainly, whatever customs or beliefs about frogs and wells lie behind this story, the frog shape was and is preserved in the fairy-story precisely because it was so queer and the marriage absurd, indeed abominable. Though, of course, in the versions which concern us, Gaelic, German, English, there is in fact no wedding between a princess and a frog: the frog was an enchanted prince. And the point of the story lies not in thinking frogs possible mates, but in the necessity of keeping promises (even those with intolerable consequences) that, together with observing prohibitions, runs through all Fairyland. This is one of the notes of the horns of Elfland, and not a dim note.</p><p>And lastly there is the oldest and deepest desire, the Great Escape: the Escape from Death. Fairy-stories provide many examples and modes of this—which might be called the genuine escapist, or (I would say) fugitive spirit. But so do other stories (notably those of scientific inspiration), and so do other studies. Fairy-stories are made by men not by fairies. The Human-stories of the elves are doubtless full of the Escape from Deathlessness. But our stories cannot be expected always to rise above our common level. They often do. Few lessons are taught more clearly in them than the burden of that kind of immortality, or rather endless serial living, to which the “fugitive” would fly. For the fairy-story is specially apt to teach such things, of old and still today. Death is the theme that most inspired George MacDonald.</p><p>But the “consolation” of fairy-tales has another aspect than the imaginative satisfaction of ancient desires. Far more important is the Consolation of the Happy Ending. Almost I would venture to assert that all complete fairy-stories must have it. At least I would say that Tragedy is the true form of Drama, its highest function; but the opposite is true of Fairy-story. Since we do not appear to possess a word that expresses this opposite—I will call it Eucatastrophe. The eucatastrophic tale is the true form of fairy-tale, and its highest function.</p><p>The consolation of fairy-stories, the joy of the happy ending: or more correctly of the good catastrophe, the sudden joyous “turn” (for there is no true end to any fairy-tale): this joy, which is one of the things which fairy-stories can produce supremely well, is not essentially “escapist,” nor “fugitive.” In its fairy-tale—or otherworld—setting, it is a sudden and miraculous grace: never to be counted on to recur. It does not deny the existence of dyscatastrophe, of sorrow and failure: the possibility of these is necessary to the joy of deliverance; it denies (in the face of much evidence, if you will) universal final defeat and inso far is evangelium, giving a fleeting glimpse of Joy, Joy beyond the walls of the world, poignant as grief.</p><p>It is the mark of a good fairy-story, of the higher or more complete kind, that however wild its events, however fantastic or terrible the adventures, it can give to child or man that hears it, when the “turn” comes, a catch of the breath, a beat and lifting of the heart, near to (or indeed accompanied by) tears, as keen as that given by any form of literary art, and having a peculiar quality.</p><p>Even modern fairy-stories can produce this effect sometimes. It is not an easy thing to do; it depends on the whole story which is the setting of the turn, and yet it reflects a glory backwards. A tale that in any measure succeeds in this point has not wholly failed, whatever flaws it may possess, and whatever mixture or confusion of purpose. It happens even in Andrew Lang’s own fairy-story, Prince Prigio, unsatisfactory in many ways as that is. When “each knight came alive and lifted his sword and shouted ‘long live Prince Prigio,’ ” the joy has a little of that strange mythical fairy-story quality, greater than the event described. It would have none in Lang’s tale, if the event described were not a piece of more serious fairy-story “fantasy” than the main bulk of the story, which is in general more frivolous, having the half-mocking smile of the courtly, sophisticated Conte. Far more powerful and poignant is the effect in a serious tale of Faërie. In such stories when the sudden “turn” comes we get a piercing glimpse of joy, and heart’s desire, that for a moment passes outside the frame, rends indeed the very web of story, and lets a gleam come through.</p><blockquote><p>“Seven long years I served for thee,</p><p>The glassy hill I clamb for thee,</p><p>The bluidy shirt I wrang for thee,</p><p>And wilt thou not wauken and turn to me?”</p></blockquote><p>He heard and turned to her.</p><h1 id="epilogue"><a class="markdownIt-Anchor" href="#epilogue"></a> Epilogue</h1><p>This ”joy” which I have selected as the mark of the true fairy-story (or romance), or as the seal upon it, merits more consideration.</p><p>Probably every writer making a secondary world, a fantasy, every sub-creator, wishes in some measure to be a real maker, or hopes that he is drawing on reality: hopes that the peculiar quality of this secondary world (if not all the details) are derived from Reality, or are flowing into it. If he indeed achieves a quality that can fairly be described by the dictionary definition: “inner consistency of reality,” it is difficult to conceive how this can be, if the work does not in some way partake of reality. The peculiar quality of the ”joy” in successful Fantasy can thus be explained as a sudden glimpse of the underlying reality or truth. It is not only a “consolation” for the sorrow of this world, but a satisfaction, and an answer to that question, “Is it true?” The answer to this question that I gave at first was (quite rightly): “If you have built your little world well, yes: it is true in that world.” That is enough for the artist (or the artist part of the artist). But in the “eucatastrophe” we see in a brief vision that the answer may be greater—it may be a far-off gleam or echo of evangelium in the real world. The use of this word gives a hint of my epilogue. It is a serious and dangerous matter. It is presumptuous of me to touch upon such a theme; but if by grace what I say has in any respect any validity, it is, of course, only one facet of a truth incalculably rich: finite only because the capacity of Man for whom this was done is finite.</p><p>I would venture to say that approaching the Christian Story from this direction, it has long been my feeling (a joyous feeling) that God redeemed the corrupt making-creatures, men, in a way fitting to this aspect, as to others, of their strange nature. The Gospels contain a fairystory,or a story of a larger kind which embraces all the essence of fairy-stories. They contain many marvels—peculiarly artistic, beautiful, and moving: “mythical” in their perfect, self-contained significance; and among the marvels is the greatest and most complete conceivable eucatastrophe. But this story has entered History and the primary world; the desire and aspiration of sub-creation has been raised to the fulfillment of Creation. The Birth of Christ is the eucatastrophe of Man’s history. The Resurrection is the eucatastrophe of the story of the Incarnation. This story begins and ends in joy. It has pre-eminently the “inner consistency of reality.” There is no tale ever told that men would rather find was true, and none which so many sceptical men have accepted as true on its own merits. For the Art of it has the supremely convincing tone of Primary Art, that is, of Creation. To reject it leads either to sadness or to wrath.</p><p>It is not difficult to imagine the peculiar excitement and joy that one would feel, if any specially beautiful fairy-story were found to be “primarily” true, its narrative to be history, without thereby necessarily losing the mythical or allegorical significance that it had possessed. It is not difficult, for one is not called upon to try and conceive anything of a quality unknown. The joy would have exactly the same quality, if not the same degree, as the joy which the “turn” in a fairy-story gives: such joy has the very taste of primary truth. (Otherwise its name would not be joy.) It looks forward (or backward: the direction in this regard is unimportant) to the Great Eucatastrophe. The Christian joy, the Gloria, is of the same kind; but it is preeminently (infinitely, if our capacity were not finite) high and joyous. But this story is supreme; and it is true. Art has been verified. God is the Lord, of angels, and of men—and of elves. Legend and History have met and fused.</p><h1 id="notes"><a class="markdownIt-Anchor" href="#notes"></a> Notes</h1><h2 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h2><p>The very root (not only the use) of their “marvels” is satiric, a mockery of unreason; and the “dream” element is not a mere machinery of introduction and ending, but inherent in the action and transitions. These things children can perceive and appreciate, if left to themselves. But to many, as it was to me, Alice is presented as a fairy-story and while this misunderstanding lasts, the distaste for the dream-machinery is felt. There is no suggestion of dream in The Wind in the Willows. “The Mole had been working very hard all the morning, spring-cleaning his little house.” So it begins, and that correct tone is maintained. It is all the more remarkable that A. A. Milne, so great an admirer of this excellent book, should have prefaced to his dramatized version a “whimsical” opening in which a child is seen telephoning with a daffodil. Or perhaps it is not very remarkable, for a perceptive admirer (as distinct from a great admirer) of the book would never have attempted to dramatize it. Naturally only the simpler ingredients, the pantomime, and the satiric beast-fable elements, are capable of presentation in this form. The play is, on the lower level of drama, tolerably good fun, especially for those who have not read the book; but some children that I took to see Toad of Toad Hall, brought away as their chief memory nausea at the opening. For the rest they preferred their recollections of the book.</p><h2 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h2><p>Of course, these details, as a rule, got into the tales, even in the days when they were real practices, because they had a story-making value. If I were to write a story in which it happened that a man was hanged, that might show in later ages, if the story survived— in itself a sign that the story possessed some permanent, and more than local or temporary, value—that it was written at a period when men were really hanged, as a legal practice. Might: the inference would not, of course, in that future time be certain. For certainty on that point the future inquirer would have to know definitely when hanging was practised and when I lived. I could have borrowed the incident from other times and places, from other stories; I could simply have invented it. But even if this inference happened to be correct, the hanging scene would only occur in the story, (a) because I was aware of the dramatic, tragic, or macabre force of this incident in my tale, and (b) because those who handed it down felt this force enough to make them keep the incident in. Distance of time ,sheer antiquity and alienness, might later sharpen the edge of the tragedy or the horror; but the edge must be there even for the elvish hone of antiquity to whet it. The least useful question, therefore, for literary critics at any rate, to ask or to answer about Iphigeneia, daughter of Agamemnon, is: Does the legend of her sacrifice at Aulis come down from a time when human sacrifice was commonly practised? I say only “as a rule,” because it is conceivable that what is now regarded as a “story” was once something different in intent: e.g. a record of fact or ritual. I mean “record” strictly. A story invented to explain a ritual (a process that is sometimes supposed to have frequently occurred) remains primarily a story. It takes form as such, and will survive (long after the ritual evidently) only because of its story <a href="http://values.In">values.In</a> some cases details that now are notable merely because they are strange may have once been so everyday and unregarded that they were slipped in casually: like mentioning that a man “raised his hat,” or “caught a train.” But such casual details will not long survive change in everyday habits. Not in a period of oral transmission. In a period of writing (and of rapid changes in habits) a story may remain unchanged long enough for even its casual details to acquire the value of quaintness or queerness. Much of Dickens now has this air. One can open today an edition of a novel of his that was bought and first read when things were so in everyday life as they are in the story, though these everyday details are now already as remote from our daily habits as the Elizabethan period. But that is a special modern situation. The anthropologists and folk-lorists do not imagine any conditions of that kind. But if they are dealing with unlettered oral transmission, then they should all the more reflect that in that case they are dealing with items whose primary object was story-building, and whose primary reason for survival was the same. The Frog-King is not a Credo, nor a manual of totem-law: it is a queer tale with a plain moral.</p><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h2><p>As far as my knowledge goes, children who have an early bent for writing have no special inclination to attempt the writing of fairy-stories, unless that has been almost the sole form of literature presented to them; and they fail most markedly when they try. It is not an easy form. If children have any special leaning it is to Beast-fable, which adults often confuse with Fairy-story. The best stories by children that I have seen have been either “realistic” (in intent), or have had as their characters animals and birds, who were in the main the zoomorphic human beings usual in Beast-fable. I imagine that this form is so often adopted principally because it allows a large measure of realism: the representation of domestic events and talk that children really know. The form itself is, however, as a rule, suggested or imposed by adults. It has a curious preponderance in the literature, good and bad, that is nowadays commonly presented to young children: I suppose it is felt to go with “Natural History,” semi-scientific books about beasts and birds that are also considered to be proper pabulum for the young. And it is reinforced by the bears and rabbits that seem in recent times almost to have ousted human dolls from the playrooms even of little girls. Children make up sagas, often long and elaborate, about their dolls. If these are shaped like bears, bears will be the characters of the sagas; but they will talk like people.</p><h2 id="d"><a class="markdownIt-Anchor" href="#d"></a> D</h2><p>I was introduced to zoology and palaeontology (“for children’’) quite as early as to Faerie. I saw pictures of living beasts and of true (so I was told) prehistoric animals. I liked the “prehistoric” animals best: they had at least lived long ago, and hypothesis (based on somewhat slender evidence) cannot avoid a gleam of fantasy. But I did not like being told that these creatures were “dragons.” I can still re-feel the irritation that I felt in childhood at assertions of instructive relatives (or their gift-books) such as these: “snowflakes are fairy jewels,” or “are more beautiful than fairy jewels”; “the marvels of the ocean depths are more wonderful than fairyland.” Children expect the differences they feel but cannot analyse to be explained by their elders, or at least recognized, not to be ignored or denied. I was keenly alive to the beauty of “Real things,” but it seemed to me quibbling to confuse this with the wonder of “Other things.” I was eager to study Nature, actually more eager than I was to read most fairy stories; but I did not want to be quibbled into Science and cheated out of Faerie by people who seemed to assume that by some kind of original sin I should prefer fairy-tales, but according to some kind of new religion I ought to be induced to like science. Nature is no doubt a life-study, or a study for eternity (for those so gifted); but there is a part of man which is not “Nature,” and which therefore is not obliged to study it, and is, in fact, wholly unsatisfied by it.</p><h2 id="e"><a class="markdownIt-Anchor" href="#e"></a> E</h2><p>There is, for example, in surrealism commonly present a morbidity or un-ease very rarely found in literary fantasy. The mind that produced the depicted images may often be suspected to have been in fact already morbid; yet this is not a necessary explanation in all cases. A curious disturbance of the mind is often set up by the very act of drawing things of this kind, a state similar in quality and consciousness of morbidity to the sensations in a high fever, when the mind develops a distressing fecundity and facility in figure-making, seeing forms sinister or grotesque in all visible objects about it. I am speaking here, of course, of the primary expression of Fantasy in “pictorial” arts, not of “illustrations”; nor of the cinematograph. However good in themselves, illustrations do little good to fairy-stories. The radical distinction between all art (including drama) that offers a visible presentation and true literature is that it imposes one visible form. Literature works from mind to mind and is thus more progenitive. It is at once more universal and more poignantly particular. If it speaks of bread or wine or stone or tree, it appeals to the whole of these things, to their ideas; yet each hearer will give to them a peculiar personal embodiment in his imagination. Should the story say “he ate bread,” the dramatic producer or painter can only show ”a piece of bread” according to his taste or fancy, but the hearer of the story will think of bread in general and picture it in some form of his own. If a story says “he climbed a hill and saw a river in the valley below,” the illustrator may catch, or nearly catch, his own vision of such a scene; but every hearer of the words will have his own picture, and it will be made out of all the hills and rivers and dales he has ever seen, but especially out of The Hill, The River, The Valley which were for him the first embodiment of the word.</p><h2 id="f"><a class="markdownIt-Anchor" href="#f"></a> F</h2><p>I am referring, of course, primarily to fantasy of forms and visible shapes. Drama can be made out of the impact upon human characters of some event of Fantasy, or Faerie, that requires no machinery, or that can be assumed or reported to have happened. But that is not fantasy in dramatic result; the human characters hold the stage and upon them attention is concentrated. Drama of this sort (exemplified by some of Barrie’s plays) can be used frivolously, or it can be used for satire, or for conveying such “messages” as the playwright may have in his mind—for men. Drama is anthropocentric. Fairy-story and Fantasy need not be. There are, for instance, many stories telling how men and women have disappeared and spent years among the fairies, without noticing the passage of time, or appearing to grow older. In Mary Rose Barrie wrote a play on this theme. No fairy is seen. The cruelly tormented human beings are there all the time. In spite of the sentimental star and the angelic voices at the end (in the printed version) it is a painful play, and can easily be made diabolic: by substituting (as I have seen it done) the elvish call for “angel voices” at the end. The non-dramatic fairy-stories, in so far as they are concerned with the human victims, can also be pathetic or horrible. But they need not be. In most of them the fairies are also there, on equal terms. In some stories they are the real interest. Many of the short folk-lore accounts of such incidents purport to be just pieces of “evidence” about fairies, items in an age long accumulation of “lore” concerning them and the modes of their existence. The sufferings of human beings who come into contact with them (often enough, wilfully) are thus seen in quite a different perspective. A drama could be made about the sufferings of a victim of research in radiology, but hardly about radium itself. But it is possible to be primarily interested in radium (not radiologists)—or primarily interested in Faerie, not tortured mortals. One interest will produce a scientific book, the other a fairy-story. Drama cannot well cope with either.</p><h2 id="g"><a class="markdownIt-Anchor" href="#g"></a> G</h2><p>The absence of this sense is a mere hypothesis concerning men of the lost past, whatever wild confusions men of today, degraded or deluded, may suffer. It is just as legitimate an hypothesis, and one more in agreement with what little is recorded concerning the thoughts of men of old on this subject, that this sense was once stronger. That fantasies which blended the human form with animal and vegetable forms, or gave human faculties to beasts, are ancient is, of course, no evidence for confusion at all. It is, if anything, evidence to the contrary. Fantasy does not blur the sharp outlines of the real world; for it depends on them. As far as our western, European, world is concerned, this “sense of separation” has in fact been attacked and weakened in modern times not by fantasy but by scientific theory. Not by stories of centaurs or werewolves or enchanted bears, but by the hypotheses (or dogmatic guesses) of scientific writers who classed Man not only as “an animal”—that correct classification is ancient—but as “only an animal.” There has been a consequent distortion of sentiment. The natural love of men not wholly corrupt for beasts, and the human desire to “get inside the skin” of living things, has run riot. We now get men who love animals more than men; who pity sheep so much that they curse shepherds as wolves; who weep over a slain war-horse and vilify dead soldiers. It is now, not in the days when fairy-stories werebegotten, that we get “an absence of the sense of separation.”</p><h2 id="h"><a class="markdownIt-Anchor" href="#h"></a> H</h2><p>The verbal ending—usually held to be as typical of the end of fairy-stories as “once upon a time” is of the beginning—“and they lived happily ever after” is an artificial device. It does not deceive anybody. End-phrases of this kind are to be compared to the margins and frames of pictures, and are no more to be thought of as the real end of any particular fragment of the seamless Web of Story than the frame is of the visionary scene, or the casement of the Outer World. These phrases may be plain or elaborate, simple or extravagant, as artificial and as necessary as frames plain, or carved, or gilded. “And if they have not gone away they are there still.” “My story is done—see there is a little mouse; anyone who catches it may make himself a fine fur cap of it.” “And they lived happily ever after.” “And when the wedding was over, they sent me home with little paper shoes on a causeway of pieces of glass.”</p><p>Endings of this sort suit fairy-stories, because such tales have a greater sense and grasp of the endlessness of the World of Story than most modern “realistic” stories, already hemmed within the narrow confines of their own small time. A sharp cut in the endless tapestry is not unfittingly marked by a formula, even a grotesque or comic one. It was an irresistible development of modern illustration (so largely photographic) that borders should be abandoned and the “picture” end only with the paper. This method may be suitable for photographs; but it is altogether inappropriate for the pictures that illustrate or are inspired by fairy-stories. An enchanted forest requires a margin, even an elaborate border. To print it conterminous with the page, like a “shot” of the Rockies in Picture Post, as if it were indeed a “snap” of fairyland or a “sketch by our artist on the spot,” is a folly and an abuse.</p><p>As for the beginnings of fairy-stories: one can scarcely improve on the formula Once upon atime. It has an immediate effect. This effect can be appreciated by reading, for instance, the fairy-story The Terrible Head in the Blue Fairy Book. It is Andrew Lang’s own adaptation of the story of Perseus and the Gorgon. It begins “once upon a time,” and it does not name any year or land or person. Now this treatment does something which could be called “turning mythology into fairy-story.” I should prefer to say that it turns high fairy-story (for such is the Greek tale) into a particular form that is at present familiar in our land: a nursery or “old wives” form. Namelessness is not a virtue but an accident, and should not have been imitated; for vagueness in this regard is a debasement, a corruption due to forgetfulness and lack of skill. But not so, I think, the timelessness. That beginning is not poverty-stricken but significant. It produces at a stroke the sense of a great uncharted world of time.</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>艺术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WordPress主题构建：Customizer</title>
    <link href="/2022/08/10/WordPress%E4%B8%BB%E9%A2%98%E6%9E%84%E5%BB%BA%EF%BC%9ACustomizer/"/>
    <url>/2022/08/10/WordPress%E4%B8%BB%E9%A2%98%E6%9E%84%E5%BB%BA%EF%BC%9ACustomizer/</url>
    
    <content type="html"><![CDATA[<h2 id="customizer-对象"><a class="markdownIt-Anchor" href="#customizer-对象"></a> Customizer 对象</h2><p>WordPress 主题自定义界面主要包含四种 Customizer 对象：</p><ul><li>Settings（设置项）</li><li>Controls（控制器）</li><li>Sections（栏目）</li><li>Panels（面板）</li></ul><p>它们都由 <a href="https://developer.wordpress.org/reference/classes/wp_customize_manager/">WP_Customize_Manager</a> 进行管理。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//202208100247861.png" alt="Graphic showing the relationship between each type of customize object" /></p><p>使用 <a href="https://developer.wordpress.org/reference/hooks/customize_register/">customize_register</a> 钩子来控制任意 Customizer 对象：</p><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">my_customize_register</span>(<span class="hljs-params"> <span class="hljs-variable">$wp_customize</span> </span>) </span>&#123;<br>  <span class="hljs-comment">// Do stuff with $wp_customize, the WP_Customize_Manager object.</span><br>  <span class="hljs-variable">$wp_customize</span>-&gt;add_panel();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;get_panel();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;remove_panel();<br> <br>  <span class="hljs-variable">$wp_customize</span>-&gt;add_section();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;get_section();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;remove_section();<br> <br>  <span class="hljs-variable">$wp_customize</span>-&gt;add_setting();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;get_setting();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;remove_setting();<br> <br>  <span class="hljs-variable">$wp_customize</span>-&gt;add_control();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;get_control();<br>  <span class="hljs-variable">$wp_customize</span>-&gt;remove_control();<br>&#125;<br>add_action(<span class="hljs-string">&#x27;customize_register&#x27;</span>,<span class="hljs-string">&#x27;my_customize_register&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-settings"><a class="markdownIt-Anchor" href="#1-settings"></a> 1、Settings</h3><p>Settings 用来定义设置项的值（或者说是定义变量）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$wp_customize</span>-&gt;add_setting( <span class="hljs-string">&#x27;setting_id&#x27;</span>, <span class="hljs-keyword">array</span>(<br>  <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-string">&#x27;theme_mod&#x27;</span>, <span class="hljs-comment">// or &#x27;option&#x27;</span><br>  <span class="hljs-string">&#x27;capability&#x27;</span> =&gt; <span class="hljs-string">&#x27;edit_theme_options&#x27;</span>,<br>  <span class="hljs-string">&#x27;theme_supports&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// Rarely needed.</span><br>  <span class="hljs-string">&#x27;default&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">&#x27;transport&#x27;</span> =&gt; <span class="hljs-string">&#x27;refresh&#x27;</span>, <span class="hljs-comment">// or postMessage</span><br>  <span class="hljs-string">&#x27;sanitize_callback&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">&#x27;sanitize_js_callback&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// Basically to_json.</span><br>) );<br></code></pre></td></tr></table></figure><p>关于 type：</p><ul><li>theme_mod：保存对应主题的内容，可以理解为局部变量；</li><li>option：直接保存在 wp_options 数据表中，即全局变量。</li></ul><p>需要使用定义的值时，可以调用 get_theme_mod() 或者 get_option()，参数1为 setting 的 ID，参数2为默认值。</p><h3 id="2-controls"><a class="markdownIt-Anchor" href="#2-controls"></a> 2、Controls</h3><p>Controls 用来创建关联 Settings 的 UI</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$wp_customize</span>-&gt;add_control( <span class="hljs-string">&#x27;setting_id&#x27;</span>, <span class="hljs-keyword">array</span>(<br>  <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-string">&#x27;date&#x27;</span>,<br>  <span class="hljs-string">&#x27;priority&#x27;</span> =&gt; <span class="hljs-number">10</span>, <span class="hljs-comment">// Within the section.</span><br>  <span class="hljs-string">&#x27;section&#x27;</span> =&gt; <span class="hljs-string">&#x27;colors&#x27;</span>, <span class="hljs-comment">// Required, core or custom.</span><br>  <span class="hljs-string">&#x27;label&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;Date&#x27;</span> ),<br>  <span class="hljs-string">&#x27;description&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;This is a date control with a red border.&#x27;</span> ),<br>  <span class="hljs-string">&#x27;input_attrs&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;class&#x27;</span> =&gt; <span class="hljs-string">&#x27;my-custom-class-for-js&#x27;</span>,<br>    <span class="hljs-string">&#x27;style&#x27;</span> =&gt; <span class="hljs-string">&#x27;border: 1px solid #900&#x27;</span>,<br>    <span class="hljs-string">&#x27;placeholder&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;mm/dd/yyyy&#x27;</span> ),<br>  ),<br>  <span class="hljs-string">&#x27;active_callback&#x27;</span> =&gt; <span class="hljs-string">&#x27;is_front_page&#x27;</span>,<br>) );<br></code></pre></td></tr></table></figure><p>此处的 type 相当于 <input> 元素的 type，目前 WP 默认提供的有：</p><ul><li>text/hidden/number/range……</li><li>checkbox</li><li>textarea</li><li>radio</li><li>select</li><li>dropdown-pages</li></ul><p>section 参数必须指定对应的 Section ID，否则该 control 不会在自定义界面中展示。</p><p>input_attrs 参数通过键值对数组，映射到元素上相应的属性。</p><h3 id="3-sections"><a class="markdownIt-Anchor" href="#3-sections"></a> 3、Sections</h3><p>Sections 是 Controls 的 UI 容器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$wp_customize</span>-&gt;add_section( <span class="hljs-string">&#x27;custom_css&#x27;</span>, <span class="hljs-keyword">array</span>(<br>  <span class="hljs-string">&#x27;title&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;Custom CSS&#x27;</span> ),<br>  <span class="hljs-string">&#x27;description&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;Add custom CSS here&#x27;</span> ),<br>  <span class="hljs-string">&#x27;panel&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// Not typically needed.</span><br>  <span class="hljs-string">&#x27;priority&#x27;</span> =&gt; <span class="hljs-number">160</span>,<br>  <span class="hljs-string">&#x27;capability&#x27;</span> =&gt; <span class="hljs-string">&#x27;edit_theme_options&#x27;</span>,<br>  <span class="hljs-string">&#x27;theme_supports&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// Rarely needed.</span><br>) );<br></code></pre></td></tr></table></figure><p>一般定义 section 只需要定义名称和优先级即可，默认的优先级为：</p><table><thead><tr><th>Title</th><th>ID</th><th>Priority (Order)</th></tr></thead><tbody><tr><td>Site Title &amp; Tagline</td><td>title_tagline</td><td>20</td></tr><tr><td>Colors</td><td>colors</td><td>40</td></tr><tr><td>Header Image</td><td>header_image</td><td>60</td></tr><tr><td>Background Image</td><td>background_image</td><td>80</td></tr><tr><td>Menus (Panel)</td><td>nav_menus</td><td>100</td></tr><tr><td>Widgets (Panel)</td><td>widgets</td><td>110</td></tr><tr><td>Static Front Page</td><td>static_front_page</td><td>120</td></tr><tr><td><em>default</em></td><td></td><td>160</td></tr><tr><td>Additional CSS</td><td>custom_css</td><td>200</td></tr></tbody></table><h3 id="4-panels"><a class="markdownIt-Anchor" href="#4-panels"></a> 4、Panels</h3><p>Panels 更多是作为某个完整功能的上下文，例如小部件或者菜单，并不是 Sections 的包装器（第一印象）。</p><p>Panels 的定义方式和 Sections 如出一辙：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$wp_customize</span>-&gt;add_panel( <span class="hljs-string">&#x27;menus&#x27;</span>, <span class="hljs-keyword">array</span>(<br>  <span class="hljs-string">&#x27;title&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;Menus&#x27;</span> ),<br>  <span class="hljs-string">&#x27;description&#x27;</span> =&gt; <span class="hljs-variable">$description</span>, <span class="hljs-comment">// Include html tags such as &lt;p&gt;.</span><br>  <span class="hljs-string">&#x27;priority&#x27;</span> =&gt; <span class="hljs-number">160</span>, <span class="hljs-comment">// Mixed with top-level-section hierarchy.</span><br>) );<br></code></pre></td></tr></table></figure><h3 id="5-自定义-customizer-对象"><a class="markdownIt-Anchor" href="#5-自定义-customizer-对象"></a> 5、自定义 Customizer 对象</h3><p>自定义只需要通过继承 <code>WP_Customize_XXX</code>的子类即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WP_New_Menu_Customize_Control</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WP_Customize_Control</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$type</span> = <span class="hljs-string">&#x27;new_menu&#x27;</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Render the control&#x27;s content.</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render_content</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-meta">?&gt;</span><br>    &lt;button class=&quot;button button-primary&quot; id=&quot;create-new-menu-submit&quot; tabindex=&quot;0&quot;&gt;&lt;?php _e( &#x27;Create Menu&#x27; ); ?&gt;&lt;/button&gt;<br>  <span class="hljs-meta">&lt;?php</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于 Controls 来说，可以直接通过通过 <a href="https://developer.wordpress.org/reference/classes/wp_customize_control/">WP_Customize_Control</a> 的子类来实现自定义的 Controls：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$wp_customize</span>-&gt;add_control( <span class="hljs-keyword">new</span> WP_Customize_Color_Control( <span class="hljs-variable">$wp_customize</span>, <span class="hljs-string">&#x27;color_control&#x27;</span>, <span class="hljs-keyword">array</span>(<br>  <span class="hljs-string">&#x27;label&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;Accent Color&#x27;</span>, <span class="hljs-string">&#x27;theme_textdomain&#x27;</span> ),<br>  <span class="hljs-string">&#x27;section&#x27;</span> =&gt; <span class="hljs-string">&#x27;media&#x27;</span>,<br>) ) );<br><br><span class="hljs-variable">$wp_customize</span>-&gt;add_control( <span class="hljs-keyword">new</span> WP_Customize_Media_Control( <span class="hljs-variable">$wp_customize</span>, <span class="hljs-string">&#x27;image_control&#x27;</span>, <span class="hljs-keyword">array</span>(<br>  <span class="hljs-string">&#x27;label&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;Featured Home Page Image&#x27;</span>, <span class="hljs-string">&#x27;theme_textdomain&#x27;</span> ),<br>  <span class="hljs-string">&#x27;section&#x27;</span> =&gt; <span class="hljs-string">&#x27;media&#x27;</span>,<br>  <span class="hljs-string">&#x27;mime_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;image&#x27;</span>,<br>) ) );<br></code></pre></td></tr></table></figure><p>对于 Settings，可以通过定义新的 type 类型实现自定义的数据操作，对于自定义的 setting，需要绑定两个行为：</p><ul><li>customize_update_TYPE：自定义保存功能；</li><li>customize_preview_TYPE：自定义预览功能。</li></ul><h2 id="customizer-javascript-api"><a class="markdownIt-Anchor" href="#customizer-javascript-api"></a> Customizer JavaScript API</h2><p>Customizer 应用分为两个区域，即自定义区域和预览区域，二者可以通过 postMessage 进行信息交流。使用 JS API 除了处理预览区域的数据更新，还可以动态控制自定义区域的元素。</p><h3 id="1-controlssectionspanels-in-js"><a class="markdownIt-Anchor" href="#1-controlssectionspanels-in-js"></a> 1、Controls/Sections/Panels in JS</h3><p>每一个 Customizer 的 PHP 对象都有一个与之对应的 JS 对象：</p><ul><li>wp.customize.Control/wp.customize.control（集合）</li><li>wp.customize.Section/wp.customize.section（集合）</li><li>wp.customize.Panel/wp.customize.panel（集合）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">wp.customize.panel.each( <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"> panel </span>) </span>&#123; <span class="hljs-comment">/* ... */</span> &#125; );<br>wp.customize.section.each( <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"> section </span>) </span>&#123; <span class="hljs-comment">/* ... */</span> &#125; );<br>wp.customize.control.each( <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"> control </span>) </span>&#123; <span class="hljs-comment">/* ... */</span> &#125; );<br></code></pre></td></tr></table></figure><h3 id="2-关联-controlssectionspanels"><a class="markdownIt-Anchor" href="#2-关联-controlssectionspanels"></a> 2、关联 Controls/Sections/Panels</h3><p>当在 PHP 中定义一个 control：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$wp_customize</span>-&gt;add_control( <span class="hljs-string">&#x27;blogname&#x27;</span>, <span class="hljs-keyword">array</span>(  <br>    <span class="hljs-string">&#x27;label&#x27;</span> =&gt; __( <span class="hljs-string">&#x27;Site Title&#x27;</span> ),  <br>    <span class="hljs-string">&#x27;section&#x27;</span> =&gt; <span class="hljs-string">&#x27;title_tagline&#x27;</span>,) <br>);<br></code></pre></td></tr></table></figure><p>可以在 JS 中获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> controlObj = wp.customize.control(<span class="hljs-string">&#x27;blogname&#x27;</span>);<br><br><span class="hljs-keyword">const</span> sectionId = controlObj.section();<br><span class="hljs-keyword">const</span> sectionObj = wp.customize.section(sectionId);<br><br><span class="hljs-keyword">const</span> panelId = sectionObj.panel();<br><span class="hljs-keyword">const</span> panelObj = wp.customize.panel(panelId);<br></code></pre></td></tr></table></figure><p>可以通过 <code>priority</code> 方法获取或者修改对象的优先级：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">priority = wp.customize.panel( <span class="hljs-string">&#x27;widgets&#x27;</span> ).priority(); <span class="hljs-comment">// returns 110 by default</span><br>wp.customize.panel( <span class="hljs-string">&#x27;widgets&#x27;</span> ).priority( <span class="hljs-number">1</span> ); <span class="hljs-comment">// move Widgets to the top</span><br></code></pre></td></tr></table></figure><p>可以通过 <code>section</code> 和 <code>panel</code> 方法移动对象的位置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">wp.customize.control(<span class="hljs-string">&#x27;blogname&#x27;</span>).section(<span class="hljs-string">&#x27;new_section&#x27;</span>) ;<br></code></pre></td></tr></table></figure><p>可以通过 <code>activate</code> 和 <code>deactivate</code> 方法显示/隐藏对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">wp.customize.section( <span class="hljs-string">&#x27;nav&#x27;</span> ).deactivate(); <span class="hljs-comment">// slide up</span><br>wp.customize.section( <span class="hljs-string">&#x27;nav&#x27;</span> ).activate(&#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span> &#125;); <span class="hljs-comment">// slide down slowly</span><br>wp.customize.section( <span class="hljs-string">&#x27;colors&#x27;</span> ).deactivate(&#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">0</span> &#125;); <span class="hljs-comment">// hide immediately</span><br>wp.customize.section( <span class="hljs-string">&#x27;nav&#x27;</span> ).deactivate(&#123; <br>  completeCallback: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <br>wp.customize.section( <span class="hljs-string">&#x27;colors&#x27;</span> ).activate(); <span class="hljs-comment">// show after nav hides completely</span><br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="使用-js-渲染的自定义-controls"><a class="markdownIt-Anchor" href="#使用-js-渲染的自定义-controls"></a> 使用 JS 渲染的自定义 Controls</h2><p>使用 JS 模板渲染的自定义 Control 的步骤：</p><ol><li>将子类的 <code>render_content()</code> 方法手动置空；</li><li>创建一个 <code>content_template()</code> 方法替代 <code>render_content()</code> 原本的内容；</li><li>使用 <code>to_json()</code> 方法导出自定义变量到 JS；</li><li>将 <code>render_content()</code> 的内容转换为 JS 模板的形式；</li><li>注册自定义的 Control 类。</li></ol><h3 id="1-注册自定义的-control-类型"><a class="markdownIt-Anchor" href="#1-注册自定义的-control-类型"></a> 1、注册自定义的 Control 类型：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">add_action( <span class="hljs-string">&#x27;customize_register&#x27;</span>, <span class="hljs-string">&#x27;prefix_customize_register&#x27;</span> );<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prefix_customize_register</span>(<span class="hljs-params"> <span class="hljs-variable">$wp_customize</span> </span>) </span>&#123;<br>  <span class="hljs-comment">// Define a custom control class, WP_Customize_Custom_Control.</span><br>  <span class="hljs-comment">// Register the class so that its JS template is available in the Customizer.</span><br>  <span class="hljs-variable">$wp_customize</span>-&gt;register_control_type( <span class="hljs-string">&#x27;WP_Customize_Custom_Control&#x27;</span> );<br>&#125;<br><br><span class="hljs-comment">// 使用以下方法打印模板</span><br>WP_Customize_Manager::print_control_templates()<br></code></pre></td></tr></table></figure><h3 id="2-导出变量到-javascript"><a class="markdownIt-Anchor" href="#2-导出变量到-javascript"></a> 2、导出变量到 JavaScript</h3><p><code>WP_Customize_Control</code> 默认导出以下类变量：</p><ul><li><code>type</code></li><li><code>label</code></li><li><code>description</code></li><li><code>active</code></li></ul><p>可以通过在自定义的子类 Control 中重写 <code>to_json()</code> 方法来添加额外的变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">to_json</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">parent</span>::to_json();<br>  <span class="hljs-keyword">$this</span>-&gt;json[<span class="hljs-string">&#x27;statuses&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;statuses;<br>  <span class="hljs-keyword">$this</span>-&gt;json[<span class="hljs-string">&#x27;defaultValue&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;setting-&gt;default;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-构建模板"><a class="markdownIt-Anchor" href="#3-构建模板"></a> 3、构建模板</h3><p>做好准备后，便可以通过重写 <code>content_template()</code> 方法替代 <code>render_content</code> 的形式构建 Control 的 UI 模板。注意需要手动置空 <code>render_content()</code> 方法，因为需要用来覆盖默认的模板。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WP_Customize_Color_Control</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WP_Customize_Control</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$type</span> = <span class="hljs-string">&#x27;color&#x27;</span>;<br><span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Render a JS template for the content of the color picker control.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">content_template</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-meta">?&gt;</span><br>    &lt;<span class="hljs-comment"># var defaultValue = &#x27;&#x27;;</span><br>    <span class="hljs-keyword">if</span> ( data.defaultValue ) &#123;<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-string">&#x27;#&#x27;</span> !== data.defaultValue.substring( <span class="hljs-number">0</span>, <span class="hljs-number">1</span> ) ) &#123;<br>        defaultValue = <span class="hljs-string">&#x27;#&#x27;</span> + data.defaultValue;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        defaultValue = data.defaultValue;<br>      &#125;<br>      defaultValue = <span class="hljs-string">&#x27; data-default-color=&#x27;</span> + defaultValue; <span class="hljs-comment">// Quotes added automatically.</span><br>    &#125; <span class="hljs-comment">#&gt;</span><br>    &lt;label&gt;<br>      &lt;<span class="hljs-comment"># if ( data.label ) &#123; #&gt;</span><br>        &lt;span class=&quot;customize-control-title&quot;&gt;&#123;&#123;&#123; data.label &#125;&#125;&#125;&lt;/span&gt;<br>      &lt;<span class="hljs-comment"># &#125; #&gt;</span><br>      &lt;<span class="hljs-comment"># if ( data.description ) &#123; #&gt;</span><br>        &lt;span class=&quot;description customize-control-description&quot;&gt;&#123;&#123;&#123; data.description &#125;&#125;&#125;&lt;/span&gt;<br>      &lt;<span class="hljs-comment"># &#125; #&gt;</span><br>      &lt;div class=&quot;customize-control-content&quot;&gt;<br>        &lt;input class=&quot;color-picker-hex&quot; type=&quot;text&quot; maxlength=&quot;7&quot; placeholder=&quot;&lt;?php esc_attr_e( &#x27;Hex Value&#x27; ); ?&gt;&quot; &#123;&#123; defaultValue &#125;&#125; /&gt;<br>      &lt;/div&gt;<br>    &lt;/label&gt;<br>    <span class="hljs-meta">&lt;?php</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>WordPress</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WordPress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuejs前端UT实践</title>
    <link href="/2022/07/06/Vuejs%E5%89%8D%E7%AB%AFUT%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/07/06/Vuejs%E5%89%8D%E7%AB%AFUT%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="方案选型"><a class="markdownIt-Anchor" href="#方案选型"></a> 方案选型</h1><p>参考 Vue Test Utils 的官方文档<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Vue Test Utils">[1]</span></a></sup>和Vue测试指南<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Vue 测试指南">[2]</span></a></sup>的内容，目前 Vue2.x 单元测试方案主要有以下3种：</p><ul><li>方案1：Jest（省心全家桶）</li><li>方案2：Mocha + 【mochapack &amp; jsdom】 + 【chai &amp; sinon &amp; istanbul】</li><li>方案3：Mocha + 【Karma】 + 【chai &amp; sinon &amp; istanbul】</li></ul><p>先简单介绍一下：Mocha 是常用的测试框架，提供 <code>describe</code> 和 <code>it</code> 函数；Karma 是测试运行器，相当于一个离线浏览器，相比于 jsdom 来说，由于是真实的浏览器环境因此测试结果更可靠；chai 是断言库，主要使用它的 <code>expect</code> 函数；sinon 提供函数的 fake/spy/stub/mock 功能，用来模拟单测用到的函数；最后的 istanbul 主要用来计算测试覆盖率并生成报告。我用括号把它们简单分了个组，方便理解。</p><p>第一种方案的 Jest（来自 React 家） ，自带断言库、运行器以及覆盖率计算功能，实现了开箱即用的良好体验，是当前最流行的方案。</p><p>第二种方案最大的优点是利用 mochapack 将 webpack 编译后的代码整合到框架和运行器中，从而可以完全支持所有 webpack 和 vue-loader 的功能，相比 Jest 更加灵活但是部署和配置的成本较高，而且实际使用起来，也很少会用到基础功能以外的东西。</p><p>第三种方案和第二种方案基本一致，主要的区别在于运行器 Karma 使用的是真实的浏览器环境（chrome）而非 jsdom 模拟的浏览器环境，因此会更贴近真实场景，ElementUI 即是采用的这个方案。</p><p>经过对三种方案的部署和测试，最终不得不服软，相比于灵活的组装，省心全家桶还是太香了。话虽如此，其实主要原因还是方案二&amp;三或多或少都会遇到一些问题，解决起来不是那么方便。</p><h1 id="框架部署"><a class="markdownIt-Anchor" href="#框架部署"></a> 框架部署</h1><p>首先大致介绍一下各个方案的部署方法。</p><h2 id="方案1jest"><a class="markdownIt-Anchor" href="#方案1jest"></a> 方案1：Jest</h2><p>首先安装所有需要用到的模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 核心</span><br>npm i -D jest @vue/test-utils<br><br><span class="hljs-meta">#</span><span class="bash"> 处理 vue 单文件组件</span><br>npm i -D @vue/vue2-jest<br><br><span class="hljs-meta">#</span><span class="bash"> 提供 babel 支持</span><br>npm i -D babel-jest babel-core@^7.0.0-bridge.0<br><br><span class="hljs-meta">#</span><span class="bash"> 支持 CSS Modules，避免 Babel 解析出错</span><br>npm i -D identity-obj-proxy<br></code></pre></td></tr></table></figure><p>在项目目录下新建 <code>jest.config.js</code>（或者也可以直接写到 package.json 的 <code>jest</code> 块里面），配置的主要内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 指定测试环境，默认是 node，测试 webapp 时需要改为 jsdom</span><br>  testEnvironment: <span class="hljs-string">&#x27;jsdom&#x27;</span>,<br>  <span class="hljs-comment">// 需要处理的文件类型</span><br>  moduleFileExtensions: [<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;vue&#x27;</span>],<br>  <span class="hljs-comment">// 提供代码转译支持</span><br>  transform: &#123;<br>    <span class="hljs-string">&#x27;.*\\.(vue)$&#x27;</span>: <span class="hljs-string">&#x27;@vue/vue2-jest&#x27;</span>,<br>    <span class="hljs-string">&#x27;.*\\.(js)$&#x27;</span>: <span class="hljs-string">&#x27;babel-jest&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// webpack别名支持</span><br>  moduleNameMapper: &#123;<br>    <span class="hljs-string">&#x27;\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$&#x27;</span>:<br>      <span class="hljs-string">&#x27;&lt;rootDir&gt;/test/mocks/fileMock.js&#x27;</span>,<br>    <span class="hljs-string">&#x27;\\.(css|less)$&#x27;</span>: <span class="hljs-string">&#x27;identity-obj-proxy&#x27;</span>,<br>    <span class="hljs-string">&#x27;^@/(.*)$&#x27;</span>: <span class="hljs-string">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 覆盖率检测</span><br>  collectCoverage: <span class="hljs-literal">false</span>,<br>  collectCoverageFrom: [<br>    <span class="hljs-string">&#x27;**/*.&#123;js,vue&#125;&#x27;</span>, <br>    <span class="hljs-string">&#x27;!**/node_modules/**&#x27;</span><br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="方案2mocha-mochapack-jsdom"><a class="markdownIt-Anchor" href="#方案2mocha-mochapack-jsdom"></a> 方案2：Mocha &amp; mochapack &amp; jsdom</h2><p>首先安装所有需要用到的模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D @vue/test-utils mocha mochapack<br><br><span class="hljs-meta">#</span><span class="bash"> 模拟浏览器环境</span><br>npm i -D jsdom jsdom-global<br><br><span class="hljs-meta">#</span><span class="bash"> 断言库、函数存根、覆盖率</span><br>npm i -D chai sinon nyc istanbul-instrumenter-loader<br></code></pre></td></tr></table></figure><p>然后在 package.json 中定义命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br>&#123;<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;mochapack --webpack-config webpack.config.js --require test/setup.js test/**/*.spec.js&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>test/setup.js</code> 中写入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsdom-global&#x27;</span>)()<br><br><span class="hljs-comment">// 方便全局使用 expect</span><br><span class="hljs-built_in">global</span>.expect = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chai&#x27;</span>).expect;<br></code></pre></td></tr></table></figure><h2 id="方案3mocha-karma"><a class="markdownIt-Anchor" href="#方案3mocha-karma"></a> 方案3：Mocha &amp; Karma</h2><p>首先安装所有需要用到的模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 核心</span><br>npm i -D @vue/test-utils karma karma-chrome-launcher karma-mocha mocha karma-webpack karma-sourcemap-loader<br><br><span class="hljs-meta">#</span><span class="bash"> 接着是增加对断言库和函数存根的支持：</span><br>npm i -D karma-sinon-chai sinon chai sinon-chai<br><br><span class="hljs-meta">#</span><span class="bash"> 最后是增加对计算覆盖率的支持:</span><br>npm i -D babel-plugin-istanbul karma-coverage karma-spec-reporter<br></code></pre></td></tr></table></figure><p>在项目目录下新建 <code>karma.config.js</code>，主要内容如下所示：</p><blockquote><p>注意：配置中 <code>frameworks</code> 部分使用了 <code>sinon-chai</code>，这个框架使用的是 <code>karma-sinon-chai</code> 的包，由于新版本的 nodejs 限制了 <code>require.resolve</code> 函数使用的场景，会导致测试运行时报错，具体原因可见 <a href="https://github.com/nodejs/node/issues/33460%E3%80%82">https://github.com/nodejs/node/issues/33460。</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> webpackConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack/webpack.config.dev&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) </span>&#123;<br>  config.set(&#123;<br>    <span class="hljs-comment">// 解析 files 和 exclude 时使用的根路径</span><br>    basePath: <span class="hljs-string">&#x27;&#x27;</span>,<br><br>    <span class="hljs-comment">// 运行测试使用的浏览器</span><br>    <span class="hljs-comment">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br>    browsers: [<span class="hljs-string">&#x27;Chrome&#x27;</span>],<br><br>    <span class="hljs-comment">// 运行测试使用的框架</span><br>    <span class="hljs-comment">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br>    frameworks: [<span class="hljs-string">&#x27;mocha&#x27;</span>, <span class="hljs-string">&#x27;sinon-chai&#x27;</span>],<br><br>    <span class="hljs-comment">// 测试加载的文件</span><br>    files: [<br>      <span class="hljs-string">&#x27;test/**/*.spec.js&#x27;</span><br>    ],<br><br>    <span class="hljs-comment">// 需要排除的文件</span><br>    exclude: [],<br><br>    <span class="hljs-comment">// 预处理器，按顺序执行</span><br>    <span class="hljs-comment">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br>    preprocessors: &#123;<br>      <span class="hljs-string">&#x27;**/*.spec.js&#x27;</span>: [<span class="hljs-string">&#x27;webpack&#x27;</span>, <span class="hljs-string">&#x27;sourcemap&#x27;</span>],<br>    &#125;,<br><br>    <span class="hljs-comment">// 测试报告</span><br>    <span class="hljs-comment">// possible values: &#x27;dots&#x27;, &#x27;progress&#x27;</span><br>    <span class="hljs-comment">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br>    reporters: [<span class="hljs-string">&#x27;spec&#x27;</span>, <span class="hljs-string">&#x27;coverage&#x27;</span>],<br>    <span class="hljs-comment">// 覆盖率报告配置</span><br>    coverageReporter: &#123;<br>      dir: <span class="hljs-string">&#x27;./coverage&#x27;</span>,<br>      reporters: [<br>        &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;lcov&#x27;</span>, <span class="hljs-attr">subdir</span>: <span class="hljs-string">&#x27;.&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;text-summary&#x27;</span> &#125;<br>      ],<br>    &#125;<br><br>    <span class="hljs-comment">// 加载 webpack 配置</span><br>    webpack: webpackConfig,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>代码中未提到的配置可到 <a href="https://karma-runner.github.io/6.3/config/configuration-file.html">Karma 官方文档</a> 查看。</p><h1 id="用例编写"><a class="markdownIt-Anchor" href="#用例编写"></a> 用例编写</h1><p>开始编写用例前我们需要认真思考一个问题：哪些代码需要测试？</p><p>现在的前端的代码主要还是以页面脚本为主，独立的纯逻辑代码比较少。同时由于前端是直接对接用户的，需求变更会比较频繁，如果对每个页面的每个点都进行测试，那先不说需要多少时间去开发用例，很可能刚完成用例的编写就突然遇上需求变更，之前写的用例就全部作废了，这样一来导致开发效率和写用例的积极性都会受到沉重打击。</p><p>然而也大可不必因噎废食，前端的单元测试还是需要辩证地去看待，正是由于前端页面的代码经常变动的缘故，如果引入合适的测试代码，那么缺陷代码将会有更大可能被提前发现，其潜在收益未来可期。</p><p>至此，考虑到现在的前端开发基本都是通过组件来完成的，组件可以划分成功能独立且稳定的公共组件和频繁变动的业务组件，业务组件往往都是通过组合公共组件来完成需求的开发，因此我们完全可以只给公共组件编写用例，然后考虑到使用频率，可能同时需要给几个入口页面最好加上测试。</p><p>由于前端多页面代码的特点，代码覆盖率显得没那么重要，同时也要避免面向测试写用例的问题。从 BDD 的角度看，我只需要保证当前参与测试的元素和元素的交互没有问题就好。</p><p>那么测试内容应该包括：</p><ul><li>页面上的关键元素的存在性；</li><li>页面上的关键动作的可交互性；</li><li>关键事件和方法。</li></ul><p>在开始编写测试用例前，先理解两个概念，这两个概念贯穿了用例编写的始终：</p><ul><li>mock：模拟真实功能中的具体步骤，关注点是行为；</li><li>stub：模拟真实功能返回的最终结果，关注点是状态；</li></ul><p>建议在测试目录下新建一个 <code>index.js</code> 入口文件，用于定义全局的 mocks 和 stubs：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; config &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/test-utils&#x27;</span>;<br><br><span class="hljs-comment">// mock vue-i18n 的 $t 方法</span><br>config.mocks[<span class="hljs-string">&#x27;$t&#x27;</span>] = <span class="hljs-function">(<span class="hljs-params">msg</span>) =&gt;</span> msg;<br><br><span class="hljs-comment">// 对 transition 和 transition-group 两个组件进行存根，避免动画对测试造成影响</span><br>config.stubs[<span class="hljs-string">&#x27;transition&#x27;</span>] = <span class="hljs-literal">true</span>;<br>config.stubs[<span class="hljs-string">&#x27;transition-group&#x27;</span>] = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>然后 <code>jest.config.js</code> 中加上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>setupFiles: [<span class="hljs-string">&#x27;&lt;rootDir&gt;/test/index.js&#x27;</span>],<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>我们的用例基本结构如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mount, createLocalVue &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/test-utils&#x27;</span>;<br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><br><span class="hljs-keyword">import</span> xxx <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;xxx&#x27;</span>;<br><br><span class="hljs-comment">// 创建本地 Vue 实例用于测试</span><br><span class="hljs-keyword">const</span> localVue = createLocalVue();<br>localVue.use(Vuex);<br>localVue.use(ElementUI);<br><br><span class="hljs-comment">// 由于是给组件写用例，大部分场景需要使用 mount 而非 shallowMount</span><br><span class="hljs-keyword">const</span> wrapper = mount(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br><br><span class="hljs-comment">// 关键元素存在性校验</span><br>describe(<span class="hljs-string">&#x27;Element existence check&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br><span class="hljs-comment">// 关键交互动作校验</span><br>describe(<span class="hljs-string">&#x27;Interactive action check&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br><span class="hljs-comment">// 关键事件和方法校验</span><br>describe(<span class="hljs-string">&#x27;Crucial event and method check&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://vue-test-utils.vuejs.org/zh/">Vue Test Utils</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://lmiller1990.github.io/vue-testing-handbook/zh-CN/">Vue 测试指南</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人体系统调优不完全指南</title>
    <link href="/2022/05/29/%E4%BA%BA%E4%BD%93%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2022/05/29/%E4%BA%BA%E4%BD%93%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p>去年 5 月曾经写了一篇文章介绍了下 <a href="https://zhuanlan.zhihu.com/p/371254789">Lex Fridman 大佬的日常生活安排</a>，后续我也根据他的方法对自己的日常生活做了一系列规范和改进。这一年整体实行下来，效果还是非常显著的，本文的最后会对我的一些实践以及借助的工具做一些分享。</p><p>最近几个月，偶然在油管上看到了个 <a href="https://youtu.be/2ekdc6jCu2E">Rich Roll 采访 Andrew Huberman 的 podcast</a>，介绍了如何提升我们日常工作，学习表现的相关神经科学原理与可以利用的“工具”，瞬间打开了一扇新世界的大门。后续又一连追了好几集 Huberman 自己的 podcast，从各个方面了解了一下跟我们日常生活，健康，学习，工作，锻炼等方面相关的知识。与其它很多讲“养生”的文章和视频最大的区别在于，Huberman 本身是斯坦福的神经科学教授，其中讲述的内容都是<strong>来自于高质量，peer reviewed 的科学研究成果</strong>，从机体工作原理出发，非常细致地介绍了相关的实验和结论，并给出了很多实操建议（很多都是零成本，不是搞推销的……）。</p><p>通过一系列的学习，逐渐有种学习了各种人类的“组成和操作原理”的感觉。通过一系列的工具和实践，我们也可以<strong>像调优软件程序那样来“调优”我们自身的人体系统</strong>。这篇文章就来介绍一些相关的知识内容。注意，原版的 podcast 中有非常多专业性的阐述，在这篇文章中基本都去掉了，尽量以故事性的描述来讲解，相对会比较好理解。当然准确性也会因此有所下降，如果希望获取更专业的内容，强烈建议观看 <a href="https://hubermanlab.com/">原版的 podcast 内容</a>。</p><h1 id="睡眠"><a class="markdownIt-Anchor" href="#睡眠"></a> 睡眠</h1><p>如果你想要获得健康，更好的工作学习状态，提升生理健康如免疫，新陈代谢，以及心理健康如更好的心情，专注能力等，最最重要的前提是拥有一个良好的睡眠。</p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p>睡眠最重要的控制机理是我们内在的生物钟。随着生物钟的影响，我们体内的各类化学物质会发生变化，体温也随之改变，会影响我们的各种内在状态和外在行为。Huberman 教授很形象地描述了这个“生物钟”的具体作用方式：在早上，身体释放的皮质醇（cortisol）和肾上腺素（aderenaline）会让我们醒来，同时还会设定松果体释放褪黑素的倒计时钟，会在十多个小时之后让我们感到困意再次入睡。</p><p>影响这个生物钟的最大因素是光照。我们的眼睛除了能够看到东西，另外一个重大的作用就是<strong>通过黑视素神经节细胞来接收光照信息，用以设定我们的内在生物钟</strong>。这也是为什么有时候我们通宵工作之后，虽然已经持续很久时间没有睡眠了，但随着太阳升起，整体的生物钟被设定到了类似起床时的状态，各类化学物质的释放会让我们突然感觉又有精神了。后续很多最佳实践里也都跟这个原理相关，我们需要控制自己接收光照的时间点，类型和时长。</p><p>此外，<strong>体温也是一个用于控制我们生物钟的手段</strong>。一般来说我们的体温会从深睡眠中比较低的状态逐渐升高，到醒来后持续上升。到了一天的后半段会开始逐渐下降，直到再次进入睡眠。</p><h2 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h2><p>基于上面的原理，Huberman 教授提供了一系列提升睡眠的最佳实践：</p><ul><li>皮质醇的释放与接触阳光有关，因此如果想尽快醒来且保持日间良好的精神状态，<strong>起床后应该到外面去接触阳光，持续 2-10 分钟</strong>。这对于血压控制，心理状态，设定睡眠的“倒计时钟”等都有很大好处。户外日光的效果最好，如果是人造光源，蓝光的效果会比较好，且最好是上部（天空的位置）的光源。根据光照强度推算，隔着窗户接收日光的强度会降低 50%以上，而达到同样效果所需要的光照时间则需要 50 到 100 倍。有意思的是，这一点对于视障人士也有效，因为前面提到的黑视素神经节细胞并不是用于视觉成像的细胞。</li><li>对应的，<strong>在晚上要尽量减少光源的接触</strong>，因为这会扰乱我们的生物钟，让身体系统误以为是在白天。尤其是晚上 11 点到次日凌晨 4 点之间接收光源，会抑制后续几天的多巴胺的释放，影响心情，心理健康，专注度，学习能力，新陈代谢等等。关于多巴胺的作用和机理，后面会再单独介绍。</li><li>如果不可避免需要在晚上接触光源，处于较低位置，暗淡的红光，蜡烛之类的会相对好一些。如果要看电脑，建议使用 blue blockers 眼镜，这跟一些电脑软件会自动调节屏幕色温的效果可能类似。</li><li>傍晚观察落日，对于后续入睡也有帮助，甚至能减轻晚上摄入光照的负面影响，有点神奇。</li><li>人一天中的精神状态一般会在中间有个短暂的低谷，所以午睡对于有些人可能是有帮助的。也可以用一些其它的非睡眠深度休息的方式来替代，如 <a href="https://youtu.be/M0u9GST_j3s">Yoga Nidra</a>，冥想，自我催眠（可以利用一些 App）等。</li><li>体温对生物钟周期的影响：<ul><li>早上洗冷水澡，会让人快速升温，从而把睡眠周期往前移（早起）。</li><li>晚上锻炼身体，会让人保持高体温，从而延后周期（晚睡）。</li><li>可以选购一些自动控制体温的智能床垫来提升睡眠质量。</li></ul></li><li>一般建议的锻炼时间：醒来后 30 分钟，3 小时和 11 小时这三个时间点。不过总体来看好像影响度比较小。</li><li>饮食和药物因素：<ul><li>咖啡因会占据腺苷（adenosine）的受体，阻断入睡的信号。有不少文章都提到中午之后尽量不要喝咖啡，但 Huberman 表示没有科学实验表明咖啡因对所有人的效果是一样的，得根据自己的测试情况来。比如他自己在下午 5 点喝咖啡也能正常入睡。</li><li>镁，对入睡有帮助。</li><li>芹黄素也能帮助入睡，但要注意对雌性激素的影响。</li><li>建议不要摄入太多牛磺酸。</li><li>不建议通过摄入褪黑素来帮助入睡，褪黑素药物本身的规格把控不严格，且褪黑素容易引起抑郁情绪。</li><li>中午可以吃低卡路里以及含酪氨酸的食物，如坚果，大豆，部分蔬菜等，提升多巴胺，肾上腺素，保持清醒。</li><li>晚上则可以吃点淀粉，白肉等富含色氨酸的食物，进而转化为血清素，会让人更加平静，容易入睡。</li></ul></li><li>对于绝大多数人，6-8 小时的睡眠时长是比较健康的。</li><li>对于各类药物的检索可以参考：<a href="https://examine.com/">examine.com</a>。</li></ul><h1 id="饮食"><a class="markdownIt-Anchor" href="#饮食"></a> 饮食</h1><p>在前面 Lex 的分享中，提到了他采取了生酮饮食以及 fasting（禁食）的习惯，这引起了我对于饮食习惯的注意。Huberman 教授正好也有几个 podcast 介绍了 fasting，肠道健康等话题，很有意思。</p><h2 id="fasting-的背景"><a class="markdownIt-Anchor" href="#fasting-的背景"></a> Fasting 的背景</h2><p>我们可以把身体跟进食相关的化学状态分成 2 类：</p><ol><li>吃饱了的状态，也就是血糖含量较高的状态。此时我们身体会更活跃地进行体内细胞的复制与成长。</li><li>禁食的状态，也就是血糖含量较低的状态。此时我们的身体会更活跃地进行体内细胞的修复与清理（autophagic）。</li></ol><p>由于睡眠时我们天然是不吃东西的，所以一般来说睡眠中的一部分时间会使我们处于禁食状态，饮食时间的选择实际上就是在控制上述两个状态的持续时间和平衡关系。比较有意思的是世界上很多民族文化和宗教中，都有一些跟禁食相关的习俗，甚至会持续很多天。</p><p>在 2012 年，科学家开始对小白鼠做实验，把他们分成两大组，一组可以在一天中的任何时间吃东西，而另一组只能在固定的 8 小时里吃东西。在大组里再区分小组，给小白鼠吃健康的和不健康的食物。结果发现，只能在 8 小时里吃东西的小白鼠们，即使吃的是不健康的高脂肪食物，他们的健康水平仍然得到了保持甚至提高，相比所有不做限制的组都有明显的提升。</p><p>这个研究震动了学术界，后续又有非常多的针对人类，不同性别，不同年龄，不同职业（包括运动员）的各种实验与论文发表，科学家们发现这种<strong>间歇性禁食状态对于身体有非常多的好处</strong>，包括：促进肝脏健康，胆汁酸代谢，炎症自愈，保持体重，提升 brown fat 储备（对健康有益），防止非酒精性脂肪肝，血糖控制，肠道健康等等。如果养成间歇性禁食的习惯 60 天以上，还会让我们的身体倾向于代谢脂肪来供能，控制体重。</p><p>因此，Huberman 教授指出，<strong>何时进食，与吃什么东西，其实是同等重要的</strong>。这个研究也让很多学术界的研究人员自己也都养成了 fasting 的习惯，包括 Huberman 自己。</p><h2 id="fasting-的实践"><a class="markdownIt-Anchor" href="#fasting-的实践"></a> Fasting 的实践</h2><p>由于长时间的禁食难度较大，所以绝大多数的研究都专注于间歇性禁食，也就是 time restricted feeding。简单来说就是跟前面的小白鼠实验一样，在一天的固定时间段来吃东西（跟睡眠周期对齐），而其它时间段都不摄入任何食物的做法。这里简单整理为基础和高阶两个版本：</p><ul><li>基础：如果想享受 fasting 的基础收益，最简单的执行原则是<strong>起床后至少 1 小时内不要吃东西，同时睡前的 2-3 小时不要吃任何东西</strong>。</li><li>高阶：目前研究结果中<strong>最理想的进食窗口是 8 小时</strong>，结合社会习俗等，一般比较合理的时间在 10-18 点或 12-20 点的范围。看起来<strong>不吃早饭并不是什么坏事</strong> 😃</li><li>作者特地温馨提醒，如果想通过健身来增肌，建议可以把这个时间窗口往前移，因为早上摄入蛋白质会对肌肉增长有益。而健身的时间可以自由选择。</li><li>尽量<strong>保证这个窗口时间的稳定性</strong>，也非常重要。否则就跟频繁倒时差产生的效果差不多，会打不少收益折扣。</li><li>如果想尝试高阶 fasting，建议逐渐切换进食习惯，例如每两天缩短 1 小时的进食窗口，逐渐达到理想的 8 小时。</li></ul><p>值得注意的是，这里说的不吃任何东西，并不是说连水也不能喝。从前面的背景可以看到，是否处于禁食状态，主要依据是血糖水平，因此：</p><ul><li>喝水，茶，咖啡（不加牛奶）等，并不会中断禁食。但一勺糖的摄入就会中断。</li><li>晚饭后想尽快进入禁食状态，可以做一些轻量运动，比如散步等，加快血糖清理。</li><li>二甲双胍，黄连素（berberine）等可以直接促进血糖清理。肉桂皮，柠檬汁，也能轻微降低血糖。</li></ul><p>最后，如果禁食期间觉得有些头晕，颤抖，并不需要立刻进食或摄入糖分。可以喝一点盐水（可以加柠檬汁），一般就能很好的缓解症状。这让我想起 Lex 会提到了会服用药片来补充各种电解质元素，比如钠，镁，钾等。</p><h2 id="饮食与消化道健康"><a class="markdownIt-Anchor" href="#饮食与消化道健康"></a> 饮食与消化道健康</h2><p>由于我个人的肠胃功能比较差，所以也特别关注了一下消化道健康的话题。Huberman 邀请了一位非常知名的微生物学家 Sonnenburg 来介绍肠胃微生物群落与我们的健康之间的关系，也是学到了很多新的知识：</p><ul><li>肠道的微生物群不仅影响消化系统的健康运作，<strong>对人体的免疫系统也起到了非常关键的因素</strong>。</li><li>婴儿出生，成长的方式会形成非常不同的肠道菌群生态。暴露在微生物环境中（但要注意会引起疾病的情况），对于维持菌群环境是有益的，比如家里养宠物，让孩子自由玩耍等，不需要过度清洁与消毒。</li><li>什么是健康的肠道菌群生态，目前没有一个标准的结论。不过总体来看，<strong>菌群的多样性程度高，一般就表示更加健康</strong>。</li><li>抗生素会严重破坏肠道菌群生态，需要谨慎使用。</li></ul><p>在访谈中，两位重点讨论了一个实验，就是什么样的饮食方式会让我们更好的维持肠道菌群的多样性和健康。实验主要对比了两种附加饮食：</p><ul><li>高纤维食物：全谷类，豆类，蔬菜，坚果。这也是传统上被认为非常健康的食物，其中很多纤维的分解都需要肠道菌群的帮助，换句话说，纤维就是它们的“食物”。</li><li>发酵类食物：酸奶，牛奶酒（kefir），康普茶，酸菜，泡菜，纳豆等。注意需要是自然发酵，一般是冷藏且非罐装的食品。而且像酸奶这类要格外注意不要加糖等添加剂。</li></ul><p>实验的结果也颇令人意外：</p><ul><li>摄入发酵类食品的组，显著提升了肠道菌群的多样性。被试者<strong>几十个免疫标志物的显著降低，对各类炎症都有更好的抑制作用</strong>。没想到吧，肠道菌群还能调节炎症。</li><li>肠道菌群本来的多样化程度比较高的人，摄入高纤维食物是有帮助的。如果不是，则摄入高纤维食物的帮助不大。在工业化进程中，人类的进食习惯已经有很多代都转变为了摄入大量肉类，加工食品等，肠道菌群的生态无法仅通过提高纤维食物的量来改变其族群结构。</li></ul><p>此外在访谈中，两位还讨论了具体食谱推荐的问题，引用了 <a href="https://youtu.be/sJLK3sVexIk">Christopher Gardner 关于生酮饮食与地中海饮食比较的研究</a>。这里总结一下实践建议：</p><ul><li><strong>如果要改善肠道菌群生态，最好的方式是一天两次摄入天然发酵类食品</strong>。</li><li>高纤维食物对于肠道菌群生态的维护是有益的，建议日常饮食以植物类食物为主，尽量避免深度加工食品的摄入，控制糖的摄入。Sonnenburg 教授还讲了个故事，说微生物学家参加的会议，一般餐厅的沙拉吧总是会供不应求 😃 前面提到的 Rich Roll 大佬也是个素食者。</li><li><strong>益生菌的效果没有广泛研究支持</strong>，且这类产品的监管很有限。<strong>益生元的效果也是好坏参半</strong>，缺乏多样性，溶解速度太快等问题都使总体效果存疑。</li><li>地中海饮食相比生酮饮食来说对健康的影响效果接近，但更容易坚持遵循。另外生酮饮食如果长期实践可能有一定的风险。所以<strong>总体更推荐地中海饮食结构</strong>。</li></ul><p>另外值得参考的是我们也有官方的 <a href="https://sspai.com/post/72984">中国居民膳食指南</a>，或许更适合东方人的饮食习惯。</p><h1 id="心态与动力"><a class="markdownIt-Anchor" href="#心态与动力"></a> 心态与动力</h1><p>这一部分主要介绍的是人体的多巴胺系统原理，以及如何利用它来形成健康，自律的生活方式。这一集是 Huberman 开播以来播放量最高的一集，对于强健我们的心智有着非常好的指导作用。</p><h2 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h2><p>多巴胺是一种非常重要的化学物质，主要作用于两个神经回路：一个影响身体的运动，例如帕金森病与多巴胺的分泌不足有关；另一个则影响我们的动机，欲望与快乐，这几乎与我们从事的各种活动有关，无论是工作，学习还是社交，休闲娱乐。这里我们会主要讨论多巴胺的后者影响能力。</p><p>神经系统中多巴胺含量水平的高低会影响我们的情绪，当多巴胺水平低时，我们会感到情绪低落，没有动力，而多巴胺水平高时，我们会感到兴奋和快乐。在通常情况下，我们的身体处于多巴胺 baseline 的状态，当我们达成一些令人兴奋的目标（比如玩游戏胜利，考试拿高分）后，多巴胺的水平会达到一个高峰，此时我们就会获得巨大的愉悦感。在高峰之后，多巴胺水平会回落到比 baseline 更低的一个水平，且这个状态会持续一段时间。</p><p>这里有两个非常重要的原理：</p><ul><li><p>多巴胺绝对值含量的高低只是一方面，<strong>更重要的是其“相对变化量”的多少</strong>。比如在刷抖音时看到了一个很有趣的视频，多巴胺水平升高，你会感到快乐，刷到下一个视频时，你感到的快乐程度好像不会那么强烈了，因为多巴胺已经在一个比较高的水平，难以形成更大的变化量。而同样的视频，如果你是几天之后看到，或许你会觉得有意思的多。所以<strong>当你持续做一件喜欢的事情时，你感受到快乐的阈值也会不断提高</strong>。</p></li><li><p>多巴胺的总体“储备”是有限的</p><p>！也就是说无论你是通过学习，工作，娱乐，社交，运动等不同方式来获得快乐，所消耗的“快乐货币”都是同一种：多巴胺。举几个例子来看下这个原理带来的影响：</p><ul><li>很多自律的人都会说自己是 work hard，play hard 的生活方式，比如工作日通过高强度的工作来获得成就和满足感，休息日进行各种休闲娱乐，运动，社交等方式来获得快乐，其实背后都是在释放多巴胺来获取快乐。长期持续，我们身体的多巴胺 baseline 会逐渐下降，出现一种耗尽（burn out）的心理感觉，对很多事物无法保持之前的兴趣与精力。</li><li>很多人会对玩电子游戏着迷，因为它们能带来巨大的多巴胺释放刺激让人感到快乐。但要意识到，多巴胺的储备是有限的，如果对此上瘾，你的多巴胺耗尽问题就会变得非常严重：一方面能够引起你兴趣的事物会变少，可能只有玩游戏才能带来快乐；另一方面，后续甚至会导致玩游戏本身也无法触发多巴胺释放，引起严重的抑郁问题。</li></ul></li></ul><p>另外，<strong>多巴胺也具有叠加效应</strong>。比如你喜欢健身，那么运动就会刺激多巴胺的释放。而我们实际去健身时，可能会不自觉地安排了很多其它的“快乐因素”，比如选一个精神状态比较好的日子，运动前喝一些能量饮料，跟认识的朋友一起去，边健身边 social，听一些自己喜欢的音乐或 podcast，等等。这些因素也都会促进多巴胺的释放，让你感到“前所未有的快乐”。但要注意前面的原理，多巴胺的高峰越高，后面随之而来持续的低谷也会越长，而且长此以往，可能会降低你单纯从运动中获取快乐的能力。这样的例子还有很多，比如边跟朋友吃饭，边玩手机，拍照发朋友圈，可以计算一下叠加了几种快乐因素 😃</p><h2 id="影响多巴胺的外界因素"><a class="markdownIt-Anchor" href="#影响多巴胺的外界因素"></a> 影响多巴胺的外界因素</h2><p>我们来看下具体影响多巴胺释放的各类因素有哪些，首先是促进多巴胺分泌的：</p><ul><li>巧克力，提升到 1.5 倍的多巴胺 baseline</li><li>性行为，提升到 2 倍</li><li>尼古丁，提升到 2.5 倍</li><li>可卡因，提升到 2.5 倍</li><li>安非他命，提升到 10 倍</li><li>咖啡因本身只会少量提升多巴胺，但它会抑制一些多巴胺受体，提升同等多巴胺造成感受的效果</li><li>马黛茶，包含咖啡因，能控制血糖，还能保护多巴胺神经元</li><li>刺蒺藜豆也能提升多巴胺（基本等同于 L-DOPA），还能提升男性精子数量和质量</li><li>运动，带有主观成分，喜欢跑步的人，可以提升到 2 倍 baseline</li><li>健康的社交关系也会促进多巴胺释放</li></ul><p>食物方面感觉 Huberman 教授<strong>非常推荐马黛茶</strong>。</p><p>也有很多提升多巴胺释放或影响其效果的药物：</p><ul><li>L-Tyrosine（酪氨酸），提升多巴胺</li><li>Phenethylamine（PEA），巧克力中也包含，能够提升多巴胺</li><li>Huperzine A，提升多巴胺</li><li>各种“聪明药”，如 Adderall, Modafinil, Alpha-GPC, Ginkgo 等，留学党应该很多都有耳闻</li></ul><p>通常来说，<strong>不推荐持续使用这些药物</strong>，因为多巴胺释放之后的高峰会带来 baseline 水平的降低，导致无法享受活动的快乐，无法专注，限制学习能力和神经元可塑性等。Huberman 表示<strong>一周使用一次的频率应该是安全的</strong>。</p><p>最后还有一个比较特别的研究，就是<strong>冷水浴能够提升多巴胺释放到 baseline 的 2.5 倍左右</strong>，且持续时间更长，能达到 3 小时左右。建议使用 10-14 摄氏度的水温，注意安全。此外冷水浴也不需要太频繁，每周 11 分钟左右足够。如果已经习惯了冷水浴，那么也就没有释放多巴胺的效果了。</p><p>还有一些因素会降低多巴胺，如：</p><ul><li><strong>褪黑素，会引起多巴胺的减少</strong>。前面也提到过并不建议使用褪黑素来帮助入睡，或者适应时差等。</li><li>睡眠时段接触光源，也会引起接下来几天的多巴胺水平下降。<strong>半夜睡不着刷手机是很有害的哦</strong>。</li></ul><h2 id="维持健康的多巴胺水平"><a class="markdownIt-Anchor" href="#维持健康的多巴胺水平"></a> 维持健康的多巴胺水平</h2><p>了解了原理和各种影响因素后，我们来看下如何有效设计我们的生活工作方式来维持健康，可持续的多巴胺水平。</p><p>简单回顾一下，前面我们已经知道了多巴胺储备有限，且对一件事物上瘾会不断提高感受快乐的阈值，那么如何让我们能对一件事情保持长时间的兴趣和投入度，又不至于耗尽多巴胺呢？一个经典的例子是赌场的运作方式，我们并不是每一次下注都能赢，偶尔赢一次会释放多巴胺，而且根据赢得钱的多少有所上下浮动，这会吸引玩家持续参与。这就是一种非常有效的<strong>间歇性且随机的奖励机制</strong>。感觉很多游戏，社交网络产品也借鉴了这个思路来进行设计。</p><p>对于我们经常需要从事的活动，我们也可以模拟这个机制。还记得前面提到的<strong>多巴胺叠加效应</strong>吗？我们可以<strong>通过随机化叠加因素的多少，来实现多巴胺释放的差异性</strong>。还是以健身为例，我们可以随机决定今天是否要听音乐，是否去健身时带手机，是否要在健身前喝能量饮料等因素。如果其它什么都不做，只是单纯健身，那么多巴胺的释放量就会相对较低。如此就能模拟多巴胺释放有高有低的随机奖励机制。</p><h2 id="成长型思维"><a class="markdownIt-Anchor" href="#成长型思维"></a> 成长型思维</h2><p>最后来看下如何构建良好的思维方式来利用多巴胺系统提升自我。</p><p>有一个非常知名的实验，挑选了一群天生喜爱画画的小朋友，在他们完成画作后给与一些奖励。后面在移除这些奖励后，小朋友们对于画画的兴趣和动力大大降低了。这个实验说明，当我们因为一个活动收到奖励（比如金钱，美食等）时，我们<strong>反而会降低活动本身的愉悦程度</strong>。而且多巴胺本身影响我们对时间的认知，同时也影响我们的情绪状态，如果我们<strong>始终以完成活动后的奖励为目标，则整个过程中就很少释放多巴胺，让原本困难的过程变得更加难以坚持</strong>。</p><p>仔细想一下，这是一个非常有意思的观察。多巴胺有点像我们的“本能系统”，决定了我们是否有动力做一件事。但反过来<strong>我们的主观思想却可以影响这个系统起作用的方式</strong>，这也是人类为何能摆脱动物本能，达成很多需要“反人性”的投入才能取得的成就的原因吧。上述的实验是我们的主观思想造成的一个反面作用的例子，我们自然也可以实现正面作用，那就是成长型思维。</p><p>具体来说，就是<strong>通过自我暗示，把努力过程本身当作一种“奖励”</strong>。我在努力学习，这个过程本身就是有趣的，会让我不断变得更强，这样的想法会在过程中激发身体系统释放多巴胺，而多巴胺提升了我们的情绪和动力水平，也会让努力的过程中碰到的困难变得相对容易克服。专注于这个过程的本身，而不是在过程前进行各种外界刺激（如前面提到的药物），或者在过程后给自己巨大的奖励。</p><p>这种思维方式看起来很主观，但这就是我们的神经系统工作的方式，虽然人类的“硬件系统”都差不多，但知识，思维这些运行之上的“软件”却可以千差万别。<strong>我们可以通过自律，自我暗示来改变自身对各类活动的喜好</strong>。例如通过暗示 fasting 对我们健康的益处，来获取满足感，而不是借助于 fasting 结束后的大快朵颐。通过自律抵御高油盐食物的吸引力，并且自我暗示植物类食物对身体的好处，坚持一段时间，会觉得花椰菜也挺美味的。这也是为什么我们在这篇文章中介绍了很多原理性的内容，而不仅仅是行为建议。因为这些原理知识能够让我们做更好的自我暗示 😃</p><p>这一节的 podcast 对我本人的冲击非常大，强烈建议大家观看这期 <a href="https://hubermanlab.com/controlling-your-dopamine-for-motivation-focus-and-satisfaction/">Mindset &amp; Drive</a>，相信也会有不同的收获。</p><h1 id="学习与专注"><a class="markdownIt-Anchor" href="#学习与专注"></a> 学习与专注</h1><p>在了解了多巴胺的运作机制基础上，我们可以继续探究一些跟大脑健康，专注度，如何进行高效学习相关的话题。</p><h2 id="学习的原理"><a class="markdownIt-Anchor" href="#学习的原理"></a> 学习的原理</h2><p>从脑神经科学来看，学习的本质是神经元的重新连接（rewire），进一步来看，需要大脑处在一种学习的化学状态下，也就是 Huberman 经常提到的神经可塑性（neuroplasticity）状态。</p><p>简单来说，当我们尝试做一些事情，但没有达到预期目标时，身体会给大脑发信号，“我犯错了”。处在这种犯错，沮丧的认知状态下，神经系统会释放肾上腺素（提升 alertness），乙醯胆碱（提升 focus），多巴胺（促进神经元的 change，rewire）等化学物质，激活神经元的可塑性。也就是说，<strong>犯错是我们进入学习状态的重要前提</strong>。搞机器学习的同学应该很熟悉了吧，这跟我们训练模型不是一模一样么 😃 另外很多人可能觉得心流（flow）状态是学习的最佳状态，而 Huberman 则不这么认为。<strong>心流是一种精神高度集中且接近于自动化的状态，是在做我们已经知道怎么做的事情，而不是在学习新的知识技能</strong>。</p><p>对于这个学习状态，经典的实验是给人们戴上一些能转变角度的眼镜，然后执行一些类似物体抓取的任务。由于看到的东西通过眼镜改变了其本来的位置，一开始在尝试时总会出现抓取动作的偏离。但后续在进入神经可塑性状态后，我们能逐渐适应相关的视觉偏移，协调自己的听觉，动作等都与之协同，顺利完成任务。更有意思的是，<strong>这个“神经可塑性”的化学状态是可以持续的</strong>，我们甚至可以先通过一些其它操作触发大脑的这个机制，再去进行真正的学习，以加快学习的速度。这里还有一个隐藏逻辑，当你在遇到挫折困难时，大脑进入了可塑性状态，而此时你却放弃了，那么<strong>神经元也会重新连接到这种容易放弃的行为模式，形成恶性循环</strong>。</p><p>人在年幼时期大脑天然的神经可塑性会比较好，而在 25 岁以后则会大大下降。我们后面会提到如何来进行克服。</p><p>另外，<strong>休息和睡眠时也会发生大量的神经元重连接的活动</strong>，这也是之前我们就提到过的，高质量的睡眠是实现很多生理，心理健康强壮的先决条件。</p><h2 id="利用神经可塑性"><a class="markdownIt-Anchor" href="#利用神经可塑性"></a> 利用神经可塑性</h2><p>如果正在阅读文章的你还未满 25 岁，那么恭喜你，你的神经可塑性仍然非常的好，可以<strong>尽可能广泛的学习各种知识和技能</strong>。比如你可以很快学会各种乐器，新的语言，新的运动，新的专业技能等等。通过更广阔领域的体验接触，尽量找到你最有兴趣的方向，可以后续再不断深入经营。</p><p>如果已经像我一样超过了 25 岁，那么还有很多办法来提升神经可塑性：</p><ul><li>通过实验发现，<strong>成年人对于小幅度的增量学习是完全可以适应与掌握的</strong>。例如每次视觉上的偏差只有 7 度，而不是一下子就来个 180 的大颠倒，那么成年人也能很快从错误中学习纠正。应用到实际学习中，我们每次学习的内容可以控制一下不要太多（本文有点违反了，建议收藏慢慢学习），多次积累来完成神经系统的调整学习。</li><li>对于达成目标的渴求度越高，重要性越大，奖励的刺激越大（比如为了生存），则神经可塑性就会越容易出现。这个比较符合直觉，但是现实中可操作性可能不高。</li><li>第三点最有意思，<strong>通过扰乱前庭神经系统（vestibular system），能够达到神经元可塑性的状态</strong>。简单来说，就是让你的身体有一些“新颖的重力体验”，如倒立，瑜伽，体操，滑板，任何让身体会失去平衡的一些状态等，会快速激发“我犯错了”的信号，进入学习状态，甚至可以在之后去做别的任务的学习。这一下子就让我想到了<strong>淘宝成立初期的“倒立文化”，没想到还真的有科学依据</strong>。需要注意的是，这个体验必须要新颖，也就是说如果你已经倒立很熟练了，那么去做倒立就是个日常行为，并不会给身体一种在犯错边缘，需要纠正的刺激。</li></ul><h2 id="学习的理想状态"><a class="markdownIt-Anchor" href="#学习的理想状态"></a> 学习的理想状态</h2><p>除了神经可塑性的化学状态外，我们也需要注意其它的因素。例如我们<strong>不能太放松以至于有些昏昏欲睡，也不能太紧张激动，无法控制自己拥有清晰的思考</strong>等。这些也都跟我们体内的多巴胺，肾上腺素，乙醯胆碱，血清素，褪黑素等化学物质的水平有关，需要做好调节。在之前 Rich Roll 的访谈节目中，Huberman 提了一个非常有效的“呼吸工具”，叫<strong>生理叹息</strong>（Physiological Sigh）。操作方法上简单来说就是吸两口气，然后出一口长气。通常情况下，只要一两次生理叹息就足以使我们的压力和警觉水平迅速下降，让人感到更加平静，提升学习表现。</p><p>前面提到的成长型思维也很重要，在遇到错误导致的沮丧感觉时，可以不断增强自我暗示，失败是帮助我们学习成长的唯一路径，对我们是有益的，以此增加多巴胺的释放，提升学习动力和过程中的愉悦感。</p><p>联系到睡眠对学习的促进作用，也有一些研究提供了一些相关的 tips：</p><ul><li>在学习时听一些有规律的节拍，在入睡时也播放同样的微弱节拍，能够提升学习和记忆的效果。</li><li>一般在 90 分钟的学习后（人体生物钟的周期），可以选择进行 20 分钟的休息（non sleep deep rest），也会加强学习的效果。</li><li>Gap effect，在学习中随机停止 10 秒钟，这些停止会在睡眠中加速“播放”，提升学习效果。</li></ul><h2 id="提升专注"><a class="markdownIt-Anchor" href="#提升专注"></a> 提升专注</h2><p>“专注”背后的机理是大脑中两种“网络模式”的协调，一种叫 Default network，在我们不做任何事情时被激活，另一种叫 Task networks，在我们专注于做某些事情时被激活。普通人的大脑能够很好地协调这两个模式，两者像跷跷板一样，当一种模式被激活时另一种模式会被抑制。而具有专注障碍（比如多动症）的人来说，这两者无法很好地进行协调，因此会出现无法专注的现象。</p><p>通过提升多巴胺水平，可以有效促进这两种网络模式的协调，因此有非常多的多动症治疗药物都跟提升多巴胺有关，例如 <strong>Adderall，Modafinil</strong> 等。一些调查表明，这些药物（经常被称为聪明药，nootropics）在美国被滥用的程度甚至超过了大麻，不少“学霸”都以此来提升注意力，减少对睡眠的需求。但 Huberman 教授表示，一方面多巴胺的刺激提升后都会带来多巴胺水平的低谷，另一方面这些药物也可能导致上瘾，对新陈代谢作用造成扰动，有很多负面影响，<strong>对长期的学习与记忆效果可能并没有提升作用</strong>。在之前介绍多巴胺的章节也有提到，应该谨慎使用这类药物，并严格控制使用频率不能过高。</p><p>一些安全有效的提升专注力的方法包括：</p><ul><li>适量补充 <strong>Omega-3 EPA 鱼油</strong>，这是神经细胞的组成原料之一，能够有效减轻抑郁，对治疗多动症（ADHD）也有帮助。</li><li><strong>通过身体其它部分释放运动，可以帮助提升注意力</strong>。教授举的例子是作为神经科医生在开刀时，如果采用半蹲半站的姿态（运动释放），拿手术刀的手更稳定不容易颤抖。这让我想起以前读书时很多同学习惯转笔，现在工作了也有不少人喜欢玩指尖陀螺，或者站立办公，可能都是类似效果。</li><li><strong>限制视野范围，能够提升专注度</strong>。比如我们经常因为眼睛瞟到了任务栏上的消息提示闪动而分心，可以通过一些设置来进入“专注模式”。</li><li>视线的高低也会影响神经状态，<strong>视线往下看会让神经系统偏向镇静，放松，甚至困倦，而视线向上则会让系统提升警惕</strong>。工作时一般至少把显示器放置在鼻子位置之上。</li><li>大脑不擅长处理大量频繁的 context switch，典型的比如刷抖音，不同的信息以非常快的速度频繁切换，这对我们的注意力是有伤害作用的。2014 年的一项研究表示，<strong>我们每天在手机上花费的时间应该少于 60 分钟（青少年）/120 分钟（成年）</strong>，以免引起注意力障碍问题。</li><li>还有研究表明，<strong>17 分钟的冥想，能够对大脑中的神经元做重新连接，永久地改善注意力</strong>。只要做一次就可以，完全可以尝试一下。</li></ul><h2 id="大脑健康"><a class="markdownIt-Anchor" href="#大脑健康"></a> 大脑健康</h2><p>最后来看下提升大脑健康和效能的一些方法。</p><p>首先是前面提到过的，保证高质量的睡眠。</p><p>运动方面，<strong>对大脑直接帮助最大的是有氧运动</strong>，提升心肺功能，支持大脑供能。建议每周 150-180 分钟的有氧训练。</p><p>对于大脑健康有帮助的食物，其中前三点是比较重要的，后面的部分涉及的研究没有那么多：</p><ul><li><strong>Omega3, 尤其是 EPA 等脂肪酸</strong>，是大脑组成的重要部分，且一般人都容易摄入不足。多吃鱼，牡蛎，鱼子酱，奇亚籽，核桃，大豆。一天至少摄入 1.5 克，理想情况需要 3 克以上。不喜欢吃鱼的话可以辅助摄入鱼油。</li><li><strong>磷脂酰丝氨酸</strong>，也对认知能力有帮助。通过鱼，肉类，卷心菜来摄入。</li><li><strong>乙酰胆碱</strong>，重要的神经调质，提升注意力。摄入胆碱的重要来源是鸡蛋，尤其是蛋黄。土豆，坚果，水果中也含有，虽然没有蛋黄中的含量那么丰富。可以通过 Alpha-GPC 等补充剂来获取。</li><li>肌酸，尤其对于不吃肉的人，一天需要摄入 5 克左右。</li><li>花青素，在蓝莓，黑莓，葡萄等食物中有提供。可以降低 DNA 损伤，缓解认知下降等问题。大约每天需要 60-120 克蓝莓的补充。</li><li>谷氨酰胺，可以通过牛肉，鸡肉，鱼肉，鸡蛋，大豆，卷心菜，菠菜，芹菜等食物来摄取。提升大脑在缺氧（高海拔地区）下的表现，还能够抑制对糖的需求。</li><li>水，钠，钾，镁等电解质是神经元信号传递所需的基础元素，需要保证。</li></ul><p>这一节中还讨论了我们身体对各种食物喜好进行判断的三个渠道，前两个分别是味觉判断和营养成分的下意识判断。第三个比较有意思，也跟多巴胺有关，即我们可以<strong>通过提升大脑代谢的活跃度来增加对某种食物的喜好</strong>。比如你如果不喜欢吃鱼，一种方法是你可以把鱼跟你平时爱吃的食物一起吃，另一种是给自己足够的心理暗示，说服自己吃鱼是有益身体健康的。通过这两种办法，你都可以让大脑释放多巴胺，从而逐渐提升对鱼类食物的喜好程度。</p><p>最后，如果你对膳食补充剂感兴趣，还可以看看 <a href="https://www.thorne.com/u/huberman">Huberman 教授平时会吃的补充剂有哪些</a>。</p><h1 id="长寿"><a class="markdownIt-Anchor" href="#长寿"></a> 长寿</h1><p>最后我们来看下如何延年益寿，这是 Huberman 跟这个领域的专家，来自哈佛的 David Sinclair 的一集访谈节目。</p><h2 id="衰老的本质"><a class="markdownIt-Anchor" href="#衰老的本质"></a> 衰老的本质</h2><p>Sinclair 认为，衰老是一种疾病，它本身导致了非常多通常意义上的疾病的出现，比如阿尔兹海默症，癌症等。我们可以通过科学的手段来“治疗”衰老，甚至逆转它。</p><p>从本质上来说，衰老是<strong>基因信息的损失</strong>，这分为两部分：</p><ul><li>DNA 本身的信息，比如细胞中的 DNA 结构会在辐射等情况下受到破坏。</li><li>控制哪些基因进行表达的信息受到了破坏，也就是所谓的表观基因组（epigenome）。这部分在衰老的因素中占了 80%。</li></ul><p>人体内有一个天然的“衰老时钟”，而且并不是以匀速走的。在年轻时我们的生长发育过程中，这个时钟走得更快。所以如果青春期发育比较迅速的人，一般来说整体的时钟走的比较快，寿命也会相对短，是不是有点吓人……而且，一般比较矮小的人，像侏儒很少会得心脏病，癌症，也会明显更长寿。不过不要紧张，前面提到了，基因本身的信息只占了衰老因素的 20%，<strong>控制基因表达这部分占了大多数</strong>。</p><p>这里有点意外的是 Sinclair 教授介绍的最重要的几个实验，都跟前面我们提到的 fasting 有关。比如一般老鼠的寿命大概是 2 年，他们实验室有一只叫 Yoda 的老鼠，活了足足 5 年。其主要的做法就是选取了侏儒基因，以及执行 fasting。</p><p>教授详细介绍了 <strong>fasting 为何能提升动物/人类 30% 以上的寿命</strong>：</p><ul><li>在低血糖水平时，身体会抑制哺乳动物雷帕霉素靶蛋白（mTOR），激活去乙酰化酶（sirtuin），形成一个非常良好的化学状态，清理旧蛋白质，提高胰岛素敏感度，提供更多能量，修复细胞等等。后面这个乙酰化酶是我们抵御衰老的一个重要武器。</li><li>当胰岛素水平低时，“长寿基因”会被激活，如 SIRT1 等。</li><li>fasting 会给细胞足够的“休息时间”。</li><li>血糖水平低，会让身体对胰岛素更敏感，更快吸收血糖，也对健康有益。</li><li>当你从来不感受饥饿时，你的衰老时钟也走的更快。</li><li>除了 24 小时周期 fasting 触发的 autophagic，还有更深层次的清理机制，会在禁食第二，三天启动。在老年老鼠上的实验表明，这种长时间的禁食可以让他们延长寿命 35%。不过这个实操难度对普通人来说有点大。</li></ul><p>Sinclair 也对比了一些上个世纪失败的研究，比如通过抗氧化剂来抵御衰老。现代长寿研究的核心思想是，如何<strong>通过一些机制手段来触发身体自身的衰老抵抗机制</strong>。</p><p>此外 Sinclair 也介绍了一些激动人心的前沿技术，例如<strong>通过基因治疗方法，可以重启我们的 DNA 表达系统</strong>。通过一次注射，可以让盲人恢复视力，这已经在老鼠身上得到了验证。或许几年后，我们可以像死侍那样实现身体各部分的逆转老化。</p><h2 id="实践-2"><a class="markdownIt-Anchor" href="#实践-2"></a> 实践</h2><p>这里列出一些 Sinclair 自己的实践方式，如果想要采纳还是要结合自身的情况来看。有意思的是这集节目下有个热门留言是这个教授竟然已经 52 岁了，完全看不出来……所以你懂的。</p><ul><li>不吃早饭，午饭也吃的比较少，酸奶或者橄榄油，晚饭吃蔬菜为主，加鱼和虾，基本不吃牛排。不吃糖，甜品，面包。基本达到了 2 小时进食窗口的高阶 fasting 状态。他偶尔也会尝试一整天都不吃东西，但比较难坚持。</li><li>每天摄入 1 克的白藜芦醇（resveratrol），1 克的 NMN（进而会转化为 NAD，which is sirtuin 的“燃料”），还有二甲双胍（metformin）。其中锻炼的日子可能会跳过一些补充品。他并不吃复合维生素。</li><li>以蔬菜为主食的好处：富含各种营养，维生素；包含异种激素（Xenohormesis），植物基于“压力”之下产生的物质，对长寿有益。后者也可以通过槲皮素（quercetin）来做膳食补充。</li><li>一般会隔一天进行有氧运动和力量训练。有氧运动能提升 NAD 水平。</li><li>根据家族病史来决定一些药物摄入，如他 29 岁就开始服用降胆固醇药物。</li><li>对于人造甜味剂，教授认为总体来说是安全的。他偶尔也会喝健怡可乐。</li></ul><p>对于这一系列实践，Sinclair 教授都进行了 10 多年的自身实验，并使用各种手段来监控身体数据。通过监控数据可以推测出一个人的“生理年龄”如何（不是光看脸），他自己在上述实践下，生理年龄在持续下降，现在已经达到了 30 岁左右的水平（实际年龄 52 岁）。另外，他认为每个人的身体情况不一样，医院约定俗成的生理指标范围也不一定适合每个人。<strong>未来这种健康数据的实时监控与个性化诊断会成为主流</strong>。他举了一些例子：</p><ul><li>监控血糖水平 HbA1c，观察 fasting 的影响等。</li><li>监控炎症指标 CRP，与心脏病等各种疾病的诱发相关。</li><li>监控 LDL，通过药物等进行控制。膳食胆固醇对血液胆固醇几乎没有影响，不需要戒红肉，黄油等。</li><li>补充铁元素可能加速衰老。医学指标需要个性化，低铁元素含量并不一定导致贫血。</li></ul><p>还有一些影响寿命的负面因素：</p><ul><li>肥胖症会加速衰老。</li><li>吸烟，会破坏基因表达，加速衰老。</li><li>X 光检查同理，没有必要时，避免接触。</li></ul><p>展望一下 longevity 研究的未来，还是挺激动人心的。现代科学每一年能让我们的平均寿命延长 1/4 年，如果每一年能让我们的平均寿命延长超过 1 年，则达到了<strong>寿命“逃逸速度”</strong>（类比以 1000 英里每小时的速度往西飞行，太阳永远不会落下），实现了“永生”。著名的未来学家 Ray Kurzweil 预测，大约 12 年后（2034 年）就能实现，让我们拭目以待。</p><p>除了这集 podcast，也必须附上吴承霖大佬的万星项目 <a href="https://github.com/geekan/HowToLiveLonger">程序员延寿指南</a>。</p><h1 id="个人实践"><a class="markdownIt-Anchor" href="#个人实践"></a> 个人实践</h1><p>前面介绍的内容有点多，这篇文章篇幅也有些超了。最后来简单介绍下我个人目前采纳的一些行动和辅助工具。</p><p>睡眠方面暂时没有什么特别的措施，现在带娃基本上晚上睡眠质量也比较一般。只是会稍稍注意一下晚上 11 点后尽量不接触手机光源。早起接收光照这点，基本上就是早上遛狗或者开车通勤时间来接触，基本压力不大。如果比较讲究的同学，还可以下一个 <a href="https://mycircadianclock.org/">My Circadian Clock App</a> 来追踪一下生物钟，也是 Satchin Panda 等大佬参与开发的项目，值得信赖。</p><p>饮食方面，开始尝试 8 小时进食窗口的 fasting，目前感觉良好。中饭一般吃蔬菜为主的轻食，晚上就比较放飞自我，想吃啥吃啥。早上会看情况喝点盐水，茶或者 AG1 的补充剂。膳食补充剂目前基本只有复合维生素和 EPA 鱼油在使用，后面可以参考下 <a href="https://fastlifehacks.com/andrew-huberman-supplements-list/">Huberman 的“配方”</a> 增加一些。Huberman 自己也在节目中表示<strong>对白藜芦醇和 NMN 还在观望状态</strong>，我查了些资料发现有争议的地方还不少，所以我个人建议先采纳广受认可和使用的一些补充剂，如 EPA 鱼油，二甲双胍等。个人目前考虑的补充剂列表：</p><ul><li><a href="https://www.thorne.com/products/dp/basic-nutrients-2-day">基础维生素</a>，常规补充剂。</li><li><a href="https://www.thorne.com/products/dp/super-epa-sp608nc">Omega-3 EPA</a>。</li><li><a href="https://www.thorne.com/products/dp/betaine-hcl-pepsin-225-s">Betaine HCL &amp; Pepsin</a>，保护肠胃。</li><li><a href="https://www.thorne.com/products/dp/l-tyrosine">L-Tyrosine</a>，提升多巴胺，可能会买个尝尝鲜。</li><li><a href="https://zh.m.wikipedia.org/zh/%E4%BA%8C%E7%94%B2%E5%8F%8C%E8%83%8D">二甲双胍</a>，抗衰老“神药”。</li><li><a href="https://www.thorne.com/products/dp/resveracel">ResveraCel</a>，白藜芦醇，NR 等抗衰老组合。</li></ul><p>很多人都关心 fasting 可能引发胆结石，这里提供一些补充信息：</p><ul><li>从这篇 <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1419405/">Bloch, H. M. 等人的论文</a> 来看，fasting 过程中胆汁的饱和度有一个先上升后下降的过程，<a href="https://youtu.be/2lGuXBwudKw">Dr. Berg 也以此做了解释</a>，认为 fasting 加生酮饮食（摄入脂肪）对胆囊健康反而是有益的。</li><li>从这篇 <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1405175/">Sichieri, R. 等人的论文</a> 的结果来看，long overnight fasting 和节食会提升得胆结石的概率。不过减肥（减少脂肪）本身就会提升得胆结石的概率。</li><li>持续 24 小时以上的禁食相关的研究比较少（比较难执行），但从机理上来说长时间的禁食应该会增加得胆结石的概率。</li><li>饮食结构，自身状况对胆结石的形成也会有很大影响，例如高胆固醇，高胰岛素水平，高碳水饮食等。高纤维食物，健康的脂肪摄入，有助于降低得胆结石的概率。</li></ul><p>总体看下来，我个人感觉这块的实验上没有一个定论（就跟 <a href="https://www.coffeeandhealth.org/factsheet/gallstones-factsheet">咖啡是否会引发胆结石</a> 一样），但应该不是一个概率很大的问题，起码 Huberman 教授跟这个领域的另一位权威 Satchin Panda 教授都没有提到这块的问题。理想情况是执行 fasting 时持续对你的身体状况做医学指标的跟踪。其它就看个人选择了 😃</p><p>工作，学习，专注方面，主要看自律了。这方面我总体控制还可以，在了解了多巴胺的工作原理之后就更加有自信了，主要靠各种软件的专注模式来近似执行番茄时钟法，此外也采用了升降桌，大概有 30% 的时间站立办公。工作间歇会尝试一下 Yoga Nidra。此外晚上学习时段会用 iPad 的 Books 来记录一下阅读时间，基本上每天保持 30 分钟以上，持续坚持。后面考虑试试工作时喝马黛茶，以及夏天开始尝试冷水澡。</p><p>运动方面是这一年来改观最大的一项，依靠小米手环 PAI 指数功能的督促，基本上做到了每周平均 3 次的跑步或者羽毛球活动，持续把 PAI 值保持在 200 左右。总体来说对于精神状态的改观还是很大的，肚子上的脂肪也减少了很多。唯一比较困扰的是一般下班后运动都要 9，10 点开始了，结束后会离入睡的时间比较近，有时候会对睡眠质量有所影响。</p><p>最后，Huberman 教授的 podcast 中还有很多其它内容，比如习惯养成，健身增肌，应对恐惧与创伤，情绪管理等，感兴趣的朋友可以进一步挖掘。本文以实验事实与原理假设的陈述为主，以上所有的行动方案都需要在咨询医师，专业人员的条件下，结合自身情况执行，注意自身安全，本人与 Huberman 都不负相关后果责任。</p><p>备注：这篇文章也同时发布到了 <a href="https://github.com/zijie0/HumanSystemOptimization">Github</a>，欢迎大家 Star 并提出宝贵建议，谢谢！如果你对我的其它作品感兴趣，也欢迎搜索关注公众号：RandomGenerator。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>文章收藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健康</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6的import和export</title>
    <link href="/2021/06/13/ES6%E7%9A%84import%E5%92%8Cexport/"/>
    <url>/2021/06/13/ES6%E7%9A%84import%E5%92%8Cexport/</url>
    
    <content type="html"><![CDATA[<h2 id="import-基本语法"><a class="markdownIt-Anchor" href="#import-基本语法"></a> <code>import</code> 基本语法</h2><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 默认导入，即导入 export default 中的模块</span><br><span class="hljs-keyword">import</span> defaultExport <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><br><span class="hljs-comment">// 通过一个别名 name 导入所有模块</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><br><span class="hljs-comment">// 导入指定模块</span><br><span class="hljs-keyword">import</span> &#123; export1 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><br><span class="hljs-comment">// 导入指定模块，并设置别名</span><br><span class="hljs-keyword">import</span> &#123; export1 <span class="hljs-keyword">as</span> alias1 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><br><span class="hljs-comment">// 导入多个模块</span><br><span class="hljs-keyword">import</span> &#123; export1 , export2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; export1 , export2 <span class="hljs-keyword">as</span> alias2 , [...] &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><br><span class="hljs-comment">// 导入默认模块和其他模块</span><br><span class="hljs-keyword">import</span> defaultExport, * <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> defaultExport, &#123; export1 [ , [...] ] &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><br><span class="hljs-comment">// 仅执行模块中的代码，不导入任何模块</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-comment">// 也适用于动态导入：</span><br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (somethingIsTrue) &#123;<br>    <span class="hljs-comment">// import module for side effects</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;/modules/my-module.js&#x27;</span>);<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="export-基本语法"><a class="markdownIt-Anchor" href="#export-基本语法"></a> <code>export</code> 基本语法</h2><p>ESM 模块导出有两种类型：具名导出和默认导出。每个模块可以有多个具名导出，但只能有一个默认导出。两种类型导出的基础语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 具名导出</span><br><br><span class="hljs-comment">// 导出已声明功能</span><br><span class="hljs-keyword">export</span> &#123; myFunction, myVariable &#125;;<br><span class="hljs-comment">// 导出单个功能 (可使用 var, let, const, function, class)</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myVariable = ...;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>&#123; ... &#125;;<br>                              <br><span class="hljs-comment">// 默认导出</span><br><br><span class="hljs-comment">// 以默认导出形式导出已声明功能</span><br><span class="hljs-keyword">export</span> &#123; myFunction <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span> &#125;;<br><span class="hljs-comment">// 以默认导出形式导出单个功能</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; ... &#125;<br><br><span class="hljs-comment">// 聚合导出（Aggregating）</span><br><span class="hljs-keyword">export</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> function1, function2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;bar.js&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文远知行前端笔试题</title>
    <link href="/2021/03/18/%E6%96%87%E8%BF%9C%E7%9F%A5%E8%A1%8C%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <url>/2021/03/18/%E6%96%87%E8%BF%9C%E7%9F%A5%E8%A1%8C%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1><p>使用html + js写一个马赛克画板（2.1版）：</p><ol><li>页面加载时，要求用户输入两个整数，对应长和宽，例如100, 200</li><li>页面显示100*200个格子，要求占满整个窗口，不能有滚动条</li><li>当窗口大小变化时，依然要满足上述条件</li><li>鼠标左键点击任意一个格子时，填入一个随机颜色，即#000000-#FFFFFF中的一种</li><li>鼠标右键点击此格子时，擦除颜色</li><li>每次进行上述的第4点或者第5点的操作时，显示“颜色岛“的总数量。一个颜色岛就是相连的所有已着色区域块，如下图中，总数量是3。要求这个数字以美观的形式展示，1秒后自动消失，具体样式和动画可以自行设计。</li><li>敲击键盘c键时，对每一个已着色的格子随机产生另一个颜色，并且设计一个渐变动画，每个格子要从原来的颜色渐变成新颜色</li></ol><h1 id="实现方案"><a class="markdownIt-Anchor" href="#实现方案"></a> 实现方案</h1><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//Snipaste_2021-03-18_18-19-05.png" alt="Snipaste_2021-03-18_18-19-05" /></p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//Snipaste_2021-03-18_18-19-24.png" alt="Snipaste_2021-03-18_18-19-24" /></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li>对于要求1、2、3，可以通过动态创建 table 元素或者使用 Grid 实现；</li><li>对于要求4和5可以通过事件委托实现，避免绑定太多事件；</li><li>对于要求7，可以开一个全局数组保存当前已经设置了颜色的元素，每次进行4和5的操作时就修改该数组；</li><li>对于要求6，可以通过上面定义的全局数组采用DFS遍历实现。</li></ul><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>马赛克画板 2.1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;init&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>马赛克画板<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rows&quot;</span>&gt;</span>行数:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rows&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;cols&quot;</span>&gt;</span>列数:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cols&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;init-submit&quot;</span>&gt;</span>初始化网格<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;stage&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;normalize.css&quot;</span>;<br><br><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.init</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span> <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">5</span>);<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">3</span>);<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.init</span> <span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">75</span>);<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.init</span> <span class="hljs-selector-class">.form-item</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.init</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">75</span>);<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.init</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=number]</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">32px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">11px</span>;<br>  <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">65</span>);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#d9d9d9</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.init</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=number]</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#40a9ff</span>;<br>  <span class="hljs-attribute">border-right-width</span>: <span class="hljs-number">1px</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.init</span> <span class="hljs-selector-id">#init-submit</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">36px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#1890ff</span>;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#1890ff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.stage</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.stage</span> <span class="hljs-selector-tag">table</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">border-collapse</span>: collapse;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.stage</span> <span class="hljs-selector-tag">td</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#cccccc</span>;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.message</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>  <span class="hljs-attribute">animation</span>: fadeIn <span class="hljs-number">1s</span> forwards;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.message</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff6060</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> fadeIn &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">50px</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">50px</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> tools = &#123;<br>  $: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">selector</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> elems = <span class="hljs-built_in">document</span>.querySelectorAll(selector);<br>    <span class="hljs-keyword">if</span> (elems.length === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> elems[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> elems;<br>  &#125;,<br>  randomIntRange: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">min, max</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * (max - min) + min, <span class="hljs-number">10</span>);<br>  &#125;,<br>  randomColor: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-string">&quot;rgb(&quot;</span> +<br>      randomIntRange(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>) +<br>      <span class="hljs-string">&quot;, &quot;</span> +<br>      randomIntRange(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>) +<br>      <span class="hljs-string">&quot;, &quot;</span> +<br>      randomIntRange(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>) +<br>      <span class="hljs-string">&quot;)&quot;</span><br>    );<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">compareGrid</span>(<span class="hljs-params">g1, g2</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (g1.dataset.col === g2.dataset.col &amp;&amp; g1.dataset.row === g2.dataset.row) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// 合并工具函数到 window</span><br><span class="hljs-built_in">Object</span>.assign(<span class="hljs-built_in">window</span>, tools);<br><br><span class="hljs-comment">// 全局变量</span><br><span class="hljs-keyword">var</span> coloredGrids = [];<br><br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#init-submit&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    event.preventDefault();<br>    <span class="hljs-keyword">let</span> rows = $(<span class="hljs-string">&quot;input[name=rows]&quot;</span>).value;<br>    <span class="hljs-keyword">let</span> cols = $(<span class="hljs-string">&quot;input[name=cols]&quot;</span>).value;<br>    <span class="hljs-keyword">if</span> (rows &amp;&amp; cols) &#123;<br>      $(<span class="hljs-string">&quot;.init&quot;</span>).style.display = <span class="hljs-string">&quot;none&quot;</span>;<br>      initGrids(rows, cols);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      alert(<span class="hljs-string">&quot;请输入正确的数字&quot;</span>);<br>    &#125;<br>  &#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initGrids</span>(<span class="hljs-params">rows, cols</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> table = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;table&quot;</span>);<br>  table.className = <span class="hljs-string">&quot;sketchpad&quot;</span>;<br><br>  <span class="hljs-comment">// 监听按键</span><br>  <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;keyup&quot;</span>, handleKeyPress);<br><br>  <span class="hljs-comment">// 屏蔽鼠标右键默认菜单事件</span><br>  <span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    event.preventDefault();<br>  &#125;;<br><br>  table.addEventListener(<span class="hljs-string">&quot;mousedown&quot;</span>, handleClick, <span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br>    <span class="hljs-keyword">let</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;tr&quot;</span>);<br>    tr.className = <span class="hljs-string">&quot;sketchpad-grid-row&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; cols; j++) &#123;<br>      <span class="hljs-keyword">let</span> td = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;td&quot;</span>);<br>      td.className = <span class="hljs-string">&quot;sketchpad-grid-col&quot;</span>;<br>      td.setAttribute(<span class="hljs-string">&quot;data-row&quot;</span>, i);<br>      td.setAttribute(<span class="hljs-string">&quot;data-col&quot;</span>, j);<br>      tr.appendChild(td);<br>    &#125;<br>    table.appendChild(tr);<br>  &#125;<br><br>  $(<span class="hljs-string">&quot;.stage&quot;</span>).appendChild(table);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleKeyPress</span>(<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (event.keyCode !== <span class="hljs-number">67</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (coloredGrids.length) &#123;<br>    coloredGrids.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">grid, index</span>) </span>&#123;<br>      grid.style.backgroundColor = randomColor();<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (event.button === <span class="hljs-number">0</span>) &#123;<br>    event.target.style.backgroundColor = randomColor();<br>    coloredGrids.push(event.target);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (event.button === <span class="hljs-number">2</span>) &#123;<br>    event.target.style.backgroundColor = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">let</span> index = coloredGrids.indexOf(event.target);<br>    coloredGrids.splice(index, <span class="hljs-number">1</span>);<br>  &#125;<br><br><br>  <span class="hljs-keyword">let</span> colorIslands = countColorIslands();<br>  <span class="hljs-keyword">let</span> message = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>  message.className = <span class="hljs-string">&quot;message&quot;</span>;<br>  message.innerHTML = <span class="hljs-string">&quot;当前颜色岛数量为: &lt;span&gt;&quot;</span> + colorIslands + <span class="hljs-string">&quot;&lt;span&gt;&quot;</span>;<br>  $(<span class="hljs-string">&quot;.container&quot;</span>).appendChild(message);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;.container&quot;</span>).removeChild(message);<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countColorIslands</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> temp = coloredGrids.slice(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">let</span> visited = <span class="hljs-built_in">Array</span>(temp.length).fill(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">let</span> result = [];<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">grid, index</span>) </span>&#123;<br>    visited[index] = <span class="hljs-literal">true</span>;<br>    getColoredNeighbors(grid).forEach(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!visited[i]) dfs(coloredGrids[i], i);<br>    &#125;);<br>  &#125;;<br><br>  temp.forEach(<span class="hljs-function">(<span class="hljs-params">grid, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!visited[index]) &#123;<br>      result.push(grid);<br>      dfs(grid, index);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> result.length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColoredNeighbors</span>(<span class="hljs-params">elem</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> x = +elem.dataset.col;<br>  <span class="hljs-keyword">let</span> y = +elem.dataset.row;<br>  <span class="hljs-keyword">let</span> neighbors = [];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = (x - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : x - <span class="hljs-number">1</span>); i &lt;= x + <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = (y - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : y - <span class="hljs-number">1</span>); j &lt;= y + <span class="hljs-number">1</span>; j++) &#123;<br>      <span class="hljs-keyword">if</span> (!(i === x &amp;&amp; j === y) &amp;&amp; (i === x || j === y)) &#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-string">&quot;td[data-col=&#x27;&quot;</span> + i + <span class="hljs-string">&quot;&#x27;][data-row=&#x27;&quot;</span> + j + <span class="hljs-string">&quot;&#x27;]&quot;</span>).style.backgroundColor !== <span class="hljs-string">&quot;&quot;</span>) &#123;<br>          coloredGrids.forEach(<span class="hljs-function">(<span class="hljs-params">grid, index</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (compareGrid($(<span class="hljs-string">&quot;td[data-col=&#x27;&quot;</span> + i + <span class="hljs-string">&quot;&#x27;][data-row=&#x27;&quot;</span> + j + <span class="hljs-string">&quot;&#x27;]&quot;</span>), grid)) &#123;<br>              neighbors.push(index);<br>            &#125;<br>          &#125;);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> neighbors;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端知识体系总结</title>
    <link href="/2021/03/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="网络基础"><a class="markdownIt-Anchor" href="#网络基础"></a> 网络基础</h1><h2 id="1-tcp-连接的建立和释放"><a class="markdownIt-Anchor" href="#1-tcp-连接的建立和释放"></a> 1. TCP 连接的建立和释放</h2><h3 id="tcp-建立连接三次握手"><a class="markdownIt-Anchor" href="#tcp-建立连接三次握手"></a> TCP 建立连接（三次握手）</h3><p>服务器保持监听状态，客户端主动发起连接，收到服务器响应后建立连接，服务器收到客户端连接请求后进一步确认客户端可连接，收到客户端响应后建立连接，此时客户端服务端双方都已确认各自可收发。（最后一次握手的作用：防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误）</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//image-20210312113504239.png" alt="image-20210312113504239" /></p><h3 id="tcp连接释放四次挥手"><a class="markdownIt-Anchor" href="#tcp连接释放四次挥手"></a> TCP连接释放（四次挥手）</h3><p>客户端主动发起连接释放请求，并且停止发送数据，服务器收到后返回确认信息，同时开始传输最后的数据，此时客户端还要等待服务器传回的数据。传输完成后服务器也发起连接释放请求，等待客户端回应后直接关闭连接，而客户端还需要等待2MSL（Maximum Segment Lifetime）后才关闭连接。（等待2MSL的作用：保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，同时防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中）</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//image-20210312114150079.png" alt="image-20210312114150079" /></p><h2 id="2-http-1x"><a class="markdownIt-Anchor" href="#2-http-1x"></a> 2. HTTP 1.X</h2><p>HTTP(Hypertext Transfer Protocol)，超文本传输协议（应用层），是互联网上应用最为广泛的一种网络协议。HTTP 是一个客户端（用户）和服务端（网站）之间请求和响应的标准，用于从服务器传输超媒体文档到本地浏览器（用户代理）。HTTP 的连接很简单，是无连接（限制每次连接只处理一个请求）无状态（不保存请求和响应之间的通信状态）的，底层使用 TCP协议进行连接，数据都是明文传输的。</p><h3 id="http常用方法"><a class="markdownIt-Anchor" href="#http常用方法"></a> HTTP常用方法</h3><ul><li><code>GET</code>：获取资源，用来请求已被 URI 识别的资源；</li><li><code>POST</code>：传输实体的主体；</li><li><code>PUT</code>：传输文件；</li><li><code>DELETE</code>：删除文件；</li><li><code>HEAD</code>：获取报文首部；</li><li><code>OPTIONS</code>：查询支持的方法。</li></ul><h3 id="http常见状态码"><a class="markdownIt-Anchor" href="#http常见状态码"></a> HTTP常见状态码</h3><ul><li><code>200 OK</code>：请求成功。一般用于 GET 与 POST 请求；</li><li><code>301 Moved Permanently</code>：永久性重定向。表示请求的资源被分配了新的 URI，以后应使用资源现在所指的 URI 进行请求；</li><li><code>302 Found</code>：临时性重定向。与 301 类似，但资源只是临时被移动，仅限本次使用新的 URI，之后客户端应继续使用原有 URI；</li><li><code>304 Not Modified</code>：服务器资源未修改。此时可直接使用客户端未过期的缓存；</li><li><code>400 Bad Request</code>：请求报文存在语法错误；</li><li><code>403 Forbidden</code>：服务器理解请求客户端的请求，但是拒绝执行此请求；</li><li><code>404 Not Found</code>：服务器无法根据客户端的请求找到资源；</li><li><code>500 Internal Server Error</code>：服务器内部错误，无法完成请求；</li><li><code>502 Bad Gateway</code>：作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应；</li><li><code>504 Gateway Time-out</code>：充当网关或代理的服务器，未及时从远端服务器获取请求。</li></ul><h3 id="http-常见首部字段"><a class="markdownIt-Anchor" href="#http-常见首部字段"></a> HTTP 常见首部字段</h3><p>HTTP 的头部字段根据不同上下文可分为<strong>通用首部字段</strong>、<strong>请求首部字段</strong>、<strong>响应首部字段</strong>和<strong>实体首部字段</strong>；根据代理对其的处理方式又可分为<strong>端到端首部</strong>和<strong>逐跳首部</strong>，逐跳首部只对单次转发有效，经过缓存或代理后不再转发，HTTP/1.1和之后的版本中，要使用逐跳首部时需提供 Connection 首部字段。端到端首部则会一直发送给最终接收目标。</p><h4 id="通用首部字段"><a class="markdownIt-Anchor" href="#通用首部字段"></a> 通用首部字段</h4><p>缓存相关：</p><ul><li><code>Cache-Control</code>：控制缓存的行为（<code>客户端-(请求)-&gt;缓存服务器&lt;-(响应)-源服务器</code>）。<ul><li>请求指令<ul><li><code>no-cache</code>：在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证，即客户端不接收缓存过的响应而不代表不缓存；</li><li><code>no-store</code>：缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存；</li><li><code>max-age=&lt;seconds&gt;</code>：设置缓存存储的最大周期，超过这个时间缓存被认为过期，时间是相对于请求的时间；</li><li><code>max-stale[=&lt;seconds&gt;]</code>：表明客户端愿意接收一个已经过期的资源。可以设置一个可选的秒数，表示响应不能已经过时超过该给定的时间；</li><li><code>min-fresh=&lt;seconds&gt;</code>：表示客户端希望获取一个能在指定的秒数内保持其最新状态的响应；</li><li><code>no-transform</code>：不得对资源进行转换或转变。<code>Content-Encoding</code>、<code>Content-Range</code>、<code>Content-Type</code>等HTTP头不能由代理修改；</li><li><code>only-if-cached</code>：表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。</li></ul></li><li>响应指令<ul><li><code>public</code>：表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存；</li><li><code>private</code>：表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它），私有缓存可以缓存响应内容（对应用户的本地浏览器）；</li><li><code>no-cache</code>：在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证；</li><li><code>no-store</code>：缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存；</li><li><code>no-transform</code>：不得对资源进行转换或转变。<code>Content-Encoding</code>、<code>Content-Range</code>、<code>Content-Type</code>等HTTP头不能由代理修改；</li><li><code>must-revalidate</code>：一旦资源过期（比如已经超过<code>max-age</code>），在成功向原始服务器验证之前，缓存不能用该资源响应后续请求；</li><li><code>proxy-revalidate</code>：与 <code>must-revalidate</code> 作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略；</li><li><code>max-age=&lt;seconds&gt;</code>：设置缓存存储的最大周期，超过这个时间缓存被认为过期，时间是相对于请求的时间；</li><li><code>s-maxage=&lt;seconds&gt;</code>：与 <code>max-age</code> 功能相同，但是仅适用于共享缓存(比如各个代理)，私有缓存会忽略它。</li></ul></li></ul></li><li><code>Pragma</code>：HTTP/1.1 以前的遗留字段<code>Pargma: no-cache</code>与<code>Cache-Control: no-cache</code>功能一致，只用在客户端发送请求时；</li></ul><p>其他：</p><ul><li><code>Connection</code>：决定当前的事务完成后，是否会关闭网络连接。如果该值是 <code>keep-alive</code>，网络连接就是持久的，不会关闭，使得对同一个服务器的请求可以继续在该连接上完成。除此之外还用来控制不再转发给代理的首部字段。<ul><li><code>close</code>：表明客户端或服务器想要关闭该网络连接，这是HTTP/1.0请求的默认值；</li><li><code>keep-alive</code>：表明客户端想要保持该网络连接打开，HTTP/1.1的请求默认使用一个持久连接；</li><li>以逗号分隔的 HTTP 头：这个请求头列表由头部名组成，这些头将被第一个非透明的代理或者代理间的缓存所移除：这些头定义了发出者和第一个实体之间的连接，而不是和目的地节点间的连接。</li></ul></li><li><code>Date</code>：创建 HTTP 报文的时间和日期；</li><li><code>Keep-Alive</code>：在 <code>Connection</code> 设置为 <code>keep-alive</code> 时有效，允许发送方设置连接超时和最大请求数；</li><li><code>Trailer</code>：说明在报文主体后记录了哪些首部字段；</li><li><code>Transfer-Encoding</code>：传输报文主体时采用的编码方式；</li><li><code>Upgrade</code>：可用于将已经建立的客户端/服务器连接升级到其他协议（通过相同的传输协议）；</li><li><code>Via</code>：追踪客户端与服务器之前的请求和响应报文的传输路径；</li><li><code>Warning</code>：可能出现的问题的常规警告信息。</li></ul><h4 id="请求首部字段"><a class="markdownIt-Anchor" href="#请求首部字段"></a> 请求首部字段</h4><p>内容协商：</p><ul><li><code>Accept</code>：用来告知（服务器）客户端可以处理的内容类型及其优先级，这种内容类型用 MIME 类型来表示（如：<code>text/html</code>、<code>text/plain</code>、<code>application/json</code>、<code>image/png</code> 等）；<ul><li><code>&lt;MIME_type&gt;/&lt;MIME_subtype&gt;</code>：单一精确的 MIME 类型；</li><li><code>*/*</code>：任意类型的 MIME 类型；</li><li><code>;q=&lt;weight&gt;</code>：值代表优先顺序，用相对质量价值表示，又称作权重。</li></ul></li><li><code>Accept-Charset</code>：告知服务器用户代理支持的字符集及其优先级；</li><li><code>Accept-Encoding</code> 告知服务器用户代理支持的内容编码及其优先级；<ul><li><code>gzip</code>：由文件压缩程序 <code>gzip</code> 生成的编码格式；</li><li><code>compress</code>：由 UNIX 文件压缩程序 <code>compress</code> 生成的编码格式；</li><li><code>deflate</code>：组合使用 zlib 格式及由 deflate 压缩算法生成的编码格式；</li><li><code>identify</code>：不执行压缩或不会变化的默认编码格式。</li></ul></li><li><code>Accept-Language</code>：告知服务器用户代理支持的语言集及其优先级（中文、英文等）；</li><li><code>TE</code>：告知服务器用户代理能够处理的传输编码及其优先级，还可以指定伴随 trailer 字段的分块传输编码方式。</li></ul><p>条件请求：</p><ul><li><code>Expect</code>：客户端通过该字段告知服务器只有在满足期望条件的情况下才能妥善地处理请求，如果服务器无法处理该期望条件，就应该返回 <code>417 Expectation Failed</code>。目前规范中只规定了 “100-continue” 这一个期望条件；</li><li><code>If-Match</code>：服务器会比对该字段的值和资源的 ETag 值，仅当两者一致时，才会执行请求，否则，返回 <code>412 Precondition Failed</code>。该字段值为 <code>*</code> 时，会忽略 ETag 值；</li><li><code>If-Modified-Since</code>：该字段值应该是一个日期，如果服务器上资源的更新时间较该字段值新则处理该请求，否则，返回 <code>304 Not Modified</code>；</li><li><code>If-None-Match</code>：与 <code>If-Match</code> 相反，该字段的值与请求资源的 ETag 不一致时，处理该请求；</li><li><code>If-Range</code>：该字段的值（ETag 或时间）与资源的 ETag 或时间一致时，作为范围请求处理（使用首部字段 <code>Range</code>），否则，返回全体资源；</li><li><code>If-Unmodified-Since</code>：与 <code>If-Modified-Since</code> 相反，服务器上资源的更新时间早于该字段值时处理请求，否则，返回<code>412 Precondition Failed</code>；</li><li><code>Range</code>：范围请求，只获取部分资源。如 <code>Range: bytes=5001-10000</code>，表示获取从第 5001 字节至 10000 字节的资源。成功处理范围请求时返回 <code>206 Partial Content</code> 响应，无法处理范围请求时返回 <code>200 OK</code> 响应及全部资源。</li></ul><p>验证相关：</p><ul><li><p><code>Authorization</code>：向服务器回应自己的身份验证信息。客户端收到来自服务器的 <code>401 Authentication Required</code> 响应后，要在其请求中包含这个首部；</p></li><li><p><code>Proxy-Authorization</code>：与<code>Authorization</code>类似，用于客户端与代理服务器之间的身份验证。</p></li></ul><p>安全相关：</p><ul><li><code>Cookie</code>：包含与服务器相关联的已存储的 Cookie（即服务器先前使用 <code>Set-Cookie</code> 发送的 Cookie，或使用 <code>Document.cookie</code> 在 Javascript 中设置的 Cookie）。</li></ul><p>其他：</p><ul><li><code>From</code>：请求来自何方，格式是客户端用户的有效电子邮件地址；</li><li><code>Host</code>：服务器的主机名和端口号；</li><li><code>Referer</code>：这次请求的 URL 是从哪里获得的；</li><li><code>User-Agent</code>：客户端的浏览器或代理信息。</li></ul><h4 id="响应首部字段"><a class="markdownIt-Anchor" href="#响应首部字段"></a> 响应首部字段</h4><p>条件响应：</p><ul><li><code>Accept-Ranges</code>：服务器是否能处理范围请求，<code>bytes</code> 表示能，<code>none</code> 表示不能；</li><li><code>ETag</code>：用于表示服务器资源特定版本的标识符，服务器资源更新时，ETag 值也会更新，如果服务器资源未更改，则 ETag 值不变。服务器通过对比 <code>If-None-Match</code> 发送的 ETag 值，决定Web 服务器不需要重新发送完整的响应；</li><li><code>Vary</code>：指定一些首部名称，客户端后续请求相同资源时，这些首部与缓存的那次请求完全一致时才会返回缓存的资源，同时服务器可以使用它来指示在内容协商中使用了哪些首部名称。</li></ul><p>验证相关：</p><ul><li><code>Proxy-Authorizate</code>：与 <code>WWW-Authenticate</code> 类似，用于代理与客户端之间的认证，<code>407 Proxy Authentication Required</code> 响应必须包含该首部；</li><li><code>WWW-Authenticate</code>：告诉客户端访问所请求资源的认证方案，<code>401 Unauthorized</code> 响应中肯定有该首部。</li></ul><p>安全相关：</p><ul><li><code>Set-Cookie</code>：用于将 Cookie 从服务器发送到用户代理。</li></ul><p>其他：</p><ul><li><code>Age</code>：表示对象在代理缓存中的停留时间（以秒为单位）；</li><li><code>Location</code>：客户端应重定向到指定 URI，基本配合 <code>3**</code> 响应出现；</li><li><code>Retry-After</code>：告诉客户端多久之后再次发送请求。主要配合 <code>503 Service Unavailable</code> 使用，或与 <code>3**</code> 响应一起使用；</li><li><code>Server</code>：HTTP 服务器的应用程序信息。</li></ul><h4 id="实体首部字段"><a class="markdownIt-Anchor" href="#实体首部字段"></a> 实体首部字段</h4><p>实体主体：</p><ul><li><code>Content-Encoding</code>：告诉客户端实体的主体部分选用的内容编码方式；</li><li><code>Content-Language</code>：告诉客户端实体主体使用的自然语言（中文、英文等）；</li><li><code>Content-Length</code>：表明实体主体部分的大小（单位：字节）。对实体主体进行内容编码传输时，不能再使用该首部字段；</li><li><code>Content-Location</code>：报文主体部分相对应的 URI；</li><li><code>Content-MD5</code>：一串由 MD5 算法生成的值。对于检查在传输过程中数据是否被无意的修改非常有用，但不能用于安全目的，因为报文如果被有意的修改，该字段的值也可以计算后作相应修改；</li><li><code>Content-Range</code>：针对范围请求，提供了请求实体在原始实体内的位置（范围），还给出了整个实体的长度；</li><li><code>Content-Type</code>：响应报文中对象的媒体类型。</li></ul><p>缓存相关：</p><ul><li><code>Expires</code>：资源失效日期，当 <code>Cache-Control</code> 有指定 <code>max-age</code> 指令时，会优先处理 <code>max-age</code>；</li><li><code>Last-Modified</code>：资源最终修改时间。</li></ul><p>其他：</p><ul><li><code>Allow</code>：通知客户端可以对特定资源使用那些 HTTP 方法。<code>405 Method Not Allowed</code> 响应中必须包含该首部。</li></ul><h3 id="http-缓存"><a class="markdownIt-Anchor" href="#http-缓存"></a> HTTP 缓存</h3><p>HTTP 缓存按缓存地点可分为浏览器缓存和代理缓存，而根据缓存方式可分为强缓存（也称本地缓存）和协商缓存（也称弱缓存）。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210330143325.webp" alt="640029216-5bad97d9bb48c_fix732" /></p><ul><li>强缓存：强缓存是利用 HTTP 首部字段中的 <code>Expires</code> 和 <code>Cache-Control</code> 两个字段来控制的，用来表示资源的缓存时间。使用普通刷新时会忽略它，使用强制刷新时会带上 <code>Cache-Control:no-cache</code> 和 <code>Pragma:no-cache</code> 首部字段；</li><li>协商缓存：协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问。普通刷新会启用弱缓存，忽略强缓存。协商缓存主要涉及到两组首部字段：<code>Etag</code>和 <code>If-None-Match</code>、<code>Last-Modified</code> 和 <code>If-Modified-Since</code>。两组字段同时使用的情况下，服务器会优先验证 <code>ETag</code>，一致的情况下，才会继续比对 <code>Last-Modified</code>，最后才决定是否返回 <code>304 Not Modified</code>。</li></ul><h3 id="http-安全策略"><a class="markdownIt-Anchor" href="#http-安全策略"></a> HTTP 安全策略</h3><p>CSP(Content-Security-Policy)：实质就是白名单制度，常用于防止跨站点脚本攻击（XSS）。开发者明确告诉客户端，哪些外部资源可以加载和执行。它的实现和执行全部由浏览器完成，开发者只需提供配置。CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。</p><p>启用 CSP 的方式有两种：</p><ul><li>通过 <code>Content-Security-Policy</code> 首部字段；</li><li>通过 HTML 的 <code>&lt;meta&gt;</code> 标签。</li></ul><p>资源加载限制指令：</p><ul><li><code>script-src</code>：外部脚本；</li><li><code>style-src</code>：样式表；</li><li><code>img-src</code>：图像；</li><li><code>media-src</code>：媒体文件（音频和视频）；</li><li><code>font-src</code>：字体文件；</li><li><code>object-src</code>：插件（比如 Flash）；</li><li><code>child-src</code>：框架；</li><li><code>frame-ancestors</code>：嵌入的外部资源（比如 <code>&lt;frame&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code> 和 <code>&lt;applet&gt;</code>） ；</li><li><code>connect-src</code>：HTTP 连接（通过 XHR、WebSockets、EventSource等）；</li><li><code>worker-src</code>：<code>worker</code>脚本；</li><li><code>manifest-src</code>：manifest 文件；</li><li><code>default-src</code>：来设置上面各个选项的默认值，如果同时设置某个单项限制（比如 <code>font-src</code>），则该单项会覆盖默认值。</li></ul><p>URL 限制指令：</p><ul><li><code>frame-ancestors</code>：限制嵌入框架的网页；</li><li><code>base-uri</code>：限制 <code>&lt;base#href&gt;</code>；</li><li><code>form-action</code>：限制 <code>&lt;form#action&gt;</code>。</li></ul><p>其他限制指令：</p><ul><li><code>block-all-mixed-content</code>：HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）；</li><li><code>upgrade-insecure-requests</code>：自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</li><li><code>plugin-types</code>：限制可以使用的插件格式；</li><li><code>sandbox</code>：浏览器行为的限制，比如不能有弹出窗口等；</li><li><code>report-uri</code>：仅记录不阻止 XSS 攻击，参数为一个 URL。该指令使用<code>POST</code>方法，发送一个 JSON 对象报告攻击行为给这个地址。</li></ul><p>指令可用值：</p><ul><li>主机名：<code>example.org</code>，<code>https://example.com:443</code>；</li><li>路径名：<code>example.org/resources/js/</code>；</li><li>通配符：<code>*.example.org</code>，<code>*://*.example.com:*</code>（表示任意协议、任意子域名、任意端口）</li><li>协议名：<code>https:</code>、<code>data:</code>；</li><li>关键字<code>'self'</code>：当前域名，需要加引号</li><li>关键字<code>'none'</code>：禁止加载任何外部资源，需要加引号。</li></ul><p>除了常规值，<code>script-src</code>还可以设置一些特殊值：</p><ul><li><code>'unsafe-inline'</code>：允许执行页面内嵌的 <code>&lt;script&gt;</code> 标签和事件监听函数；</li><li><code>unsafe-eval</code>：允许将字符串当作代码执行，比如使用 <code>eval</code>、<code>setTimeout</code>、<code>setInterval</code> 和 <code>Function</code> 等函数；</li><li>nonce 值：每次HTTP回应给出一个授权 token，页面内嵌脚本必须有这个 token，才会执行；</li><li>hash 值：列出允许执行的脚本代码的 Hash 值，页面内嵌脚本的哈希值只有吻合的情况下，才能执行。</li></ul><h3 id="http-持久连接"><a class="markdownIt-Anchor" href="#http-持久连接"></a> HTTP 持久连接</h3><p>HTTP1.0 和HTTP1.1 都不支持持久性的链接，不过为了解决这个问题，HTTP1.1 提出了 keep-alive（HTTP connection reuse）的方法，在一定时间内保持连接状态。</p><h3 id="http-状态管理"><a class="markdownIt-Anchor" href="#http-状态管理"></a> HTTP 状态管理</h3><p>由于 HTTP 本身是无状态的，为了实现类似保存用户登录状态的功能，引入了 Cookie 技术，通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。 Cookie 会根据服务端发送的 <code>Set-Cookie</code> 首部字段信息，通知客户端保存 Cookie，下次客户端发送请求时，会自动在请求报文内加入 Cookie。</p><p>Cookie 主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）；</li><li>个性化设置（如用户自定义设置、主题等）；</li><li>浏览器行为跟踪（如跟踪分析用户行为等）。</li></ul><h2 id="2-https"><a class="markdownIt-Anchor" href="#2-https"></a> 2. HTTPS</h2><p>超文本传输安全协议，HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包，主要作用是在不安全的网络上创建一个安全信道，并可在使用适当的加密包和服务器证书可被验证且可被信任时，对窃听和中间人攻击提供合理的防护。</p><h3 id="https-协议的工作原理"><a class="markdownIt-Anchor" href="#https-协议的工作原理"></a> HTTPS 协议的工作原理</h3><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210415154801.png" alt="16a45839ceacbb52" /></p><ol><li>Client 发起一个HTTPS 的请求，一般是通过 443 端口；</li><li>Server 把事先配置好的公钥证书（public key certificate）返回给客户端；</li><li>Client 验证公钥证书：比如是否在有效期内，证书的用途是不是匹配 Client 请求的站点，是不是在 CRL 吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的 Root 证书或者 Client 内置的 Root 证书）。如果验证通过则继续，不通过则显示警告信息；</li><li>Client 使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给 Server；</li><li>Server 使用自己的私钥（private key）解密这个消息，得到对称密钥。至此，Client 和 Server 双方都持有了相同的对称密钥；</li><li>Server 使用对称密钥加密“明文内容 A”，发送给 Client；</li><li>Client 使用对称密钥解密响应的密文，得到“明文内容 A”；</li><li>Client 再次发起 HTTPS 的请求，使用对称密钥加密请求的“明文内容 B”，然后 Server 使用对称密钥解密密文，得到“明文内容B”。</li></ol><h3 id="https协议的缺点"><a class="markdownIt-Anchor" href="#https协议的缺点"></a> HTTPS协议的缺点</h3><ul><li>HTTPS 握手阶段比较费时，会使页面加载时间延长 50%；</li><li>HTTPS 缓存不如 HTTP 高效，会增加数据开销；</li><li>增加 10%~20% 的耗电；</li><li>SSL证书成本较高等。</li></ul><h2 id="3-http-20"><a class="markdownIt-Anchor" href="#3-http-20"></a> 3. HTTP 2.0</h2><p>HTTP/2 没有改动 HTTP 的应用语义。 HTTP 方法、状态代码、URI 和标头字段等核心概念一如往常。 不过，HTTP/2 修改了数据格式化（分帧）以及在客户端与服务器间传输的方式。HTTP/2 的主要目标是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。</p><h3 id="二进制分帧binary-framing"><a class="markdownIt-Anchor" href="#二进制分帧binary-framing"></a> 二进制分帧（Binary Framing）</h3><p>HTTP/2 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210415145432.svg" alt="binary_framing_layer01" /></p><p>新的二进制分帧机制改变了客户端与服务器之间交换数据的方式。HTTP/2 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。为了说明这个过程，我们需要了解 HTTP/2 的三个概念:</p><ul><li><em>数据流</em>：已建立的连接内的双向字节流，可以承载一条或多条消息；</li><li><em>消息</em>：与逻辑请求或响应消息对应的完整的一系列帧；</li><li><em>帧</em>：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。</li></ul><p>这些概念的关系总结如下:</p><ul><li>所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流；</li><li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息；</li><li>每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧；</li><li>帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li></ul><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210415152049.svg" alt="streams_messages_frames01" /></p><h3 id="多路复用-multiplexing"><a class="markdownIt-Anchor" href="#多路复用-multiplexing"></a> <strong>多路复用 (Multiplexing)</strong></h3><p>在 HTTP/1.x 中，如果客户端要想发起多个并行请求以提升性能，则必须使用多个 TCP 连接。 这是 HTTP/1.x 交付模型的直接结果，该模型可以保证每个连接每次只交付一个响应（响应排队）。 更糟糕的是，这种模型也会导致队首阻塞，从而造成底层 TCP 连接的效率低下。除此之外，浏览器客户端在同一时间，针对同一域名下的请求有一定数量的限制（跟具体浏览器相关），超过限制数目的请求会被阻塞，这也是为何一些站点会有多个静态资源 CDN 域名的原因之一（即域名分片）。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210415152252.svg" alt="multiplexing01" /></p><p>多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求/响应消息。HTTP/2 中新的二进制分帧层突破了这些限制，实现了完整的请求和响应复用：客户端和服务器可以将 HTTP 消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。同时也解决了 HTTP/1.x 中存在的队首阻塞问题，也消除了并行处理和发送请求及响应时对多个连接的依赖，其结果就是应用速度更快、开发更简单、部署成本更低。</p><p>HTTP 2.0 连接都是持久化的，而且客户端与服务器之间也只需要一个连接（每个域名一个连接）即可。</p><h3 id="头部压缩header-compression"><a class="markdownIt-Anchor" href="#头部压缩header-compression"></a> 头部压缩（Header Compression）</h3><p>HTTP/2 使用 Encoder 来减少需要传输的 Header 大小，通讯双方各自缓存一份头部字段表，既避免了重复 Header 的传输，又减小了需要传输的大小。HTTP/2 使用 HPACK 压缩格式压缩请求和响应标头元数据，这种格式采用两种简单但是强大的技术：</p><ul><li>通过静态霍夫曼代码对传输的标头字段进行编码，从而减小了各个传输的大小；</li><li>客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表（换句话说，它可以建立一个共享的压缩上下文），此列表随后会用作参考，对之前传输的值进行有效编码。</li></ul><p>利用霍夫曼编码，可以在传输时对各个值进行压缩，而利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的标头键值对。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210415154328.svg" alt="header_compression01" /></p><p>作为一种进一步优化方式，HPACK 压缩上下文包含一个静态表和一个动态表: 静态表在规范中定义，并提供了一个包含所有连接都可能使用的常用 HTTP 标头字段（例如，有效标头名称）的列表；动态表最初为空，将根据在特定连接内交换的值进行更新。 因此，为之前未见过的值采用静态 Huffman 编码，并替换每一侧静态表或动态表中已存在值的索引，可以减小每个请求的大小。</p><h3 id="请求优先级request-priorities"><a class="markdownIt-Anchor" href="#请求优先级request-priorities"></a> 请求优先级（Request Priorities）</h3><p>HTTP/2 标准允许每个数据流都有一个关联的权重和依赖关系，同时允许客户端随时更新这些优先级：</p><ul><li>可以向每个数据流分配一个介于 1 至 256 之间的整数。</li><li>每个数据流与其他数据流之间可以存在显式依赖关系。</li></ul><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210415153135.svg" alt="stream_prioritization01" /></p><p>数据流依赖关系和权重的组合让客户端可以构建和传递“优先级树”，表明它倾向于如何接收响应。 反过来，服务器可以使用此信息通过控制 CPU、内存和其他资源的分配设定数据流处理的优先级，在资源数据可用之后，带宽分配可以确保将高优先级响应以最优方式传输至客户端。</p><p>HTTP/2 内的数据流依赖关系通过将另一个数据流的唯一标识符作为父项引用进行声明；如果忽略标识符，相应数据流将依赖于“根数据流”。 声明数据流依赖关系指出，应尽可能先向父数据流分配资源，然后再向其依赖项分配资源。共享相同父项的数据流（即，同级数据流）应按其权重比例分配资源。</p><h3 id="服务端推送server-push"><a class="markdownIt-Anchor" href="#服务端推送server-push"></a> 服务端推送（Server Push）</h3><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210415153528.svg" alt="push01" /></p><p>服务器可以对一个客户端请求发送多个响应，服务器向客户端推送资源无需客户端明确地请求。并且，服务端推送能把客户端所需要的资源伴随着 index.html 一起发送到客户端，省去了客户端重复请求的步骤。推送资源可以进行以下处理:</p><ul><li>由客户端缓存</li><li>在不同页面之间重用</li><li>与其他资源一起复用</li><li>由服务器设定优先级</li><li>被客户端拒绝</li></ul><p>所有服务器推送数据流都由 <code>PUSH_PROMISE</code> 帧发起，表明了服务器向客户端推送所述资源的意图，并且需要先于请求推送资源的响应数据传输。 这种传输顺序非常重要：客户端需要了解服务器打算推送哪些资源，以免为这些资源创建重复请求。 满足此要求的最简单策略是先于父响应（即，<code>DATA</code> 帧）发送所有 <code>PUSH_PROMISE</code> 帧，其中包含所承诺资源的 HTTP 标头。在客户端接收到 <code>PUSH_PROMISE</code> 帧后，它可以根据自身情况选择拒绝数据流（通过 <code>RST_STREAM</code> 帧）。 （例如，如果资源已经位于缓存中，便可能会发生这种情况。） 相比之下，使用资源内联（一种受欢迎的 HTTP/1.x“优化”）等同于“强制推送”: 客户端无法选择拒绝、取消或单独处理内联的资源。</p><h1 id="浏览器基础"><a class="markdownIt-Anchor" href="#浏览器基础"></a> 浏览器基础</h1><h2 id="1-浏览器工作原理"><a class="markdownIt-Anchor" href="#1-浏览器工作原理"></a> 1. 浏览器工作原理</h2><p>浏览器和服务器建立请求阶段的路由和响应暂时忽略，着重理解浏览器的解析和渲染部分。</p><h3 id="14kb-规则"><a class="markdownIt-Anchor" href="#14kb-规则"></a> 14kb 规则</h3><p>第一个响应包是14kb大小。这是慢开始的一部分，慢开始是一种均衡网络连接速度的算法。慢开始逐渐增加发送数据的数量直到达到网络的最大带宽。在 TCP 慢开始中，在收到初始包之后, 服务器会将下一个包的大小加倍到大约 28kb。 后续的包依次是前一个包大小的二倍直到达到预定的阈值，或者遇到拥塞。因此 web 性能优化需要将此初始 14Kb 响应作为优化重点。</p><h3 id="解析"><a class="markdownIt-Anchor" href="#解析"></a> 解析</h3><p>即使请求页面的 HTML 大于初始的 14kb 数据包，浏览器也将开始解析并尝试根据其拥有的数据进行渲染。这就是为什么在前 14kb 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。</p><ol><li>构建 DOM 树（<strong>第一步</strong>）：HTML 解析涉及到 tokenization 和树的构造。当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 <code>&lt;script&gt;</code> 标签（特别是没有 async 或者 defer 属性）会阻塞渲染并停止 HTML 的解析；<ul><li>预加载扫描器：浏览器使用主线程构建 DOM 树，此时预加载扫描仪将解析可用的内容并请求高优先级资源，如 CSS、JavaScript 和 web 字体，不必等到解析器找到对外部资源的引用后才发起请求。它将在后台检索资源，以便在主 HTML 解析器到达请求的资源时，它们可能已经在运行，或者已经被下载。预加载扫描仪提供的优化减少了阻塞；</li></ul></li><li>构建 CSSOM 树（<strong>第二步</strong>）：CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树，它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树；</li><li>其他过程：当 CSS 被解析并创建 CSSOM 时，其他资源，包括 JavaScript 文件正在下载（预加载扫描器）。JavaScript 被解释、编译、解析和执行，脚本被解析为抽象语法树并将其传递到解释器中；除此之外还包括构建辅助功能（accessibility ）树。</li></ol><h3 id="渲染"><a class="markdownIt-Anchor" href="#渲染"></a> 渲染</h3><p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个 Render 树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。</p><ol><li>样式 Style（<strong>第三步</strong>）：将 DOM 和 CSSOM 组合成一个 Render 树（渲染树），计算样式树或渲染树从 DOM 树的根开始构建，遍历每个可见节点。对于任何具有 <code>display: none</code> 样式的结点，将不会出现在 Render 树上，与之相对应的，具有 <code>visibility: hidden</code> 的节点则会出现在 Render 树上。Render 树保存所有具有内容和计算样式的可见节点——将所有相关样式匹配到 DOM 树中的每个可见节点，并根据 CSS 级联确定每个节点的计算样式；</li><li>布局 Layout（<strong>第四步</strong>）：构建渲染树后，开始布局。第一次确定节点的大小和位置称为布局。随后对节点大小和位置的重新计算称为回流。布局是确定呈现树中所有节点的宽度、高度和位置，以及确定页面上每个对象的大小和位置的过程。回流是对页面的任何部分或整个文档的任何后续大小和位置的确定；</li><li>绘制 Paint（<strong>最终</strong>）：最后一步是将各个节点绘制到屏幕上，第一次出现的节点称为（FMP）。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个框转换为屏幕上的实际像素。绘画包括将元素的每个可视部分绘制到屏幕上，包括文本、颜色、边框、阴影和替换的元素（如按钮和图像）。绘制可以将布局树中的元素分解为多个层，将内容提升到 GPU上 的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。层确实可以提高性能，但是它以内存管理为代价，因此不应作为web性能优化策略的一部分过度使用；</li><li>合成 Compositing：为了确保重绘的速度比初始绘制的速度更快，屏幕上的绘图通常被分解成数层，当文档的各个部分以不同的层绘制，相互重叠时，必须进行合成，以确保它们以正确的顺序绘制到屏幕上，并正确显示内容。</li></ol><h3 id="补充性能指标"><a class="markdownIt-Anchor" href="#补充性能指标"></a> 补充：性能指标</h3><ul><li>FP（First Paint）：首次绘制，代表浏览器第一次向屏幕传输像素的时间，也就是页面在屏幕上首次发生视觉变化的时间；</li><li>FCP（First Contentful Paint）：首次内容绘制，代表浏览器第一次向屏幕绘制内容，只有首次绘制文本、图片（包含背景图）、非白色的<code>canvas</code>或 SVG 时才被算作FCP；</li><li>FMP（First Meaningful Paint）：首次有效绘制，表示页面的“主要内容”开始出现在屏幕上的时间点。它是我们测量用户加载体验的主要指标；</li><li>LCP（Largest Contentful Paint）：表示可视区“内容”最大的可见元素开始出现在屏幕上的时间点；</li><li>TTI（Time to Interactive）：可交互时间，表示网页第一次完全达到可交互状态的时间点，可交互状态指的是页面上的UI组件是可以交互的。TTI 可以让我们了解我们的产品需要多久可以真正达到“可用”的状态；</li><li>FCI（First CPU Idle）： 第一次CPU空闲，是对 TTI 的一种补充，TTI 告诉我们页面什么时候完全达到可用，FCI 告诉我们浏览器第一次可以响应用户输入是什么时候。</li></ul><h2 id="2-本地存储"><a class="markdownIt-Anchor" href="#2-本地存储"></a> 2. 本地存储</h2><p>Cookie、sessionStorage、localStorage 的异同：</p><ul><li>首先三者都是保存在浏览器端，并且是同源的 ；</li><li>Cookie：可以在浏览器和服务器端来回传递，存储容量小，只有大约 4K 左右；</li><li>sessionStorage：本身就是一个会话过程，关闭浏览器后消失，session 为一个会话，当页面不同即使是同一页面打开两次，也被视为同一次会话；</li><li>localStorage：同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效。</li></ul><h2 id="3-xss-和-csrf"><a class="markdownIt-Anchor" href="#3-xss-和-csrf"></a> 3. XSS 和 CSRF</h2><ul><li>XSS(Cross-Site Scripting)：跨站脚本攻击，攻击者通过向页面注入代码，达到窃取信息等目的，本质是数据被当作程序执行，常使用输入检查/转义或 CSP 内容安全策略的方法避免攻击；</li><li>CSRF(Cross-Site Request Forgery)：跨站请求伪造，与 XSS 不同的是，XSS 是攻击者直接对我们的网站 A 进行注入攻击，CSRF 是通过网站 B 对我们的网站 A 进行伪造请求。常使用同源检测、Samesite Cookie、Token 验证等方式来避免攻击。</li></ul><h2 id="4-corscross-origin-resource-sharing"><a class="markdownIt-Anchor" href="#4-corscross-origin-resource-sharing"></a> 4. CORS（Cross-Origin Resource Sharing）</h2><p>跨域资源共享，是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它源（域，协议和端口），这样浏览器就可以访问加载这些资源。跨源资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//cors_principle.png" alt="cors_principle" /></p><ul><li>简单请求：不会触发 CORS 预检请求的请求称为简单请求，若请求满足所有下述条件，则该请求可视为“简单请求”：<ul><li>使用下列方法之一：<code>GET</code>、<code>HEAD</code>、<code>POST</code>；</li><li>允许人为设置的字段：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code> 和 <code>Content-Type</code>；</li><li><code>Content-Type</code> 仅允许 <code>text/plain</code>、<code>multipart/form-data</code> 或 <code>application/x-www-form-urlencoded</code>；</li><li>请求中没有在任何 <code>XMLHttpRequest.upload</code> 对象上注册事件侦听器；</li><li>请求中没有使用 <code>ReadableStream</code> 对象。</li></ul></li><li>预检请求：需预检的请求要求必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。预检请求的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。</li><li>JSONP：解决跨域问题的另一种方法，通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性请求服务端返回数据和回调函数，浏览器执行后即可拿到数据。</li></ul><h2 id="5-性能优化"><a class="markdownIt-Anchor" href="#5-性能优化"></a> 5. 性能优化</h2><p>xxx</p><h1 id="前端语言基础"><a class="markdownIt-Anchor" href="#前端语言基础"></a> 前端语言基础</h1><h2 id="1-html-基础"><a class="markdownIt-Anchor" href="#1-html-基础"></a> 1. HTML 基础</h2><h3 id="doctype-的作用"><a class="markdownIt-Anchor" href="#doctype-的作用"></a> Doctype 的作用</h3><p>Doctype 声明于文档最前面，告诉浏览器以何种方式来渲染页面，分为严格模式和混杂模式。</p><ul><li>严格模式：排版和 JS 的运作模式以该浏览器支持的最高标准运行；</li><li>混杂模式：向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。</li></ul><h2 id="2-css-基础"><a class="markdownIt-Anchor" href="#2-css-基础"></a> 2. CSS 基础</h2><h3 id="重绘和重排"><a class="markdownIt-Anchor" href="#重绘和重排"></a> 重绘和重排</h3><p>DOM 的变化影响到了元素的几何属性比如宽高，浏览器重新计算元素的几何属性，其他元素的几何属性也会受到影响，浏览器需要重新构造渲染树，这个过程称之为重排，浏览器将受到影响的部分重新绘制在屏幕上的过程称为重绘。重排一定导致重绘，重绘不一定导致重排，引起重排重绘的原因有：</p><ul><li>添加或者删除可见的 DOM 元素；</li><li>元素尺寸位置的改变；</li><li>浏览器页面初始化；</li><li>浏览器窗口大小发生改变。</li></ul><h3 id="bfcblock-fomatting-context"><a class="markdownIt-Anchor" href="#bfcblock-fomatting-context"></a> BFC（Block Fomatting Context）</h3><p>BFC，块级格式化上下文，用于解决浮动元素溢出和 margin 重叠的问题，常见的创建 BFC 的方式有：</p><ul><li>浮动元素（float 不为 none）；</li><li>绝对定位元素；</li><li>行内块元素；</li><li>表格单元格、表格标题、匿名表格单元格元素；</li><li>overflow 计算值不为 visible 的块元素；</li><li>display 值为 flow-root 的元素等。</li></ul><h3 id="css-动画"><a class="markdownIt-Anchor" href="#css-动画"></a> CSS 动画</h3><ul><li>transition 和 animation 的区别：animation 和 transition 大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是 transition 需要触发一个事件才能改变属性，而 animation 不需要触发任何事件的情况下才会随时间改变属性值，并且 transition 为 2 帧，从from … to，而 animation 可以逐帧。</li></ul><h2 id="3javascript-基础"><a class="markdownIt-Anchor" href="#3javascript-基础"></a> 3.JavaScript 基础</h2><h3 id="js-代码执行过程"><a class="markdownIt-Anchor" href="#js-代码执行过程"></a> JS 代码执行过程</h3><p>JS 作为一种解释型语言，代码执行总共包含两个阶段：解释阶段和执行阶段。</p><ul><li><p>解释阶段：</p><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定（需要注意的是，作用域链在创建时确定而非执行时）</li></ul><p>执行阶段：</p><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul></li></ul><h3 id="事件循环event-loop"><a class="markdownIt-Anchor" href="#事件循环event-loop"></a> 事件循环（Event Loop）</h3><p>JavaScript 引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，JavaScript 会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕，  主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环”的原因。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210319093824.png" alt="v2-da078fa3eadf3db4bf455904ae06f84b_720w" /></p><p>实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）：</p><ul><li>微任务：<ul><li><code>new Promise()</code>；</li><li><code>new MutaionObserver()</code>；</li><li><code>process.nextTick()</code> （Node，实际上不属于事件循环）。</li></ul></li><li>宏任务：<ul><li>script(主程序代码)；</li><li><code>setInterval()；</code></li><li><code>setTimeout()；</code></li><li><code>setImmediate()</code>（Node）；</li><li>I/O；</li><li>UI交互事件。</li></ul></li></ul><p>二者的优先顺序为：当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。</p><p>在事件循环中，每进行一次循环操作称为 tick，每一次 tick 的任务处理模型是比较复杂的，但关键步骤如下：</p><ul><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ul><h4 id="node-环境下的事件循环"><a class="markdownIt-Anchor" href="#node-环境下的事件循环"></a> Node 环境下的事件循环</h4><p>在 node 中，事件循环表现出的状态与浏览器中大致相同。不同的是 node 中有一套自己的模型。node 中事件循环的实现是依靠的 libuv 引擎。我们知道 node 选择 chrome v8 引擎作为 JS 解释器，v8 引擎将 JS 代码分析后去调用对应的 node  api，而这些 api 最后则由 libuv 引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。因此实际上 node 中的事件循环存在于 libuv 引擎中。</p><figure class="highlight smali"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs smali">   ┌───────────────────────┐<br>┌─&gt;│        timers         │<br>│  └──────────┬────────────┘<br>│  ┌──────────┴────────────┐<br>│  │     I/O callbacks     │<br>│  └──────────┬────────────┘<br>│  ┌──────────┴────────────┐<br>│  │     idle, prepare     │<br>│  └──────────┬────────────┘      ┌───────────────┐<br>│  ┌──────────┴────────────┐      │   incoming:   │<br>│  │         poll          │&lt;--connections---     │<br>│  └──────────┬────────────┘      │   data, etc.  │<br>│  ┌──────────┴────────────┐      └───────────────┘<br>│  │       <span class="hljs-built_in"> check </span>         │<br>│  └──────────┬────────────┘<br>│  ┌──────────┴────────────┐<br>└──┤    close callbacks    │<br>   └───────────────────────┘<br></code></pre></td></tr></table></figure><p>这些阶段大致的功能如下：</p><ul><li>timers：这个阶段执行定时器队列中的回调如 <code>setTimeout()</code> 和 <code>setInterval()</code>；</li><li>I/O callbacks：这个阶段执行几乎所有的回调。但是不包括 close 事件，定时器和 <code>setImmediate()</code> 的回调；</li><li>idle, prepare：这个阶段仅在内部使用，可以不必理会；</li><li>poll：等待新的I/O事件，node在一些特殊情况下会阻塞在这里；</li><li>check：<code>setImmediate()</code> 的回调会在这个阶段执行；</li><li>close callbacks：例如 <code>socket.on('close', ...)</code> 这种close事件的回调。</li></ul><h3 id="事件流event-flow"><a class="markdownIt-Anchor" href="#事件流event-flow"></a> 事件流（Event Flow）</h3><p>事件流描述的是从页面中接收事件的顺序，早期的 IE 和 Netscape 提出了完全相反的事件流概念，IE 事件流是事件冒泡，而 Netscape 的事件流就是事件捕获。事件冒泡（事件委托就是利用冒泡实现的），即从下至上，从目标触发的元素逐级向上传播，直到 window 对象；事件捕获，即从 document 逐级向下传播到目标元素。目前主要有 DOM0~3 总共4个级别。</p><p>事件流的三个阶段：</p><ul><li><p>事件捕获阶段</p></li><li><p>处于目标阶段</p></li><li><p>事件冒泡阶段</p></li></ul><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210410141124.jpg" alt="eventflow" /></p><ul><li>DOM0：使用<code>elem.onXXX</code>的形式绑定事件；</li><li>DOM2：DOM2级事件规定的事件流包括三个阶段： （1）事件捕获阶段 （2）处于目标阶段 （3）事件冒泡阶段，通过2个方法来绑定事件：<code>addEventListener()</code> 和 <code>removeEventListener()</code>。</li></ul><p>使用事件委托的时候需要注意，以下多个事件不支持冒泡：</p><p>focus、blur、mouseenter、mouseleave、load、unload、resize</p><h3 id="垃圾回收"><a class="markdownIt-Anchor" href="#垃圾回收"></a> 垃圾回收</h3><p>垃圾回收的方法：标记清除、计数引用。</p><ul><li>标记清除：这是最常见的垃圾回收方式，当变量进入环境时，就标记这个变量为”进入环境“,从逻辑上讲，永远不能释放进入环境的变量所占的内存，只要执行流程进入相应的环境，就可能用到他们。当离开环境时，就标记为离开环境。垃圾回收器在运行的时候会给存储在内存中的变量都加上标记（所有都加），然后去掉环境变量中的变量，以及被环境变量中的变量所引用的变量（条件性去除标记），删除所有被标记的变量，删除的变量无法在环境变量中被访问所以会被删除，最后垃圾回收器，完成了内存的清除工作，并回收他们所占用的内存。</li><li>计数引用：另一种不太常见的方法就是引用计数法，引用计数法的意思就是每个值没引用的次数，当声明了一个变量，并用一个引用类型的值赋值给改变量，则这个值的引用次数为1,；相反的，如果包含了对这个值引用的变量又取得了另外一个值，则原先的引用值引用次数就减1，当这个值的引用次数为0的时候，说明没有办法再访问这个值了，因此就把所占的内存给回收进来，这样垃圾收集器再次运行的时候，就会释放引用次数为0的这些值。</li></ul><p>JavaScript 常见回收规则如下：</p><ol><li>全局变量不会被回收；</li><li>局部变量会被回收；</li><li>只要被另外一个作用域所引用就不会被回收 （闭包）。</li></ol><h3 id="模块化"><a class="markdownIt-Anchor" href="#模块化"></a> 模块化</h3><ul><li>CommonJS：CommonJS是服务器模块的规范，Node.js采用了这个规范。根据 CommonJS 规范，一个单独的文件就是一个模块，每一个模块都是一个单独的作用域，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</li><li>AMD（Asynchronous Module Definition）：AMD 规范加载模块是异步的，并允许函数回调，不必等到所有模块都加载完成，后续操作可以正常执行。AMD 中，使用 require 获取依赖模块，使用 exports 导出 API。</li><li>CMD（Common Module Definition）：CMD规范和AMD类似，都主要运行于浏览器端，写法上看起来也很类似。主要是区别在于模块初始化时机：AMD中只要模块作为依赖时，就会加载并初始化，而CMD中，模块作为依赖且被引用时才会初始化，否则只会加载；CMD 推崇依赖就近，AMD 推崇依赖前置。</li><li>UMD（Universal Module Definition）：UMD 是AMD 和 CommonJS 的糅合。UMD 先判断是否支持 Node.js 的模块（exports）是否存在，存在则使用 Node.js 模块模式。再判断是否支持 AMD（define 是否存在），存在则使用 AMD 方式加载模块。</li></ul><h3 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h3><p>由于 JavaScript 是一门基于原型的语言，因此无法直接实现传统意义上的继承。</p><ul><li>原型链继承：将父类的实例作为子类的原型。<ul><li>缺点：父类的引用属性会被所有子类实例共享。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">SubType.prototype = <span class="hljs-keyword">new</span> SuperType();<br>SubType.prototype.constructor = SubType;<br></code></pre></td></tr></table></figure><ul><li>构造函数继承：将父类构造函数的内容复制给了子类的构造函数。这是所有继承中唯一一个不涉及到prototype的继承。<ul><li>优点：父类的引用属性不会被共享且子类构建实例时可以向父类传递参数。</li><li>缺点：父类的方法不能复用，子类实例的方法每次都是单独创建的。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">SuperType.call(SubType);<br></code></pre></td></tr></table></figure><ul><li>组合继承：原型式继承和构造函数继承的组合，兼具了二者的优点。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SuperType</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;parent&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><br>SuperType.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is parent&#x27;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubType</span>(<span class="hljs-params"></span>) </span>&#123;<br>    SuperType.call(<span class="hljs-built_in">this</span>) <span class="hljs-comment">// 第二次调用SuperType</span><br>&#125;<br><br>SubType.prototype = <span class="hljs-keyword">new</span> SuperType() <span class="hljs-comment">// 第一次调用SuperType</span><br></code></pre></td></tr></table></figure><ul><li>原型式继承：原型式继承使用一个空对象作为代理，本质上是对参数对象的一个浅复制。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>)</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>  F.prototype = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-keyword">var</span> person = &#123;<br>    name: <span class="hljs-string">&quot;Nicholas&quot;</span>,<br>    friends: [<span class="hljs-string">&quot;Shelby&quot;</span>, <span class="hljs-string">&quot;Court&quot;</span>, <span class="hljs-string">&quot;Van&quot;</span>]<br>&#125;;<br><br><span class="hljs-keyword">var</span> anotherPerson = object(person);<br>anotherPerson.name = <span class="hljs-string">&quot;Greg&quot;</span>;<br>anotherPerson.friends.push(<span class="hljs-string">&quot;Rob&quot;</span>);<br><br><span class="hljs-keyword">var</span> yetAnotherPerson = object(person);<br>yetAnotherPerson.name = <span class="hljs-string">&quot;Linda&quot;</span>;<br>yetAnotherPerson.friends.push(<span class="hljs-string">&quot;Barbie&quot;</span>);<br>alert(person.friends);   <span class="hljs-comment">//&quot;Shelby,Court,Van,Rob,Barbie&quot;</span><br></code></pre></td></tr></table></figure><ul><li>寄生式继承：使用原型式继承获得一个目标对象的浅复制，然后增强这个浅复制的能力。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createAnother</span>(<span class="hljs-params">original</span>)</span>&#123; <br>    <span class="hljs-keyword">var</span> clone=object(original);    <span class="hljs-comment">//通过调用函数创建一个新对象</span><br>    clone.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;      <span class="hljs-comment">//以某种方式来增强这个对象</span><br>        alert(<span class="hljs-string">&quot;hi&quot;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> clone;                  <span class="hljs-comment">//返回这个对象</span><br>&#125;<br><br><span class="hljs-keyword">var</span> person = &#123;<br>    name: <span class="hljs-string">&quot;Nicholas&quot;</span>,<br>    friends: [<span class="hljs-string">&quot;Shelby&quot;</span>, <span class="hljs-string">&quot;Court&quot;</span>, <span class="hljs-string">&quot;Van&quot;</span>]<br>&#125;;<br><br><span class="hljs-keyword">var</span> anotherPerson = createAnother(person);<br>anotherPerson.sayHi(); <span class="hljs-comment">//&quot;hi&quot;</span><br></code></pre></td></tr></table></figure><ul><li>寄生组合继承：解决组合继承会两次调用父类的构造函数造成浪费的缺点。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> prototype = object(superType.prototype); <span class="hljs-comment">// 创建了父类原型的浅复制</span><br>    prototype.constructor = subType;             <span class="hljs-comment">// 修正原型的构造函数</span><br>    subType.prototype = prototype;               <span class="hljs-comment">// 将子类的原型替换为这个原型</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SuperType</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.colors = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>];<br>&#125;<br><br>SuperType.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-built_in">this</span>.name);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubType</span>(<span class="hljs-params">name, age</span>)</span>&#123;<br>    SuperType.call(<span class="hljs-built_in">this</span>, name);<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费</span><br>inheritPrototype(SubType, SuperType);<br>SubType.prototype.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-built_in">this</span>.age);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步</h3><h4 id="promise"><a class="markdownIt-Anchor" href="#promise"></a> Promise</h4><p>首先通过一个例子直观对比传统回调和使用 Promise 的区别：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传统方式，给异步函数传入回调函数</span><br><span class="hljs-function"><span class="hljs-title">someFunction</span>(<span class="hljs-params">someParams, successCallback, failureCallback</span>)</span> &#123;<br><br><span class="hljs-comment">// 使用 Promise，在 then 中执行回调</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// ... some code</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 异步操作成功 */</span>) &#123;<br>    resolve(value);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    reject(error);<br>  &#125;<br>&#125;).then(successCallback, failureCallback);<br></code></pre></td></tr></table></figure><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210427153813.png" alt="promises" /></p><p>Promise 内部维护了两个状态变化过程：<code>pending -&gt; fulfilled</code> 和 <code>pending -&gt; rejected</code>，代表了异步事件的结果。状态发生变化后便根据最终状态决定执行 <code>successCallback</code> 或者 <code>failureCallback</code>。可以用 <code>promise.then()</code>，<code>promise.catch()</code> 和 <code>promise.finally()</code> 这些方法将目标操作与一个已确定状态的 Promise 关联起来。这些方法还会返回一个新生成的 Promise 对象，因此可以实现链式调用，从而避免了传统回调函数方式产生的回调地狱问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myPromise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;foo&#x27;</span>);<br>  &#125;, <span class="hljs-number">300</span>);<br>&#125;);<br><br><span class="hljs-comment">// 需要及时处理错误的情况</span><br>myPromise<br>  .then(handleResolvedA, handleRejectedA)<br>  .then(handleResolvedB, handleRejectedB)<br>  .then(handleResolvedC, handleRejectedC);<br><br><span class="hljs-comment">// 不需要及时处理的情况</span><br>myPromise<br>  .then(handleResolvedA)<br>  .then(handleResolvedB)<br>  .then(handleResolvedC)<br>  .catch(handleRejectedAny);<br></code></pre></td></tr></table></figure><p>链式调用中的 Promise 像是一个栈，每个都必须从顶端被弹出。链式调用中的第一个 Promise 是嵌套最深的一个，也将是第一个被弹出的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">(promise D, (promise C, (promise B, (promise A))))<br></code></pre></td></tr></table></figure><p>方法：</p><ul><li><code>Promise.all(iterable)</code>：将多个 Promise 实例，包装成一个新的 Promise 实例，状态由所有实例决定：只要参数实例有一个变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态；如果所有参数实例都变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；</li><li><code>Promise.any(iterable)</code>：将多个 Promise 实例，包装成一个新的 Promise 实例，只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态；</li><li><code>Promise.race(iterable)</code>：将多个 Promise 实例，包装成一个新的 Promise 实例，状态由任一实例决定；</li><li><code>Promise.allSettled(iterable)</code>：将多个 Promise 实例，包装成一个新的 Promise 实例，且只有等到所有这些参数实例都返回结果，不管是<code>fulfilled</code>还是<code>rejected</code>，包装实例才会结束；</li><li><code>Promise.reject(reason)</code>：返回一个给定原因的状态为 <code>rejected</code> 的 Promise；</li><li><code>Promise.resolve(value)</code>：返回一个给定值的状态为 <code>fulfilled</code> 的 Promise。</li></ul><h4 id="generator"><a class="markdownIt-Anchor" href="#generator"></a> Generator</h4><p>JavaScript 的 Generator（尤其是与 Promises 结合使用时）是一种非常强大的异步编程工具，因为它们可以缓解回调问题，例如回调地狱和控制反转。</p><p>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器（ iterator ）对象。当这个迭代器的 <code>next()</code> 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现 <code>yield</code> 的位置为止，<code>yield</code> 后紧跟迭代器要返回的值。或者如果用的是 <code>yield*</code>，则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</p><p>当在生成器函数中显式 <code>return</code>时，会导致生成器立即变为完成状态，即调用 <code>next()</code> 方法返回的对象的 <code>done</code>为 <code>true</code>。如果 <code>return</code>后面跟了一个值，那么这个值会作为当前调用 <code>next()</code> 方法返回的 <code>value</code> 值。</p><p><code>next()</code> 方法返回一个对象，这个对象包含两个属性：<code>value</code> 和 <code>done</code>，<code>value</code> 属性表示本次 <code>yield</code> 表达式的返回值，done 属性为布尔类型，表示生成器后续是否还有 <code>yield</code> 语句，即生成器函数是否已经执行完毕并返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">generator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> gen = generator();<br><br><span class="hljs-built_in">console</span>.log(gen.next().value); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(gen.next().value); <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(gen.next().value); <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(generator().next().value); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(generator().next().value); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p><code>for...of</code>循环可以自动遍历 Generator 函数运行时生成的<code>Iterator</code>对象，且此时不再需要调用<code>next</code>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> foo()) &#123;<br>  <span class="hljs-built_in">console</span>.log(v);<br>&#125;<br><span class="hljs-comment">// 1 2 3</span><br></code></pre></td></tr></table></figure><p>需要注意，一旦<code>next</code>方法的返回对象的<code>done</code>属性为<code>true</code>，<code>for...of</code>循环就会中止，且不包含该返回对象，所以上面代码的<code>return</code>语句返回值不包括在<code>for...of</code>循环之中。</p><p>可以利用这个特性给对象添加遍历器接口，使得对象可以通过 <code>for...of</code> 遍历：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">objectEntries</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> propKeys = <span class="hljs-built_in">Reflect</span>.ownKeys(obj);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> propKey <span class="hljs-keyword">of</span> propKeys) &#123;<br>    <span class="hljs-keyword">yield</span> [propKey, obj[propKey]];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> jane = &#123; <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> &#125;;<br><br><span class="hljs-comment">// 直接调用函数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> objectEntries(jane)) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;<br><span class="hljs-comment">// first: Jane</span><br><span class="hljs-comment">// last: Doe</span><br><br><span class="hljs-comment">// 添加到对象的 Symbol.iterator</span><br>jane[<span class="hljs-built_in">Symbol</span>.iterator] = objectEntries;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> jane) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;<br><span class="hljs-comment">// first: Jane</span><br><span class="hljs-comment">// last: Doe</span><br></code></pre></td></tr></table></figure><h4 id="asyncawait"><a class="markdownIt-Anchor" href="#asyncawait"></a> async/await</h4><p>// 终于写到这里了</p><h3 id="判断变量类型"><a class="markdownIt-Anchor" href="#判断变量类型"></a> 判断变量类型</h3><p>JavaScript 总共有 5 中基本的数据类型（primitive types）：</p><ul><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li></ul><p>除此之外的变量类型都是引用类型。其区别在于，基本类型在复制其变量时会创建这个值的一个副本，而引用类型变量本质是一个指针，指向内存中的对象，复制引用类型变量实际是复制该指针，即他们都指向同一个对象。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Value</span>               <span class="hljs-keyword">Class</span>      <span class="hljs-keyword">Type</span><br><span class="hljs-comment">-------------------------------------</span><br><span class="hljs-number">1.2</span>                 Number     number<br>&quot;foo&quot;               String     string<br><span class="hljs-keyword">true</span>                <span class="hljs-type">Boolean</span>    <span class="hljs-type">boolean</span><br>undefined           Undefined  undefined<br><span class="hljs-keyword">null</span>                <span class="hljs-keyword">Null</span>       <span class="hljs-keyword">object</span><br><span class="hljs-built_in">new</span> <span class="hljs-keyword">Function</span>(&quot;&quot;)    <span class="hljs-keyword">Function</span>   <span class="hljs-keyword">function</span><br><span class="hljs-built_in">new</span> String(&quot;foo&quot;)   String     <span class="hljs-keyword">object</span><br><span class="hljs-built_in">new</span> Number(<span class="hljs-number">1.2</span>)     Number     <span class="hljs-keyword">object</span><br><span class="hljs-built_in">new</span> <span class="hljs-type">Boolean</span>(<span class="hljs-keyword">true</span>)   <span class="hljs-type">Boolean</span>    <span class="hljs-keyword">object</span><br><span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>()          <span class="hljs-type">Date</span>       <span class="hljs-keyword">object</span><br><span class="hljs-built_in">new</span> Error()         Error      <span class="hljs-keyword">object</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]             <span class="hljs-keyword">Array</span>      <span class="hljs-keyword">object</span><br><span class="hljs-built_in">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <span class="hljs-keyword">Array</span>      <span class="hljs-keyword">object</span><br>/abc/g              RegExp     <span class="hljs-keyword">object</span> (<span class="hljs-keyword">function</span> <span class="hljs-keyword">in</span> Nitro/V8)<br><span class="hljs-built_in">new</span> RegExp(&quot;meow&quot;)  RegExp     <span class="hljs-keyword">object</span> (<span class="hljs-keyword">function</span> <span class="hljs-keyword">in</span> Nitro/V8)<br>&#123;&#125;                  <span class="hljs-keyword">Object</span>     <span class="hljs-keyword">object</span><br><span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>()        <span class="hljs-keyword">Object</span>     <span class="hljs-keyword">object</span><br></code></pre></td></tr></table></figure><h4 id="typeof"><a class="markdownIt-Anchor" href="#typeof"></a> typeof</h4><p><code>typeof</code> 只适用于判断简单的变量类型，返回上表中对应“Type”中的值。</p><h4 id="instanceof"><a class="markdownIt-Anchor" href="#instanceof"></a> instanceof</h4><p><code>instanceof</code> 操作符用来比较两个操作数的构造函数，一般用于比较自定义的对象。</p><h4 id="objectprototypetostring"><a class="markdownIt-Anchor" href="#objectprototypetostring"></a> Object.prototype.toString</h4><p><code>Object.prototype.toString</code>方法返回上表中对应“Class”中的值，也是最准确的判断方法。</p><h3 id="常用功能实现"><a class="markdownIt-Anchor" href="#常用功能实现"></a> 常用功能实现</h3><h4 id="1-深拷贝"><a class="markdownIt-Anchor" href="#1-深拷贝"></a> 1. 深拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> newObj = obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> ? [] : &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>    newObj[i] = <span class="hljs-keyword">typeof</span> obj[i] === <span class="hljs-string">&quot;object&quot;</span> ? deepClone(obj[i]) : obj[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> newObj;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-实现-bind-方法"><a class="markdownIt-Anchor" href="#2-实现-bind-方法"></a> 2. 实现 bind 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> fn = <span class="hljs-built_in">this</span>;<br><br>    <span class="hljs-keyword">let</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br>    <span class="hljs-keyword">let</span> bound = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> params = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>);<br>        fn.apply(obj, args.concat(params));<br>    &#125;;<br>    F.prototype = fn.prototype;<br>    bound.prototype = <span class="hljs-keyword">new</span> F();<br>    <span class="hljs-keyword">return</span> bound;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3-使用-promise-封装-ajax"><a class="markdownIt-Anchor" href="#3-使用-promise-封装-ajax"></a> 3. 使用 Promise 封装 ajax</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">method, url, params</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 创建XMLHttpRequest对象</span><br>        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        <span class="hljs-comment">// 状态改变时的回调</span><br>        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// readyState为4的时候已接收完毕</span><br>            <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-comment">// 状态码200表示成功</span><br>                <span class="hljs-keyword">if</span> (xhr.status === <span class="hljs-number">200</span>) &#123;<br>                    resolve(xhr.responseText);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    reject(xhr.status);<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// get</span><br>        <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;get&#x27;</span> || method === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> params === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                <span class="hljs-comment">// params拆解成字符串</span><br>                params = <span class="hljs-built_in">Object</span>.keys(params).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(key) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(params[key]);<br>                &#125;).join(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>            &#125;<br>            url = params ? url + <span class="hljs-string">&#x27;?&#x27;</span> + params : url;<br>            xhr.open(method, url, <span class="hljs-literal">true</span>);<br>            xhr.send();<br>        &#125;<br><br>        <span class="hljs-comment">//post</span><br>        <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;post&#x27;</span> || method === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>            xhr.open(method, url, <span class="hljs-literal">true</span>);<br>            xhr.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>);<br>            xhr.send(<span class="hljs-built_in">JSON</span>.stringify(params));<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-尾递归优化"><a class="markdownIt-Anchor" href="#4-尾递归优化"></a> 4. 尾递归优化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 蹦床函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trampoline</span>(<span class="hljs-params">f</span>) </span>&#123;<br>  <span class="hljs-keyword">while</span> (f &amp;&amp; f <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>) &#123;<br>    f = f();<br>  &#125;<br>  <span class="hljs-keyword">return</span> f;<br>&#125;<br><br><span class="hljs-comment">// 尾递归优化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tco</span>(<span class="hljs-params">f</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> value;<br>  <span class="hljs-keyword">let</span> active = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">let</span> accumulated = [];<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">accumulator</span>(<span class="hljs-params"></span>) </span>&#123;<br>    accumulated.push(<span class="hljs-built_in">arguments</span>);<br>    <span class="hljs-keyword">if</span> (!active) &#123;<br>      active = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">while</span> (accumulated.length) &#123;<br>        value = f.apply(<span class="hljs-built_in">this</span>, accumulated.shift());<br>      &#125;<br>      active = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> sum = tco(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> sum(x + <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>)<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> x<br>  &#125;<br>&#125;);<br><br>sum(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>) <span class="hljs-comment">// 100001</span><br></code></pre></td></tr></table></figure><h4 id="5-实现一个简单的-promise"><a class="markdownIt-Anchor" href="#5-实现一个简单的-promise"></a> 5. 实现一个简单的 Promise</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myPromise</span>(<span class="hljs-params">constructor</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> self=<span class="hljs-built_in">this</span>;<br>    self.status=<span class="hljs-string">&quot;pending&quot;</span> <span class="hljs-comment">//定义状态改变前的初始状态</span><br>    self.value=<span class="hljs-literal">undefined</span>;<span class="hljs-comment">//定义状态为resolved的时候的状态</span><br>    self.reason=<span class="hljs-literal">undefined</span>;<span class="hljs-comment">//定义状态为rejected的时候的状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">value</span>)</span>&#123;<br>        <span class="hljs-comment">//两个===&quot;pending&quot;，保证了状态的改变是不可逆的</span><br>       <span class="hljs-keyword">if</span>(self.status===<span class="hljs-string">&quot;pending&quot;</span>)&#123;<br>          self.value=value;<br>          self.status=<span class="hljs-string">&quot;resolved&quot;</span>;<br>       &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reject</span>(<span class="hljs-params">reason</span>)</span>&#123;<br>        <span class="hljs-comment">//两个===&quot;pending&quot;，保证了状态的改变是不可逆的</span><br>       <span class="hljs-keyword">if</span>(self.status===<span class="hljs-string">&quot;pending&quot;</span>)&#123;<br>          self.reason=reason;<br>          self.status=<span class="hljs-string">&quot;rejected&quot;</span>;<br>       &#125;<br>    &#125;<br>    <span class="hljs-comment">//捕获构造异常</span><br>    <span class="hljs-keyword">try</span>&#123;<br>       <span class="hljs-title">constructor</span>(<span class="hljs-params">resolve,reject</span>);<br>    &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>       reject(e);<br>    &#125;<br>&#125;<br><br>myPromise.prototype.then=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">onFullfilled,onRejected</span>)</span>&#123;<br>   <span class="hljs-keyword">let</span> self=<span class="hljs-built_in">this</span>;<br>   <span class="hljs-keyword">switch</span>(self.status)&#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;resolved&quot;</span>:<br>        onFullfilled(self.value);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;rejected&quot;</span>:<br>        onRejected(self.reason);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:       <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="应用开发框架"><a class="markdownIt-Anchor" href="#应用开发框架"></a> 应用开发框架</h1><h2 id="1-vuejs-的响应式原理实现"><a class="markdownIt-Anchor" href="#1-vuejs-的响应式原理实现"></a> 1. Vue.js 的响应式原理实现</h2><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210319181028.png" alt="a6054cb4746ac78184b75cd07b35fb75" /></p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com//20210407190033.jpg" alt="reactive" /></p><p>Vue.js 2.X 实现响应式对象的原理就是利用 <code>Object.defineProperty</code> 给数据添加了 getter 和 setter，getter 做的事情是依赖收集，setter 做的事情是派发更新。</p><p>实现这一点的底层函数是 <code>defineReactive</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Define a reactive property on an Object.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span> (<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">  obj: <span class="hljs-built_in">Object</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">  key: string,</span></span><br><span class="hljs-function"><span class="hljs-params">  val: any,</span></span><br><span class="hljs-function"><span class="hljs-params">  customSetter?: ?<span class="hljs-built_in">Function</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">  shallow?: boolean</span></span><br><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> Dep()<br><br>  <span class="hljs-keyword">const</span> property = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, key)<br>  <span class="hljs-keyword">if</span> (property &amp;&amp; property.configurable === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-comment">// cater for pre-defined getter/setters</span><br>  <span class="hljs-keyword">const</span> getter = property &amp;&amp; property.get<br>  <span class="hljs-keyword">const</span> setter = property &amp;&amp; property.set<br>  <span class="hljs-keyword">if</span> ((!getter || setter) &amp;&amp; <span class="hljs-built_in">arguments</span>.length === <span class="hljs-number">2</span>) &#123;<br>    val = obj[key]<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> childOb = !shallow &amp;&amp; observe(val)<br>  <span class="hljs-built_in">Object</span>.defineProperty(obj, key, &#123;<br>    enumerable: <span class="hljs-literal">true</span>,<br>    configurable: <span class="hljs-literal">true</span>,<br>    get: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactiveGetter</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> value = getter ? getter.call(obj) : val<br>      <span class="hljs-keyword">if</span> (Dep.target) &#123;<br>        dep.depend()<br>        <span class="hljs-keyword">if</span> (childOb) &#123;<br>          childOb.dep.depend()<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(value)) &#123;<br>            dependArray(value)<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> value<br>    &#125;,<br>    set: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactiveSetter</span> (<span class="hljs-params">newVal</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> value = getter ? getter.call(obj) : val<br>      <span class="hljs-comment">/* eslint-disable no-self-compare */</span><br>      <span class="hljs-keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">/* eslint-enable no-self-compare */</span><br>      <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;<br>        customSetter()<br>      &#125;<br>      <span class="hljs-keyword">if</span> (setter) &#123;<br>        setter.call(obj, newVal)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        val = newVal<br>      &#125;<br>      childOb = !shallow &amp;&amp; observe(newVal)<br>      dep.notify()<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="依赖收集"><a class="markdownIt-Anchor" href="#依赖收集"></a> 依赖收集</h3><p>在 <code>defineReactive</code> 函数的 <code>get</code> 方法中，通过 <code>dep.depend</code> 做依赖收集，这里的 <code>dep</code> 是 <code>Dep</code> 类的一个实例。该类的源码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> type Watcher <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./watcher&#x27;</span><br><span class="hljs-keyword">import</span> &#123; remove &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../util/index&#x27;</span><br><br><span class="hljs-keyword">let</span> uid = <span class="hljs-number">0</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A dep is an observable that can have multiple</span><br><span class="hljs-comment"> * directives subscribing to it.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> target: ?Watcher;<br>  id: number;<br>  subs: <span class="hljs-built_in">Array</span>&lt;Watcher&gt;;<br><br>  <span class="hljs-title">constructor</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">this</span>.id = uid++<br>    <span class="hljs-built_in">this</span>.subs = []<br>  &#125;<br><br>  addSub (sub: Watcher) &#123;<br>    <span class="hljs-built_in">this</span>.subs.push(sub)<br>  &#125;<br><br>  removeSub (sub: Watcher) &#123;<br>    remove(<span class="hljs-built_in">this</span>.subs, sub)<br>  &#125;<br><br>  depend () &#123;<br>    <span class="hljs-keyword">if</span> (Dep.target) &#123;<br>      Dep.target.addDep(<span class="hljs-built_in">this</span>)<br>    &#125;<br>  &#125;<br><br>  notify () &#123;<br>    <span class="hljs-comment">// stabilize the subscriber list first</span><br>    <span class="hljs-keyword">const</span> subs = <span class="hljs-built_in">this</span>.subs.slice()<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = subs.length; i &lt; l; i++) &#123;<br>      subs[i].update()<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// the current target watcher being evaluated.</span><br><span class="hljs-comment">// this is globally unique because there could be only one</span><br><span class="hljs-comment">// watcher being evaluated at any time.</span><br>Dep.target = <span class="hljs-literal">null</span><br><span class="hljs-keyword">const</span> targetStack = []<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pushTarget</span> (<span class="hljs-params">_target: ?Watcher</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (Dep.target) targetStack.push(Dep.target)<br>  Dep.target = _target<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">popTarget</span> (<span class="hljs-params"></span>) </span>&#123;<br>  Dep.target = targetStack.pop()<br>&#125;<br></code></pre></td></tr></table></figure><p>通过代码可知，<code>Dep</code> 实际上是实现对观察者 <code>Watcher</code> 的一种管理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> uid = <span class="hljs-number">0</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A watcher parses an expression, collects dependencies,</span><br><span class="hljs-comment"> * and fires callback when the expression value changes.</span><br><span class="hljs-comment"> * This is used for both the $watch() api and directives.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Watcher</span> </span>&#123;<br>  vm: Component;<br>  expression: string;<br>  cb: <span class="hljs-built_in">Function</span>;<br>  id: number;<br>  deep: boolean;<br>  user: boolean;<br>  computed: boolean;<br>  sync: boolean;<br>  dirty: boolean;<br>  active: boolean;<br>  dep: Dep;<br>  deps: <span class="hljs-built_in">Array</span>&lt;Dep&gt;;<br>  newDeps: <span class="hljs-built_in">Array</span>&lt;Dep&gt;;<br>  depIds: SimpleSet;<br>  newDepIds: SimpleSet;<br>  before: ?<span class="hljs-built_in">Function</span>;<br>  getter: <span class="hljs-built_in">Function</span>;<br>  value: any;<br><br>  <span class="hljs-title">constructor</span> (<span class="hljs-params"></span><br><span class="hljs-params">    vm: Component,</span><br><span class="hljs-params">    expOrFn: string | <span class="hljs-built_in">Function</span>,</span><br><span class="hljs-params">    cb: <span class="hljs-built_in">Function</span>,</span><br><span class="hljs-params">    options?: ?<span class="hljs-built_in">Object</span>,</span><br><span class="hljs-params">    isRenderWatcher?: boolean</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-built_in">this</span>.vm = vm<br>    <span class="hljs-keyword">if</span> (isRenderWatcher) &#123;<br>      vm._watcher = <span class="hljs-built_in">this</span><br>    &#125;<br>    vm._watchers.push(<span class="hljs-built_in">this</span>)<br>    <span class="hljs-comment">// options</span><br>    <span class="hljs-keyword">if</span> (options) &#123;<br>      <span class="hljs-built_in">this</span>.deep = !!options.deep<br>      <span class="hljs-built_in">this</span>.user = !!options.user<br>      <span class="hljs-built_in">this</span>.computed = !!options.computed<br>      <span class="hljs-built_in">this</span>.sync = !!options.sync<br>      <span class="hljs-built_in">this</span>.before = options.before<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.deep = <span class="hljs-built_in">this</span>.user = <span class="hljs-built_in">this</span>.computed = <span class="hljs-built_in">this</span>.sync = <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-built_in">this</span>.cb = cb<br>    <span class="hljs-built_in">this</span>.id = ++uid <span class="hljs-comment">// uid for batching</span><br>    <span class="hljs-built_in">this</span>.active = <span class="hljs-literal">true</span><br>    <span class="hljs-built_in">this</span>.dirty = <span class="hljs-built_in">this</span>.computed <span class="hljs-comment">// for computed watchers</span><br>    <span class="hljs-built_in">this</span>.deps = []<br>    <span class="hljs-built_in">this</span>.newDeps = []<br>    <span class="hljs-built_in">this</span>.depIds = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()<br>    <span class="hljs-built_in">this</span>.newDepIds = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()<br>    <span class="hljs-built_in">this</span>.expression = process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span><br>      ? expOrFn.toString()<br>      : <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">// parse expression for getter</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> expOrFn === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-built_in">this</span>.getter = expOrFn<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.getter = parsePath(expOrFn)<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.getter) &#123;<br>        <span class="hljs-built_in">this</span>.getter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>        process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; warn(<br>          <span class="hljs-string">`Failed watching path: &quot;<span class="hljs-subst">$&#123;expOrFn&#125;</span>&quot; `</span> +<br>          <span class="hljs-string">&#x27;Watcher only accepts simple dot-delimited paths. &#x27;</span> +<br>          <span class="hljs-string">&#x27;For full control, use a function instead.&#x27;</span>,<br>          vm<br>        )<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.computed) &#123;<br>      <span class="hljs-built_in">this</span>.value = <span class="hljs-literal">undefined</span><br>      <span class="hljs-built_in">this</span>.dep = <span class="hljs-keyword">new</span> Dep()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.get()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Evaluate the getter, and re-collect dependencies.</span><br><span class="hljs-comment">   */</span><br>  get () &#123;<br>    pushTarget(<span class="hljs-built_in">this</span>)<br>    <span class="hljs-keyword">let</span> value<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">this</span>.vm<br>    <span class="hljs-keyword">try</span> &#123;<br>      value = <span class="hljs-built_in">this</span>.getter.call(vm, vm)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.user) &#123;<br>        handleError(e, vm, <span class="hljs-string">`getter for watcher &quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.expression&#125;</span>&quot;`</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> e<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// &quot;touch&quot; every property so they are all tracked as</span><br>      <span class="hljs-comment">// dependencies for deep watching</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.deep) &#123;<br>        traverse(value)<br>      &#125;<br>      popTarget()<br>      <span class="hljs-built_in">this</span>.cleanupDeps()<br>    &#125;<br>    <span class="hljs-keyword">return</span> value<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Add a dependency to this directive.</span><br><span class="hljs-comment">   */</span><br>  addDep (dep: Dep) &#123;<br>    <span class="hljs-keyword">const</span> id = dep.id<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.newDepIds.has(id)) &#123;<br>      <span class="hljs-built_in">this</span>.newDepIds.add(id)<br>      <span class="hljs-built_in">this</span>.newDeps.push(dep)<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.depIds.has(id)) &#123;<br>        dep.addSub(<span class="hljs-built_in">this</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Clean up for dependency collection.</span><br><span class="hljs-comment">   */</span><br>  cleanupDeps () &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-built_in">this</span>.deps.length<br>    <span class="hljs-keyword">while</span> (i--) &#123;<br>      <span class="hljs-keyword">const</span> dep = <span class="hljs-built_in">this</span>.deps[i]<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.newDepIds.has(dep.id)) &#123;<br>        dep.removeSub(<span class="hljs-built_in">this</span>)<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> tmp = <span class="hljs-built_in">this</span>.depIds<br>    <span class="hljs-built_in">this</span>.depIds = <span class="hljs-built_in">this</span>.newDepIds<br>    <span class="hljs-built_in">this</span>.newDepIds = tmp<br>    <span class="hljs-built_in">this</span>.newDepIds.clear()<br>    tmp = <span class="hljs-built_in">this</span>.deps<br>    <span class="hljs-built_in">this</span>.deps = <span class="hljs-built_in">this</span>.newDeps<br>    <span class="hljs-built_in">this</span>.newDeps = tmp<br>    <span class="hljs-built_in">this</span>.newDeps.length = <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>this.deps</code> 和 <code>this.newDeps</code> 表示 <code>Watcher</code> 实例持有的 <code>Dep</code> 实例的数组；而 <code>this.depIds</code> 和 <code>this.newDepIds</code> 分别代表 <code>this.deps</code> 和 <code>this.newDeps</code> 的 id，其作用主要是后续添加依赖项的过程中去重。<code>newDeps</code> 表示新添加的 <code>Dep</code> 实例数组，而 <code>deps</code> 表示上一次添加的 <code>Dep</code> 实例数组。</p><h3 id="派发更新"><a class="markdownIt-Anchor" href="#派发更新"></a> 派发更新</h3><p>在 <code>defineReactive</code> 函数的 <code>set</code> 方法中，通过 <code>dep.notify()</code> 通知所有的订阅者。当我们在组件中对响应的数据做了修改，就会触发 setter 的逻辑，最后调用 <code>dep.notify()</code> 方法。从上面  <code>Dep</code> 类的定义中可以发现，<code>dep.notify()</code> 实际上实现的是遍历 <code>Watcher</code> 的实例数组，然后调用对应的 <code>update</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Watcher</span> </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>  update () &#123;<br>    <span class="hljs-comment">/* istanbul ignore else */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.computed) &#123;<br>      <span class="hljs-comment">// A computed property watcher has two modes: lazy and activated.</span><br>      <span class="hljs-comment">// It initializes as lazy by default, and only becomes activated when</span><br>      <span class="hljs-comment">// it is depended on by at least one subscriber, which is typically</span><br>      <span class="hljs-comment">// another computed property or a component&#x27;s render function.</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.dep.subs.length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// In lazy mode, we don&#x27;t want to perform computations until necessary,</span><br>        <span class="hljs-comment">// so we simply mark the watcher as dirty. The actual computation is</span><br>        <span class="hljs-comment">// performed just-in-time in this.evaluate() when the computed property</span><br>        <span class="hljs-comment">// is accessed.</span><br>        <span class="hljs-built_in">this</span>.dirty = <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// In activated mode, we want to proactively perform the computation</span><br>        <span class="hljs-comment">// but only notify our subscribers when the value has indeed changed.</span><br>        <span class="hljs-built_in">this</span>.getAndInvoke(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">this</span>.dep.notify()<br>        &#125;)<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sync) &#123;<br>      <span class="hljs-built_in">this</span>.run()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      queueWatcher(<span class="hljs-built_in">this</span>)<br>    &#125;<br>  &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>在一般组件数据更新的场景，会走到最后一个 <code>queueWatcher(this)</code> 的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> queue: <span class="hljs-built_in">Array</span>&lt;Watcher&gt; = []<br><span class="hljs-keyword">let</span> has: &#123; [key: number]: ?<span class="hljs-literal">true</span> &#125; = &#123;&#125;<br><span class="hljs-keyword">let</span> waiting = <span class="hljs-literal">false</span><br><span class="hljs-keyword">let</span> flushing = <span class="hljs-literal">false</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Push a watcher into the watcher queue.</span><br><span class="hljs-comment"> * Jobs with duplicate IDs will be skipped unless it&#x27;s</span><br><span class="hljs-comment"> * pushed when the queue is being flushed.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queueWatcher</span> (<span class="hljs-params">watcher: Watcher</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> id = watcher.id<br>  <span class="hljs-keyword">if</span> (has[id] == <span class="hljs-literal">null</span>) &#123;<br>    has[id] = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">if</span> (!flushing) &#123;<br>      queue.push(watcher)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// if already flushing, splice the watcher based on its id</span><br>      <span class="hljs-comment">// if already past its id, it will be run next immediately.</span><br>      <span class="hljs-keyword">let</span> i = queue.length - <span class="hljs-number">1</span><br>      <span class="hljs-keyword">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;<br>        i--<br>      &#125;<br>      queue.splice(i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, watcher)<br>    &#125;<br>    <span class="hljs-comment">// queue the flush</span><br>    <span class="hljs-keyword">if</span> (!waiting) &#123;<br>      waiting = <span class="hljs-literal">true</span><br>      nextTick(flushSchedulerQueue)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由此可见，Vue 在做派发更新的时候并不会每次数据改变都触发 <code>watcher</code> 的回调，而是把这些 <code>watcher</code> 先添加到一个队列里，然后在 <code>nextTick</code> 后执行 <code>flushSchedulerQueue</code>触发回调。先看 <code>flushSchedulerQueue</code> 的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> flushing = <span class="hljs-literal">false</span><br><span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Flush both queues and run the watchers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flushSchedulerQueue</span> (<span class="hljs-params"></span>) </span>&#123;<br>  flushing = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">let</span> watcher, id<br><br>  <span class="hljs-comment">// Sort queue before flush.</span><br>  <span class="hljs-comment">// This ensures that:</span><br>  <span class="hljs-comment">// 1. Components are updated from parent to child. (because parent is always</span><br>  <span class="hljs-comment">//    created before the child)</span><br>  <span class="hljs-comment">// 2. A component&#x27;s user watchers are run before its render watcher (because</span><br>  <span class="hljs-comment">//    user watchers are created before the render watcher)</span><br>  <span class="hljs-comment">// 3. If a component is destroyed during a parent component&#x27;s watcher run,</span><br>  <span class="hljs-comment">//    its watchers can be skipped.</span><br>  queue.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.id - b.id)<br><br>  <span class="hljs-comment">// do not cache length because more watchers might be pushed</span><br>  <span class="hljs-comment">// as we run existing watchers</span><br>  <span class="hljs-keyword">for</span> (index = <span class="hljs-number">0</span>; index &lt; queue.length; index++) &#123;<br>    watcher = queue[index]<br>    <span class="hljs-keyword">if</span> (watcher.before) &#123;<br>      watcher.before()<br>    &#125;<br>    id = watcher.id<br>    has[id] = <span class="hljs-literal">null</span><br>    watcher.run()<br>    <span class="hljs-comment">// in dev build, check and stop circular updates.</span><br>    <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; has[id] != <span class="hljs-literal">null</span>) &#123;<br>      circular[id] = (circular[id] || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>      <span class="hljs-keyword">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;<br>        warn(<br>          <span class="hljs-string">&#x27;You may have an infinite update loop &#x27;</span> + (<br>            watcher.user<br>              ? <span class="hljs-string">`in watcher with expression &quot;<span class="hljs-subst">$&#123;watcher.expression&#125;</span>&quot;`</span><br>              : <span class="hljs-string">`in a component render function.`</span><br>          ),<br>          watcher.vm<br>        )<br>        <span class="hljs-keyword">break</span><br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// keep copies of post queues before resetting state</span><br>  <span class="hljs-keyword">const</span> activatedQueue = activatedChildren.slice()<br>  <span class="hljs-keyword">const</span> updatedQueue = queue.slice()<br><br>  resetSchedulerState()<br><br>  <span class="hljs-comment">// call component updated and activated hooks</span><br>  callActivatedHooks(activatedQueue)<br>  callUpdatedHooks(updatedQueue)<br><br>  <span class="hljs-comment">// devtool hook</span><br>  <span class="hljs-comment">/* istanbul ignore if */</span><br>  <span class="hljs-keyword">if</span> (devtools &amp;&amp; config.devtools) &#123;<br>    devtools.emit(<span class="hljs-string">&#x27;flush&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分代码主要的逻辑包括：队列排序、队列遍历和状态恢复。</p><p>其中对队列进行排序目的是确保组件的更新由父到子以及用户的自定义 <code>watcher</code> 要优先于渲染 <code>watcher</code> 执行。</p><p>队列遍历就是执行对应 <code>watcher</code> 的 <code>run</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Watcher</span> </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Scheduler job interface.</span><br><span class="hljs-comment">   * Will be called by the scheduler.</span><br><span class="hljs-comment">   */</span><br>  run () &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.active) &#123;<br>      <span class="hljs-built_in">this</span>.getAndInvoke(<span class="hljs-built_in">this</span>.cb)<br>    &#125;<br>  &#125;<br><br>  getAndInvoke (cb: <span class="hljs-built_in">Function</span>) &#123;<br>    <span class="hljs-keyword">const</span> value = <span class="hljs-built_in">this</span>.get()<br>    <span class="hljs-keyword">if</span> (<br>      value !== <span class="hljs-built_in">this</span>.value ||<br>      <span class="hljs-comment">// Deep watchers and watchers on Object/Arrays should fire even</span><br>      <span class="hljs-comment">// when the value is the same, because the value may</span><br>      <span class="hljs-comment">// have mutated.</span><br>      isObject(value) ||<br>      <span class="hljs-built_in">this</span>.deep<br>    ) &#123;<br>      <span class="hljs-comment">// set new value</span><br>      <span class="hljs-keyword">const</span> oldValue = <span class="hljs-built_in">this</span>.value<br>      <span class="hljs-built_in">this</span>.value = value<br>      <span class="hljs-built_in">this</span>.dirty = <span class="hljs-literal">false</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.user) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          cb.call(<span class="hljs-built_in">this</span>.vm, value, oldValue)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>          handleError(e, <span class="hljs-built_in">this</span>.vm, <span class="hljs-string">`callback for watcher &quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.expression&#125;</span>&quot;`</span>)<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        cb.call(<span class="hljs-built_in">this</span>.vm, value, oldValue)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>run</code> 函数实际上就是执行 <code>this.getAndInvoke</code> 方法，并传入 <code>watcher</code> 的回调函数。<code>getAndInvoke</code> 函数逻辑也很简单，先通过 <code>this.get()</code> 得到它当前的值，然后做判断，如果满足新旧值不等、新值是对象类型、<code>deep</code> 模式任何一个条件，则执行 <code>watcher</code> 的回调，注意回调函数执行的时候会把第一个和第二个参数传入新值 <code>value</code> 和旧值 <code>oldValue</code>，这就是当我们添加自定义 <code>watcher</code> 的时候能在回调函数的参数中拿到新旧值的原因。</p><p>对于渲染 <code>watcher</code> 而言，它在执行 <code>this.get()</code> 方法求值的时候，会执行 <code>getter</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">updateComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>  vm._update(vm._render(), hydrating)<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是当我们去修改组件相关的响应式数据的时候，会触发组件重新渲染的原因，接着就会重新执行 <code>patch</code> 的过程，但它和首次渲染有所不同。</p><p>状态恢复就是把这些控制流程状态的一些变量恢复到初始值，把 <code>watcher</code> 队列清空：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> queue: <span class="hljs-built_in">Array</span>&lt;Watcher&gt; = []<br><span class="hljs-keyword">let</span> has: &#123; [key: number]: ?<span class="hljs-literal">true</span> &#125; = &#123;&#125;<br><span class="hljs-keyword">let</span> circular: &#123; [key: number]: number &#125; = &#123;&#125;<br><span class="hljs-keyword">let</span> waiting = <span class="hljs-literal">false</span><br><span class="hljs-keyword">let</span> flushing = <span class="hljs-literal">false</span><br><span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Reset the scheduler&#x27;s state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resetSchedulerState</span> (<span class="hljs-params"></span>) </span>&#123;<br>  index = queue.length = activatedChildren.length = <span class="hljs-number">0</span><br>  has = &#123;&#125;<br>  <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    circular = &#123;&#125;<br>  &#125;<br>  waiting = flushing = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h3><p>xxx</p><h2 id="2-virtual-dom"><a class="markdownIt-Anchor" href="#2-virtual-dom"></a> 2. Virtual DOM</h2><h1 id="行业前沿"><a class="markdownIt-Anchor" href="#行业前沿"></a> 行业前沿</h1><h2 id="1-微前端"><a class="markdownIt-Anchor" href="#1-微前端"></a> 1. 微前端</h2><h2 id="2-webassembly"><a class="markdownIt-Anchor" href="#2-webassembly"></a> 2. WebAssembly</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试必备</tag>
      
      <tag>知识体系</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的遍历问题</title>
    <link href="/2020/12/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="先序遍历"><a class="markdownIt-Anchor" href="#先序遍历"></a> 先序遍历</h1><p>根-&gt;左子树-&gt;右子树</p><h2 id="递归实现"><a class="markdownIt-Anchor" href="#递归实现"></a> 递归实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>    visit(root);<br>    preOrder(root-&gt;lchild);<br>    preOrder(root-&gt;rchild);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="非递归实现"><a class="markdownIt-Anchor" href="#非递归实现"></a> 非递归实现</h2><p>通过分析先序遍历可以提取出以下特点：</p><ol><li>先序遍历先访问根结点，然后循环访问左子树的根结点；</li><li>循环访问至最深层时是二叉树最左边的叶子结点；</li><li>最后访问结点对应父结点的右子树。</li></ol><p>当访问右子树时，可以把右子树第一个结点作为新的根结点，则循环完成闭环。</p><p>非递归结构都需要使用栈，且需要使用一个指针控制遍历过程。由于遍历完成后栈和遍历指针都为空，因此可以先做如下定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-built_in">stack</span>&lt;BiTNode*&gt; s; <span class="hljs-comment">// 结点栈 </span><br>  BiTNode *p = root; <span class="hljs-comment">// 遍历指针</span><br>  <span class="hljs-keyword">while</span> (p || !s.empty()) &#123;<br>    <span class="hljs-comment">/* code */</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处理根结点后循环处理左子树，循环到最深层的叶子结点后，需要返回访问对应父结点的右子树，因此还需要保存每次循环的父结点。</p><p>同时，当循环到最深层的叶子结点后，继续访问左子树为空 <code>NULL</code>，之后才访问对应父结点的右子树，因此可以通过判断 p 是否为空来决定动作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (p) &#123;<br>  <span class="hljs-comment">// 循环访问左子树</span><br>  visit(p);<br>  s.push(p);<br>  p = p-&gt;lchild;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 返回访问右子树</span><br>  p = s.top();<br>  s.pop();<br>  p = p-&gt;rchild;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-built_in">stack</span>&lt;BiTNode*&gt; s;<br>  BiTNode *p = root;<br>  <span class="hljs-keyword">while</span> (p || !s.empty()) &#123;<br>    <span class="hljs-keyword">if</span> (p) &#123;<br>      visit(p);<br>      s.push(p);<br>      p = p-&gt;lchild;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      p = s.top();<br>      s.pop();<br>      p = p-&gt;rchild;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h1><p>左子树-&gt;根-&gt;右子树</p><h2 id="递归实现-2"><a class="markdownIt-Anchor" href="#递归实现-2"></a> 递归实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>    preOrder(root-&gt;lchild);<br>    visit(root);<br>    preOrder(root-&gt;rchild);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="非递归实现-2"><a class="markdownIt-Anchor" href="#非递归实现-2"></a> 非递归实现</h2><p>分析方法和先序一致，首先确定特点：</p><ol><li>中序遍历不断循环进入根结点的左子树，首先访问循环最深层即二叉树最左边的叶子结点；</li><li>然后访问该结点对应的父结点；</li><li>最后访问该父结点的右子树；</li></ol><p>当访问右子树时，可以把右子树第一个结点作为新的根结点，则循环完成闭环。循环过程和先序遍历基本一致，只是访问结点的时机不同。完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-built_in">stack</span>&lt;BiTNode*&gt; s;<br>  BiTNode *p = root;<br>  <span class="hljs-keyword">while</span> (p || !s.empty()) &#123;<br>    <span class="hljs-keyword">if</span> (p) &#123;<br>      s.push(p);<br>      p = p-&gt;lchild;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      p = s.top();<br>      s.pop();<br>      visit(p);<br>      p = p-&gt;rchild;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h1><p>左子树-&gt;右子树-&gt;根</p><h2 id="递归实现-3"><a class="markdownIt-Anchor" href="#递归实现-3"></a> 递归实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>    preOrder(root-&gt;lchild);<br>    preOrder(root-&gt;rchild);<br>    visit(root);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="非递归实现-3"><a class="markdownIt-Anchor" href="#非递归实现-3"></a> 非递归实现</h2><p>后序遍历相对比较复杂，不过首先还是确定特点：</p><ol><li>后续遍历不断循环进入根结点的左子树，首先访问循环最深层即二叉树最左边的叶子结点；</li><li>然后访问该结点对应父结点的右子树；</li><li>最后访问该父结点。</li></ol><p>不过此时这个循环无法顺利完成闭环，而是会形成局部的死循环，导致死循环发生的问题包括：</p><p>问题1：首先为了能在访问最左边叶子结点后直接访问该结点对应父结点的右子树，可以通过判断父结点是否有右子树来控制，关键在于访问完右子树后需要回到父结点。此时如果不控制遍历指针，就会不断访问该右子树最右边的叶子结点形成死循环。</p><p>若要正常运行，就需要在访问完右子树最右边的叶子结点后就访问该结点的父结点，即直接访问栈顶元素。此时可令遍历指针 p 为 <code>NULL</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (p) &#123;<br>  s.push(p);<br>  p = p-&gt;lchild;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  p = s.top();<br>  <span class="hljs-keyword">if</span> (p-&gt;rchild) &#123; <span class="hljs-comment">// 如果父结点有右子树就进入右子树</span><br>    p = p-&gt;rchild;<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 否则直接访问该结点</span><br>    s.pop();<br>    visit(p); <br>    p = <span class="hljs-literal">NULL</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题2：解决问题1之后，死循环的问题并未得到解决，因为从上述代码可知，获取栈顶元素后还会判断是否有右子树，如果有就直接进入右子树，这样一来还是会形成死循环。</p><p>为了解决这个问题，需要新增一个指针 t，用来保存上一次访问的结点，这样一来在判断结点是否有右子树的同时再判断该右子树是否已经被访问过，从而避免进入死循环。解决这个问题之后，整个循环即可形成完整的闭环。完整的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-built_in">stack</span>&lt;BiTNode*&gt; s;<br>  BiTNode *p = root;<br>  BiTNode *t = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">while</span> (p || !s.empty()) &#123;<br>    <span class="hljs-keyword">if</span> (p) &#123;<br>      s.push(p);<br>      p = p-&gt;lchild;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      p = s.top();<br>      <span class="hljs-keyword">if</span> (p-&gt;rchild &amp;&amp; p-&gt;rchild != t) &#123;<br>        p = p-&gt;rchild;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        s.pop();<br>        visit(p);<br>        t = p;<br>        p = <span class="hljs-literal">NULL</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="层序遍历"><a class="markdownIt-Anchor" href="#层序遍历"></a> 层序遍历</h1><p>按层次从左往右访问，借助队列实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">layerOrder</span><span class="hljs-params">(BiTNode *root)</span> </span>&#123;<br>  <span class="hljs-built_in">queue</span>&lt;BiTNode*&gt; q;<br>  BiTNode *p;<br>  q.push(root);<br>  <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>    p = q.pop();<br>    visit(p);<br>    <span class="hljs-keyword">if</span> (p-&gt;lchild != <span class="hljs-literal">NULL</span>) q.push(p-&gt;lchild);<br>    <span class="hljs-keyword">if</span> (p-&gt;rchild != <span class="hljs-literal">NULL</span>) q.push(p-&gt;rchild);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="根据遍历序列重建二叉树"><a class="markdownIt-Anchor" href="#根据遍历序列重建二叉树"></a> 根据遍历序列重建二叉树</h1><p>这里以先序遍历序列(pre[n]) + 中序遍历序列(in[n])为例，其他三种原理一致。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BiTNode *<span class="hljs-title">createByPreIn</span><span class="hljs-params">(<span class="hljs-keyword">int</span> preL, <span class="hljs-keyword">int</span> preR, <span class="hljs-keyword">int</span> inL, <span class="hljs-keyword">int</span> inR)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (preL &gt; preR) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 先序序列长度为0，即树已建成</span><br>  &#125;<br><br>  BiTNode *root = <span class="hljs-keyword">new</span> BiTNode;<br>  root-&gt;data = pre[preL]; <span class="hljs-comment">// 先序序列第一个为根结点</span><br><br>  <span class="hljs-keyword">int</span> k, numLeft;<br>  <span class="hljs-keyword">for</span> (k = inL; k &lt;= inR; k++) &#123;<br>    <span class="hljs-keyword">if</span> (in[k] == pre[preL]) <span class="hljs-keyword">break</span>;<br>  &#125;<br>  numLeft = k - inL; <span class="hljs-comment">// 左子树结点数</span><br><br>  <span class="hljs-comment">// 左子树的先序区间为 [preL+1, preL+numLeft]，中序区间为 [inL, k - 1]</span><br>  root-&gt;lchild = createByPreIn(preL + <span class="hljs-number">1</span>, preL + numLeft, inL, k - <span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 右子树的先序区间为 [preL+numLeft+1, preR]，中序区间为 [k+1, inR]</span><br>  root-&gt;rchild = createByPreIn(preL + numLeft + <span class="hljs-number">1</span>, preR, k + <span class="hljs-number">1</span>, inR);<br><br>  <span class="hljs-keyword">return</span> root; <span class="hljs-comment">// 返回根结点地址</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树非递归遍历</tag>
      
      <tag>二叉树重建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Drupal8入坑指南</title>
    <link href="/2020/04/19/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <url>/2020/04/19/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么选择-drupal"><a class="markdownIt-Anchor" href="#为什么选择-drupal"></a> 为什么选择 Drupal？</h1><p>我们先来看看3大开源 CMS 系统各自的主要特点：</p><p>WordPress：</p><ul><li>用户友好，非常适合非开发人员</li><li>免费和付费的插件、主题数量庞大</li><li>拥有最活跃的社区（WP市场占有率60%以上）</li><li>优秀的本地化支持</li></ul><p>Joomla：</p><ul><li>注重用户友好的同时，兼顾了自定义开发，平衡了 WP 和 Drupal 各自的优点</li><li>优秀的本地化支持</li></ul><p>Drupal：</p><ul><li>强大的自定义开发支持，非常适合开发人员</li><li>支持CLI命令行工具</li></ul><p>其实只要稍微作对比就会发现，如果没有特殊的需求，开发的首选依然是 WordPress。但是也显而易见，用户友好的代价就是缺乏一定的灵活性，比如说我已经规划好了整个网站的架构，然后发现如果需要用 WordPress 来实现的话，需要各种各样的插件支持，这样反而提升了开发的复杂度。这也是为什么我会选择 Drupal。如果说 WordPress 是一台完美组装好的强力赛车，那 Drupal 就是一辆底盘优秀，但是其余部件都要自己选择并组装的赛车，其突出的特点就是可配置性。</p><h1 id="从哪里获取资料"><a class="markdownIt-Anchor" href="#从哪里获取资料"></a> 从哪里获取资料？</h1><p>尽管 Drupal 的功能非常强大，但是它所占的市场规模实在是太小了（3%左右），因此国内的相关资料少得可怜，百度直接找到的活跃社区，就是<a href="http://drupalchina.cn/">Drupal中国</a>，但是上面的学习资料太散了，不适合入门学习，后来只能回归官方文档。学习了几天之后，感觉非常吃力，不仅仅因为是英文，而且官方的文档就是一本说明书，不是教程。类似的还有社区文档，社区的文档的参考价值比官方文档高，不过依然不够完善，进一步搜索后，才找到了我真正需要的东西：</p><h2 id="初探掌握-drupal-的使用方法"><a class="markdownIt-Anchor" href="#初探掌握-drupal-的使用方法"></a> 初探——掌握 Drupal 的使用方法</h2><p>《Beginning Drupal 8》：Todd Tomlinson 写的一本用来入门 Drupal 的书，Google 搜索 PDF 可以直接找到，有概念有实践。粗略浏览一遍就能对 Drupal 有一个整体的印象，之后再结合 Drupal 的社区文档进行学习，就容易消化多了。</p><h2 id="进阶掌握-drupal-的开发方法"><a class="markdownIt-Anchor" href="#进阶掌握-drupal-的开发方法"></a> 进阶——掌握 Drupal 的开发方法</h2><p>开发资料，最基础的依然是社区开发文档，比如<a href="https://www.drupal.org/docs/8/theming">Theming Drupal 8</a>，然后配合 <strong>Packt</strong>上的两本书：《Drupal 8 Theming with Twig》和 《Matering Drupal 8》，就可以掌握最基本的开发方法和步骤了。</p><p>可惜的是，到目前为止，并没有找到有价值的中文资料，有待补充。当然，除了文档和书籍，官方论坛也是个好地方，一般用来解决开发过程中遇到的各式各样的问题。</p><h1 id="上手-drupal"><a class="markdownIt-Anchor" href="#上手-drupal"></a> 上手 Drupal</h1><p>关于开发环境一类的搭建就不多赘述了，能选择 Drupal 进行开发的，基本也都是老手了。唯一需要注意的一点是，注意 php 和 mysql 的配置，比如我是 Windows 平台上用 XAMPP 搭建的环境，就参考 <a href="https://www.drupal.org/docs/develop/local-server-setup/windows-development-environment/quick-install-drupal-with-xampp-on">Quick install Drupal with XAMPP on Windows</a> 进行配置。</p><h2 id="drupal-的目录结构"><a class="markdownIt-Anchor" href="#drupal-的目录结构"></a> Drupal 的目录结构</h2><p>了解一个项目最好的出发点，就是先了解它的组成结构。前面也说到了，通过 Composer 直接安装的项目，Drupal 的主要文件位于 “/web” 目录下，而 “/vendor” 目录下则是这个 Drupal 发行版所需的各种依赖。Drupal 的主要文件结构如下所示：</p><figure class="highlight axapta"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs axapta">├── core                              <span class="hljs-meta"># Drupal 核心部分</span><br>│   ├── assets<br>│   ├── config<br>│   ├── includes<br>│   ├── lib                           <span class="hljs-meta"># Drupal 核心依赖库</span><br>│   ├── misc<br>│   ├── modules                       <span class="hljs-meta"># Drupal 核心模块</span><br>│   ├── profiles                      <span class="hljs-meta"># Drupal 安装配置</span><br>│   ├── scripts                       <span class="hljs-meta"># Drupal CLI脚本</span><br>│   ├── tests<br>│   ├── themes                        <span class="hljs-meta"># Drupal 默认主题</span><br>│   └── ...<br>├── modules                           <span class="hljs-meta"># Contributed/Custom 模块</span><br>├── profiles                          <span class="hljs-meta"># Distribution/Custom 安装配置</span><br>├── sites<br>│   ├── <span class="hljs-literal">default</span><br>│   │ ├── files                     <span class="hljs-meta"># 站点文件（包含图片、CSS、JS、导出的配置、语言等）</span><br>│   │ ├── <span class="hljs-literal">default</span>.services.yml<br>│   │ ├── <span class="hljs-literal">default</span>.settings.php<br>│   │ └── settings.php              <span class="hljs-meta"># 站点设置文件（数据库、代理、PHP设置等）</span><br>│   └── ...<br>├── themes                            <span class="hljs-meta">#Contributed/Custom 主题</span><br>├── INSTALL.txt<br>├── README.txt<br>├── autoload.php                      <span class="hljs-meta"># 加载依赖</span><br>├── example.gitignore<br>├── <span class="hljs-keyword">index</span>.php                         <span class="hljs-meta"># 主入口文件</span><br>├── robots.txt<br>├── update.php                        <span class="hljs-meta"># 数据库升级</span><br>└── web.config<br></code></pre></td></tr></table></figure><h2 id="安装-drupal"><a class="markdownIt-Anchor" href="#安装-drupal"></a> 安装 Drupal</h2><p>建议使用 Composer 安装 Drupal，以便随后可以通过 Composer 管理整个项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 如果下载太慢可以尝试替换阿里云的镜像源或者使用代理</span><br>composer create-project drupal/recommended-project my_site_dir<br><br><span class="hljs-meta">#</span><span class="bash"> 安装完本体后别忘了把 drush 也装上（drush 是 drupal 的命令行工具）</span><br>composer require drush/drush<br></code></pre></td></tr></table></figure><p>需要注意的是，由于新版本的 Drupal 考虑到安全性，把网站根目录和依赖分别放在两个不同的目录（/web 和 /vendor）中，因此在服务器部署的时候，需要注意文件所在位置，这个坑比较麻烦，这里举个例子：</p><p>比如我有一个项目需要部署在一个共享云主机上面，由于只能通过 FTP 访问网站根目录，没法配置 Apache，因此只有两种方法，一是使用官网直接下载的版本（core 和 vendor 在同一目录下），二是通过 RewriteRule 改写当前路径。考虑到安全问题，我们还是使用根目录和依赖分开的目录结构，为此需要配置 .htaccess 文件（假设目前根目录为 drupal）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># example.com/.htaccess</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">on</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^www.example.com$<span class="hljs-meta"> [NC,OR]</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^example.com$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^$ web/$<span class="hljs-number">1</span><span class="hljs-meta"> [L]</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> (.*) web/$<span class="hljs-number">1</span><span class="hljs-meta"> [L]</span><br></code></pre></td></tr></table></figure><p>这样一来，只要我访问 <a href="http://example.com">example.com</a> 就相当于访问 <a href="http://example.com/web%E3%80%82%E4%B8%8D%E8%BF%87%E6%AD%A4%E6%97%B6%E8%BF%98%E6%9C%89%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%EF%BC%8C%E9%9C%80%E8%A6%81%E5%9C%A8">example.com/web。不过此时还有可能会遇到问题，需要在</a> “site/default/setting.php” 种加上一句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;request&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;/web/index.php&#x27;</span> === <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;request&#x27;</span>]-&gt;server-&gt;get(<span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>)) &#123;<br>  <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;request&#x27;</span>]-&gt;server-&gt;set(<span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>, <span class="hljs-string">&#x27;/index.php&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不这样的话，&quot;/web/index.php&quot; 就会在根目录被 Rewrite 一次，导致找不到页面，而至于 “/web/.htaccess”，可以完全不用管它。</p><p>和 WordPress 一样，通过直接访问站点的方式进行安装，除此之外 Drupal 还支持通过 Drush 进行命令行安装。安装的第一步需要选择语言，建议先默认使用英文安装，中文安装有时候会失败，原因是下载超时，当然也有解决方法：</p><p>在 <code>core/lib/Drupal/Core/Http/ClientFactory.php</code> 50行的位置，修改超时或者设置代理即可解决问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$default_config</span> = [<br>  <span class="hljs-comment">// Security consideration: we must not use the certificate authority</span><br>  <span class="hljs-comment">// file shipped with Guzzle because it can easily get outdated if a</span><br>  <span class="hljs-comment">// certificate authority is hacked. Instead, we rely on the certificate</span><br>  <span class="hljs-comment">// authority file provided by the operating system which is more likely</span><br>  <span class="hljs-comment">// going to be updated in a timely fashion. This overrides the default</span><br>  <span class="hljs-comment">// path to the pem file bundled with Guzzle.</span><br>  <span class="hljs-string">&#x27;verify&#x27;</span> =&gt; <span class="hljs-literal">TRUE</span>,<br>  <span class="hljs-string">&#x27;timeout&#x27;</span> =&gt; <span class="hljs-number">30</span>, <span class="hljs-comment"># 这里修改为 300 或者更高</span><br>  <span class="hljs-string">&#x27;headers&#x27;</span> =&gt; [<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span> =&gt; <span class="hljs-string">&#x27;Drupal/&#x27;</span> . \Drupal::VERSION . <span class="hljs-string">&#x27; (+https://www.drupal.org/) &#x27;</span> . \GuzzleHttp\default_user_agent(),<br>  ],<br>  <span class="hljs-string">&#x27;handler&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;stack,<br>  <span class="hljs-comment">// Security consideration: prevent Guzzle from using environment variables</span><br>  <span class="hljs-comment">// to configure the outbound proxy.</span><br>  <span class="hljs-string">&#x27;proxy&#x27;</span> =&gt; [<br>    <span class="hljs-string">&#x27;http&#x27;</span> =&gt; <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-string">&#x27;https&#x27;</span> =&gt; <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-string">&#x27;no&#x27;</span> =&gt; [],<br>  ],<br>];<br></code></pre></td></tr></table></figure><p>如果默认使用英文安装，则可以在安装完成后手动启动 Language 和 Interface Translation 两个模块，接着去官网下载语言包，在 Interface Translation 的配置中导入下载的语言包，最后去 Language 配置中设置默认语言为中文即可。</p><h2 id="介绍常用功能"><a class="markdownIt-Anchor" href="#介绍常用功能"></a> 介绍常用功能</h2><p>为了方便理解，以下演示的语言都设置为英文。安装完成后会自动跳转到首页，此时可以在页头看到一个工具栏，这个工具栏只有登录后才会显示。在 Drupal 中，登录后台最直接的方式就是在 URL 后面加上 “/user”，登录之后会跳转到用户的个人页面，此时便可以通过工具栏访问不同的栏目了。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418004526170.png" alt="image-20200418004526170" /></p><p>Drupal 的主要功能区如上图所示：</p><ul><li>Content（内容）：管理文章和媒体</li><li>Structure（结构）：管理区块、内容类型、菜单、分类、视图</li><li>Appearance（外观）：管理主题</li><li>Extend（扩展）：管理模块</li><li>Configuration（配置）：配置站点、语言等</li><li>People（人员）：管理用户</li><li>Reports（报告）：查看更新以及日志</li><li>Help（帮助）：查看模块帮助</li></ul><h3 id="内容类型"><a class="markdownIt-Anchor" href="#内容类型"></a> 内容类型</h3><p>作为CMS，首先最关心的应该是如何添加页面和内容。内容的话，首先添加站点所需的内容类型，Drupal 特别优秀的一点就是对内容类型的字段操作。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418180947890.png" alt="image-20200418180947890" /></p><p>添加自定义字段后，可以通过 “Manage form display” 管理添加的这些字段在创建内容时显示的可见性、顺序以及格式（Format：用来限定字段的数据类型、显示格式等），而 “Manage display” 则是管理对应内容类型展示给用户的内容的可见性、顺序以及格式。</p><h3 id="页面和区块"><a class="markdownIt-Anchor" href="#页面和区块"></a> 页面和区块</h3><p>对于页面，Drupal 有两种常见的创建页面方式：视图（Views） 和页面管理器（Page Manager UI）。二者都调用了 Page Manager 模块，区别在于视图是集成到 Drupal 核心的，安装好 Drupal 之后就可以使用，而页面管理器是一个额外的模块，需要额外安装。无论通过哪种方式创建页面，都需要调用该页面的模板（page–suggestion.html.twig，后面主题开发会介绍），模板上会指定内容显示的区域（Region），光创建好页面是没有用的，还需要指定访问该页面的 URL 以及在页面对应的区域中布置区块（Block）：</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418213934941.png" alt="image-20200418213934941" /></p><p>页面的模板往往是由主题指定的，因此不同的主题会有不同的区块布局（Block Layout）。区块分为系统自带的区块（Core、System、Menus等）和自定义区块（Custom），网页上的所有内容，都是区块，举个列子：在内容（Contnet）中创建的文章，其实都是通过 “Main page content” 这个系统区块添加到页面中的。因此，如果你有一段 HTML 代码需要添加到页面的对应位置，那么在自定义区块库（Custom block library）中添加一个自定义区块即可（补充：由于区块本质也是内容，因此在自定义区块库中也可以创建自己想要的区块类型，比如我可以指定某类区块都是富文本而另一类区块都是纯 HTML。）</p><p>至此，Drupal 添加页面和内容的流程就很清晰了：</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200419002431476.png" alt="image-20200419002431476" /></p><h3 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h3><p>前面说了，创建页面可以用视图或者页面管理器，实际上视图是页面管理器的超集，因此只需掌握如何使用视图创建页面就够了。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418221017604.png" alt="image-20200418221017604" /></p><p>从视图（Views）进来，就可以发现，实际上包括 Drupal 的后台页面在内，都是一个个的视图组成的。创建视图也是学习 Drupal 的路上遇到的第一个硬骨头。选择 “Add view” 来添加一个视图，我们可以指定视图要显示的内容以及视图呈现的形式（Display）：作为一个页面或者作为一个区块，之后就会进入视图的详细设置页面。接下来以首页（Frontpage）为例来看看视图中具体的设置。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418223519270.png" alt="image-20200418223519270" /></p><p>首先是显示（Display），这是视图最好用的功能，你可以给选定内容不同的显示方式，比如页面（Page）、区块（Block）、摘要（Teaser）这三种最常用的显示方式（除此之外还有附件（Attachment）、嵌入（Embed）、实体引用（Entity Reference）以及信息聚合（Feed）），如果有特殊需要，你还可以自定义一种显示方式（     在 Structure-&gt;Display modes -&gt;View modes 中）。这个功能最常见的应用，就是在首页只显示文章的摘要（Teaser），点击标题后进入文章页查看全文（Default）。</p><blockquote><p>注：默认显示（Default）一般是不可见的，如果需要更改默认显示，要先在视图的设置中勾选上：Always show the master (default) display</p></blockquote><p>视图里面一般需要配置的项目有：</p><ul><li>格式（FORMAT）<ul><li>Format：设置内容显示的方式，Unformatied list 就是用 <code>&lt;div&gt;</code> 标签包裹内容；</li><li>Show：设置显示具体的内容（Content）还是只显示字段（Field），如果显示具体内容，后面还可以设置内容的显示方式。</li></ul></li><li>字段（FIELDS）<ul><li>如果上面设置只显示字段，那么就可以在这里添加需要显示的字段。</li></ul></li><li>过滤器（FILTER）<ul><li>过滤内容，可以多个条件组合使用。</li></ul></li><li>排序（SORT）<ul><li>对内容显示进行排序。</li></ul></li><li>页面/块设置（PAGE/BLOCK SETTINGS）<ul><li>设置页面的路径（即 URL）、所属菜单等信息。</li></ul></li><li>分页（PAGER）<ul><li>Use pager：设置是否使用分页器以及分页的样式、每页显示的数量等；</li><li>More link：设置是否在分页器后显示 “more” 链接，点击该链接即查看全部内容。</li></ul></li><li>上下文过滤器（CONTEXTUAL FILTERS）<ul><li>配合当前 URL 中提供的信息进行内容过滤。</li></ul></li><li>联系（RELATIONSHIPS）<ul><li>和其他实体建立联系，比如和分类（Taxonomy）建立联系，然后便可以配合上下文过滤器实现通过分类名称来过滤内容。</li></ul></li></ul><h3 id="分类和菜单"><a class="markdownIt-Anchor" href="#分类和菜单"></a> 分类和菜单</h3><p>说到分类（Taxonomy）和菜单（Menus），如果有使用 WordPress 的经验，那么应该对这两个东西不陌生了。同样还是举例子吧，在 Drupal 中，可以使用分类来实现文章标签的功能：</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418234159320.png" alt="image-20200418234159320" /></p><p>首先在分类页面下新建一个词汇 “标签（Tags）”，之后再这个词汇下建立多个术语（terms），对应不同的文章类型。之后在对应文章的文章类型中，新增一个字段，用来添加这个标签：</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418234419794.png" alt="image-20200418234419794" />最后在创建文章的时候，选择或者填写预先设置好的标签即可。假如还需要给不同的标签创建一个归档页，则利用上面讲到的视图：新建一个视图，过滤器选择对应分类术语即可。（实际上 Drupal 自带归档页视图，只不过没有启用，在视图页的 “Disabled” 栏目下面）</p><p>Drupal 默认有 5 个菜单，这 5 个菜单只可以编辑不可以删除：</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418235126300.png" alt="image-20200418235126300" /></p><p>以管理菜单（Administration ）为例：</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200418235305417.png" alt="image-20200418235305417" /></p><p>可以通过 “Add link” 添加菜单项目，然后通过菜单项前面的符号拖动菜单项排序和分级。每个菜单项本质是其对应页面的链接。因此我们现在可以更新一下上面说到的 Drupal 添加页面和内容的流程：</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/Drupal8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/image-20200419002400379.png" alt="image-20200419002400379" /></p><h2 id="介绍常用模块不间断更新"><a class="markdownIt-Anchor" href="#介绍常用模块不间断更新"></a> 介绍常用模块（不间断更新）</h2><h3 id="系统管理"><a class="markdownIt-Anchor" href="#系统管理"></a> 系统管理</h3><ul><li>Allowed Formats：添加内容类型的 Body 字段时，指定可用的文本编辑器。</li><li>Business Rules：Drupal 8.X 以上版本对 Rules 模块的替代，用来实现根据不同“条件（Condition）”执行对应的“动作（Action）”，比 Rules 模块好用。</li><li>Structure Sync：允许导出菜单、分类、自定义区块。</li><li>Configuration Partial Export：允许到处单个或者多个配置。</li><li>Admin Toolbar：允许 Toolbar 显示下拉菜单。</li><li>Rename Admin Paths：允许重命名登录和后台管理页面的路径，默认为 “/user” 和 “/admin”。</li><li>Display Suite：允许对内容类型的字段进行分栏，提供多栏显示的功能。</li></ul><h3 id="内容创作"><a class="markdownIt-Anchor" href="#内容创作"></a> 内容创作</h3><ul><li>Blazy：提供图片懒加载功能。</li><li>Gutenburg：WordPress 古腾堡编辑器。</li><li>Views Infinite Scroll：无限滚动分页。</li><li>Metatag：提供页面或者内容的元信息，方便 SEO。</li><li>Layout Builder：提供可视化的显示方式编辑（Manage display）</li><li>ImageWidgetCrop：提供图片剪切的功能。</li><li>Background Images Formatter：格式化 CSS 中使用的背景图片。</li></ul><h1 id="主题开发"><a class="markdownIt-Anchor" href="#主题开发"></a> 主题开发</h1><h2 id="名词解释"><a class="markdownIt-Anchor" href="#名词解释"></a> 名词解释</h2><ul><li>Entity：Drupal 管理的一切内容都是实体（Entity），包括 Nodes、Users 、Comments等；</li><li>Nodes：Drupal 上的所有内容均被存储并视为结点（Node），Node 可以是任何内容，例如页面，文章；</li><li>Field：可以添加到元素的数据字段，例如标题，正文，注释，标签，图像；</li><li>theme hook suggestions：Drupal确定模板文件可以使用的名称的过程，类似于 Wordpress 决定使用哪个页面模板的过程。</li></ul><h2 id="主题的文件结构"><a class="markdownIt-Anchor" href="#主题的文件结构"></a> 主题的文件结构</h2><p>自定义的主题建议放在 <code>/themes/custom/</code> 下面 （非必须）</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-*.info.yml          // 定义元数据，全局库和区域块</span><br>|<span class="hljs-string">-*.libraries.yml     // 定义主题可以加载的 JS/CSS 库</span><br>|<span class="hljs-string">-*.breakpoints.yml   // 定义响应式断点（仅当Drupal需要与断点进行交互时）</span><br>|<span class="hljs-string">-*.theme             // 定义条件逻辑、数据预处理以及扩展基本主题设置</span><br>|<span class="hljs-string">-templates           // 定义主题页面模板</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">-maintenance-page.html.twig</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">-node.html.twig</span><br>|<span class="hljs-string">-config              // 定义主题所需的各种变量</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">-install</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">-*.settings.yml</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">-schema</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">-*.schema.yml</span><br>|<span class="hljs-string">-css</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">-style.css</span><br>|<span class="hljs-string">-js</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">-script.js</span><br>|<span class="hljs-string">-images</span><br>|<span class="hljs-string">  </span>|<span class="hljs-string">-buttons.png</span><br>|<span class="hljs-string">-logo.svg</span><br>|<span class="hljs-string">-screenshot.png</span><br></code></pre></td></tr></table></figure><h2 id="编写-infoyml-文件"><a class="markdownIt-Anchor" href="#编写-infoyml-文件"></a> 编写 <code>*.info.yml</code> 文件</h2><p>必需属性：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">xxxxx</span>   <span class="hljs-string">//</span> <span class="hljs-string">主题的名字，用来显示在“外观”菜单中</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">theme</span>   <span class="hljs-string">//</span> <span class="hljs-string">指明类型为</span> <span class="hljs-string">theme</span> <span class="hljs-string">而非</span> <span class="hljs-string">module</span> <span class="hljs-string">或者</span> <span class="hljs-string">profile</span><br><span class="hljs-attr">core:</span> <span class="hljs-number">8.</span><span class="hljs-string">x</span>     <span class="hljs-string">//</span> <span class="hljs-string">指明</span> <span class="hljs-string">Drupal</span> <span class="hljs-string">Core</span> <span class="hljs-string">的版本</span><br></code></pre></td></tr></table></figure><p>可选属性：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">description:</span> <span class="hljs-string">xxxxxx</span> <span class="hljs-string">//</span> <span class="hljs-string">主题的描述</span><br><span class="hljs-attr">package:</span> <span class="hljs-string">Core</span>       <span class="hljs-string">//</span> <span class="hljs-string">指定主题的分组</span><br><span class="hljs-attr">php:</span> <span class="hljs-string">x.x.x</span>          <span class="hljs-string">//</span> <span class="hljs-string">所需最低版本的</span> <span class="hljs-string">PHP</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">x.x.x</span>      <span class="hljs-string">//</span> <span class="hljs-string">给主题指定一个版本</span><br><span class="hljs-attr">base theme:</span> <span class="hljs-string">classy</span>  <span class="hljs-string">//</span> <span class="hljs-string">继承某个主题的资源</span><br><span class="hljs-attr">logo:</span> <span class="hljs-string">xxx</span>           <span class="hljs-string">//</span> <span class="hljs-string">指定主题LOGO</span><br><span class="hljs-attr">screenshot:</span> <span class="hljs-string">xxx</span>     <span class="hljs-string">//</span> <span class="hljs-string">指定主题缩略图（588x438）</span><br><span class="hljs-attr">features:</span>           <span class="hljs-string">//</span> <span class="hljs-string">指定要在主题“设置”页面上显示的功能列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">comment_user_verification</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">comment_user_picture</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">favicon</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">logo</span><br><br><span class="hljs-attr">ckeditor_stylesheets:</span> <span class="hljs-string">//</span> <span class="hljs-string">定义</span> <span class="hljs-string">CKEditor</span> <span class="hljs-string">的样式</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://fonts.googleapis.com/css?family=Open+Sans</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">css/base/elements.css</span><br><br><span class="hljs-attr">regions:</span>              <span class="hljs-string">//</span> <span class="hljs-string">指定主题的区域（注意没有横杠）</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-string">Header</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">Content</span><br>  <span class="hljs-attr">sidebar_first:</span> <span class="hljs-string">&#x27;First sidebar&#x27;</span><br><span class="hljs-attr">regions_hidden:</span>       <span class="hljs-string">//</span> <span class="hljs-string">指定要移除的区域（这里有横杠）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">sidebar_last</span><br><br><span class="hljs-attr">libraries:</span>            <span class="hljs-string">//</span> <span class="hljs-string">启用主题时加载的</span> <span class="hljs-string">CSS/JS</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">*/global-styling</span><br><br><span class="hljs-attr">libraries-override:</span>   <span class="hljs-string">//</span> <span class="hljs-string">启用主题时覆盖原本的</span> <span class="hljs-string">CSS/JS</span><br>  <span class="hljs-attr">contextual/drupal.contextual-links:</span><br>    <span class="hljs-attr">css:</span><br>      <span class="hljs-attr">component:</span>      <span class="hljs-string">//</span> <span class="hljs-string">上面三个部分都是对应库的</span> <span class="hljs-string">namespace</span><br>        <span class="hljs-string">/core/themes/stable/css/contextual/contextual.module.css:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">libraries-extend:</span>     <span class="hljs-string">//</span> <span class="hljs-string">当某个库加载的同时额外加载的库</span><br>  <span class="hljs-attr">core/drupal.user:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">classy/user1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">classy/user2</span><br></code></pre></td></tr></table></figure><p>其他还有 <code>hidden</code>、<code>engine</code>等可选属性</p><h3 id="设置区域块"><a class="markdownIt-Anchor" href="#设置区域块"></a> 设置区域块</h3><p>设置区域块包含两个步骤：</p><ul><li>将区域元数据添加到 THEMENAME.info.yml 文件；</li><li>将定义的区域输出到 page.html.twig 文件。</li></ul><blockquote><p>注：如果在主题中声明任何区域，将会使默认区域无效，因此这种情况下需要自己声明所有区域</p></blockquote><p>默认区域：</p><ol><li>page.header</li><li>page.primary_menu</li><li>page.secondary_menu</li><li>page.highlighted</li><li>page.help (dynamic help text, mostly for admin pages)</li><li>page.content (main content of current page)</li><li>page.sidebar_first</li><li>page.sidebar_second</li><li>page.footer</li><li>page.breadcrumb</li></ol><p>首先需要在 <code>*.info.yml</code> 中指定所需的 <code>regions</code>，比如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">regions:</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;Header&#x27;</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;Content&#x27;</span><br>  <span class="hljs-attr">footer:</span> <span class="hljs-string">&#x27;Footer&#x27;</span><br></code></pre></td></tr></table></figure><p>之后就需要在 <code>templates/page.html.twig</code> 中添加定义的区域：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-variable">&#123;&#123; page.header &#125;&#125;</span><br></code></pre></td></tr></table></figure><p><code>page</code> 为所定义区域的命名空间</p><h3 id="加载-css-和-js-资源"><a class="markdownIt-Anchor" href="#加载-css-和-js-资源"></a> 加载 CSS 和 JS 资源</h3><p>加载 CSS 和 JS 包含两个步骤：</p><ul><li>在 <code>* .libraries.yml</code> 文件中定义所有库；</li><li>将库附加到所有页面或者特定页面。</li></ul><p>首先在 <code>*.libraries.yml</code> 中<strong>声明</strong>需要使用的库（CSS/JS），如下所示，<code>&#123;&#125;</code> 内部可以定义各种参数，具体参考：<em><a href="https://www.drupal.org/docs/8/theming/adding-stylesheets-css-and-javascript-js-to-a-drupal-8-theme#libraries-options-details">Defining Libraries: Options &amp; Details</a></em>：</p><blockquote><p>注意： <code>*.info.yml</code> 中 <code>libraries</code> 所定义的库会应用于所有主题页面</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">cuddly-slider:</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">1.</span><span class="hljs-string">x</span><br>  <span class="hljs-attr">css:</span><br>    <span class="hljs-attr">theme:</span><br>      <span class="hljs-attr">css/cuddly-slider.css:</span> &#123;&#125;<br>  <span class="hljs-attr">js:</span><br>    <span class="hljs-attr">js/cuddly-slider.js:</span> &#123;&#125;<br>    <span class="hljs-attr">dependencies:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">core/jquery</span><br><br><span class="hljs-attr">global-styling:</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">1.</span><span class="hljs-string">x</span><br>  <span class="hljs-attr">css:</span><br>    <span class="hljs-attr">theme:</span><br>      <span class="hljs-attr">css/layout.css:</span> &#123;&#125;<br>      <span class="hljs-attr">css/style.css:</span> &#123;&#125;<br>      <span class="hljs-attr">css/colors.css:</span> &#123;&#125;<br><br><span class="hljs-attr">global-scripts:</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">1.</span><span class="hljs-string">x</span><br>  <span class="hljs-attr">js:</span><br>    <span class="hljs-attr">js/navmenu.js:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，cuddly-slider.js 储存在 <code>js/</code> 目录中，cuddly-slider.css 储存在 <code>css/</code> 目录中。默认情况下，Drupal 8 不再在所有页面上加载 jQuery，因此需要指定 <code>dependencies</code>，由于 Drupal 的 Core 包含了 jQuery，因此只需要指定 <code>core/jquery</code> 即可，对于其他需要使用的依赖，按照 <code>resource/library</code>  的格式引用即可</p><p>关于 <code>css</code> 中的 <code>theme</code>，表示 css 文件所属的样式类型，共有 5 种不同的样式类型，不同的样式类型有不同的 CSS 权重：</p><ul><li><code>base</code>: CSS reset/normalize plus HTML element styling. Key assigns a weight of <code>CSS_BASE = -200</code></li><li><code>layout</code>: macro arrangement of a web page, including any grid systems. Key assigns a weight of <code>CSS_LAYOUT = -100</code></li><li><code>component</code>: discrete, reusable UI elements. Key assigns a weight of <code>CSS_COMPONENT = 0</code></li><li><code>state</code>: styles that deal with client-side changes to components. Key assigns a weight of <code>CSS_STATE = 100</code></li><li><code>theme</code>: purely visual styling (“look-and-feel”) for a component. Key assigns a weight of <code>CSS_THEME = 200</code></li></ul><h4 id="将库应用到所有页面"><a class="markdownIt-Anchor" href="#将库应用到所有页面"></a> 将库应用到所有页面</h4><p>在 <code>*.info.yml</code> 的 <code>libraries</code> 中添加所需的全局库：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">libraries:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">*/global-styling</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">*/global-scripts</span><br></code></pre></td></tr></table></figure><h4 id="将库应用到部分页面"><a class="markdownIt-Anchor" href="#将库应用到部分页面"></a> 将库应用到部分页面</h4><p>在 <code>*.theme</code> 文件中使用钩子函数 <code>THEME.preprocess_HOOK()</code> ，其中 <code>THEME</code> 是主题名，<code>HOOK</code> 是需要加载库的页面名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fluffiness_preprocess_maintenance_page</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$variables</span></span>) </span>&#123;<br>  <span class="hljs-variable">$variables</span>[<span class="hljs-string">&#x27;#attached&#x27;</span>][<span class="hljs-string">&#x27;library&#x27;</span>][] = <span class="hljs-string">&#x27;fluffiness/cuddly-slider&#x27;</span>;<br>&#125; <span class="hljs-comment">// 在维护页面中加载“fluffiness/cuddly-slider”库</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：除了上述方法，还可以在 Twig 模板中使用 <code>attach_library()</code> 函数加载库</p></blockquote><h3 id="设置断点"><a class="markdownIt-Anchor" href="#设置断点"></a> 设置断点</h3><blockquote><p>注意：仅当 Drupal 需要与断点进行交互时才需要将 CSS 断点写到 <code>*.breakpoints.yml</code> 文件中，例如在使用“响应式图像”模块的情况下。</p></blockquote><p>主题和模块可以通过创建一个名为 <code>*.breakpoints.yml</code> 的配置文件来定义断点。该文件中每一块内容代表一个断点，每个断点包括一个标识符，例如 <code>bartik.mobile</code>，随后是定义这个断点的属性：</p><ol><li><code>label</code>：断点的标签</li><li><code>mediaQuery</code>：媒体查询语句</li><li><code>weight</code>：断点的权重（顺序）</li><li><code>multipliers</code>：支持的像素分辨率乘数</li></ol><p>最小 <code>min-width</code> 的断点应具有最小的权重，而最大 <code>min-width</code> 的断点应具有较大的权重。默认情况下，模块将按从最小到最大的顺序对断点进行排序，即移动端优先的原则。</p><p>断点可以进行分组。例如布局断点和图像断点分开，详细使用方法去看文档。</p><h2 id="使用-twig-模板"><a class="markdownIt-Anchor" href="#使用-twig-模板"></a> 使用 Twig 模板</h2><p>Twig 模板的使用方法参考：<a href="https://symfony.com/doc/current/templates.html">Creating and Using Templates</a></p><h3 id="twig-基本语法"><a class="markdownIt-Anchor" href="#twig-基本语法"></a> Twig 基本语法</h3><h4 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h4><ol><li>定义变量</li></ol><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> foo = &#x27;foo&#x27; %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> foo = [1, 2] %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> foo = &#123;&#x27;foo&#x27;: &#x27;bar&#x27;&#125; %&#125;</span><br></code></pre></td></tr></table></figure><p>调用变量：<code>&#123;&#123; foo.bar &#125;&#125;</code></p><ol start="2"><li>Filter</li></ol><p>变量可以通过过滤器修改，类似于 shell，通过“|”管道符分隔。可以链接多个过滤器，一个过滤器的输出将作为下一个过滤器的输入</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-variable">&#123;&#123; name|<span class="hljs-keyword">striptags</span>|<span class="hljs-keyword">title</span> &#125;&#125;</span><br><span class="hljs-template-variable">&#123;&#123; list|<span class="hljs-keyword">join</span>(&#x27;, &#x27;) &#125;&#125;</span><span class="xml"> </span><span class="hljs-comment">&#123;# 带参数的形式 #&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">apply</span></span> upper %&#125;</span><span class="xml">     </span><span class="hljs-comment">&#123;# 在代码段上应用过滤器 #&#125;</span><br><span class="xml">    This text becomes uppercase</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endapply</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h4 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h4><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">for</span></span> i in <span class="hljs-name">range</span><span class="hljs-params">(0, 3)</span> %&#125;</span><span class="xml"></span><span class="hljs-comment">&#123;# 普通形式 #&#125;</span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123; i &#125;&#125;</span><span class="xml">,</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endfor</span></span> %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">for</span></span> i in <span class="hljs-name">range</span><span class="hljs-params">(low=1, high=10, step=2)</span> %&#125;</span><span class="xml"></span><span class="hljs-comment">&#123;# 命名参数形式 #&#125;</span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123; i &#125;&#125;</span><span class="xml">,</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：命名参数还可以用来跳过一些不想更改其默认值的参数</p></blockquote><h4 id="控制结构"><a class="markdownIt-Anchor" href="#控制结构"></a> 控制结构</h4><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">if</span></span> users|<span class="hljs-keyword">length</span> &gt; 0 %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">for</span></span> user in users %&#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; user.username|e &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endfor</span></span> %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h4 id="引用其他模板"><a class="markdownIt-Anchor" href="#引用其他模板"></a> 引用其他模板</h4><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">include</span><span class="hljs-params">(&#x27;sections/articles/sidebar.html&#x27;)</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="模板继承"><a class="markdownIt-Anchor" href="#模板继承"></a> 模板继承</h4><p>模板继承使您可以构建基本的“骨架”模板，该模板包含站点的所有常见元素，并定义子模板可以覆盖的 <code>block</code></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">block</span></span> head %&#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">block</span></span> title %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endblock</span></span> %&#125;</span><span class="xml"> - My Webpage<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endblock</span></span> %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">block</span></span> content %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endblock</span></span> %&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="xml">            </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">block</span></span> footer %&#125;</span><br><span class="xml">                <span class="hljs-symbol">&amp;copy;</span> Copyright 2011 by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://domain.invalid/&quot;</span>&gt;</span>you<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.</span><br><span class="xml">            </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endblock</span></span> %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>子模版：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">extends</span></span> &quot;base.html&quot; %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">block</span></span> title %&#125;</span><span class="xml">Index</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endblock</span></span> %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">block</span></span> head %&#125;</span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">parent</span><span class="hljs-params">()</span> &#125;&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="xml">        .important &#123; color: #336699; &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endblock</span></span> %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">block</span></span> content %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;important&quot;</span>&gt;</span></span><br><span class="xml">        Welcome to my awesome homepage.</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="调试-twig-模板"><a class="markdownIt-Anchor" href="#调试-twig-模板"></a> 调试 Twig 模板</h3><p>调试 Twig 模板有两种方法：使用 Devel 模块或者使用 twig_xdebug 模块配合 xdebug 调试。Devel 主要用来检查Twig 模板的变量，实际调试过程中，还是 xdebug 好用，因为可以在 IDE 中查看变量和调用栈。因此我选择主要用 xdebug 进行调试，Devel 辅助查看变量。</p><p>使用 xdebug 调试 Twig 需要的步骤：</p><ol><li><p>安装 xdebug 并在 php.ini 中开启：</p><ul><li>把 <code>phpinfo()</code> 输出的信息复制到 <a href="https://xdebug.org/wizard">https://xdebug.org/wizard</a> 获取安装方式</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=D:\xampp\php\ext\php_xdebug-<span class="hljs-number">2.9</span>.<span class="hljs-number">4</span>-<span class="hljs-number">7.4</span>-vc15-x<span class="hljs-number">86_64</span>.dll<br><br><span class="hljs-section">[xDebug]</span><br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>启动之后，xdebug 默认监听 <code>127.0.0.1:9000</code></p></li><li><p>浏览器安装 Xdebug Helper (Google Chrome &amp; Firefox)</p></li><li><p>安装 <code>twig_xdebug</code> 模块并开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer require --dev drupal/twig_xdebug<br>drush en -y twig_xdebug<br></code></pre></td></tr></table></figure></li><li><p>在 twig 文件中使用 <code>{{ breakpoint() }}</code></p></li><li><p>如果需要使用 <code>dump()</code> 函数检查变量，则需要本地开启 <code>debug</code> 模式：<code>drupal site:mode dev</code></p></li></ol><blockquote><p>注意：经过测试，使用 <code>drupal site:mode dev</code> 之后，还是需要 <code>drupal cr</code> 才能看到效果，使用 <a href="https://www.drupal.org/node/2598914">Disable Drupal 8 caching during development</a> 的第一种方法即使用“settings.local.php”的方法在当前版本（version 8.8.5）确认有效</p></blockquote><h3 id="twig模板命名约定"><a class="markdownIt-Anchor" href="#twig模板命名约定"></a> Twig模板命名约定</h3><ul><li><p>HTML 模板：<em>html.html.twig</em> (core/modules/system/templates/html.html.twig)</p><blockquote><p>提供 HTML 页面基本结构的标记，包括 <code>&lt;head&gt;</code>，<code>&lt;title&gt;</code> 和 <code>&lt;body&gt;</code> 标记</p></blockquote></li><li><p>Page 模板：<em>page.html.twig</em> (core/modules/system/templates/page.html.twig)</p><blockquote><p>提供每个单独页面的模板，比如首页：<code>page--front.html.twig</code></p><p>匹配模式：<em>page–[front|internal/path].html.twig</em></p></blockquote></li><li><p>Regions 模板：<em>region.html.twig</em> (core/modules/system/templates/region.html.twig)</p><blockquote><p>匹配模式：<em>region–[region].html.twig</em></p></blockquote></li><li><p>Blocks 模板：<em>block.html.twig</em> (core/modules/block/templates/block.html.twig)</p><blockquote><p>匹配模式：<em>block–[module|–[delta].html.twig</em></p></blockquote></li><li><p>Nodes 模板：<em>node.html.twig</em> (core/modules/node/templates/node.html.twig)</p><blockquote><p>匹配模式：<em>node–[content-type|nodeid]–[viewmode].html.twig</em></p></blockquote></li><li><p>Taxonomy terms 模板：<em>taxonomy-term.html.twig</em> (core/modules/taxonomy/templates/taxonomy-term.html.twig)</p><blockquote><p>匹配模式：<em>taxonomy-term–[vocabulary-machine-name|tid].html.twig</em></p></blockquote></li><li><p>Fields 模板：<em>field.html.twig</em> (core/modules/system/templates/field.html.twig)</p><blockquote><p>匹配模式：<em>field–[[type|name]|[entity-type]–[field-name|content-type]].html.twig</em></p></blockquote></li><li><p>Comments 模板：<em>comment.html.twig</em> (core/modules/comment/templates/comment.html.twig)</p><blockquote><p>匹配模式：<em>comment–[comment-field-name]–[node-type].html.twig</em></p></blockquote></li><li><p>Views 模板：views-view.html.twig (core/themes/stable/templates/views/views-view.html.twig)</p><blockquote><p>匹配模式： views-view–[<em>viewid</em>]–[<em>view-display-id</em>].html.twig</p><p>​views-view–[<em>viewid</em>]–[<em>view-display-type</em>].html.twig</p><p>​views-view–[<em>view-display-type</em>].html.twig</p><p>​views-view–[<em>viewid</em>].html.twig</p></blockquote></li></ul><p>另外还有 Forums、Maintenance Page、Search result 等页面的模板。</p><blockquote><p>注：添加模板后，必须重新构建缓存，以使 Drupal 使用新模板：<code>drush cr</code></p></blockquote><h3 id="覆盖模板"><a class="markdownIt-Anchor" href="#覆盖模板"></a> 覆盖模板</h3><p>为了覆盖已有的模板，需要：</p><ul><li>找到想要覆盖的模板文件；</li><li>将模板文件从其原本位置复制到对应主题内；</li><li>按需修改模板。</li></ul><p>有时只需要覆盖模板的某一部分内容，这时可以使用 Theme hook suggestions：</p><ul><li><a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_theme_suggestions_HOOK/8"><code>hook_theme_suggestions_HOOK(array $variables)</code></a></li><li><a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_theme_suggestions_alter/8"><code>hook_theme_suggestions_alter(array &amp;$suggestions, array $variables, $hook)</code></a></li><li><a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_theme_suggestions_HOOK_alter/8"><code>hook_theme_suggestions_HOOK_alter(array &amp;$suggestions, array $variables)</code></a></li></ul><h3 id="模板中使用属性对象"><a class="markdownIt-Anchor" href="#模板中使用属性对象"></a> 模板中使用属性对象</h3><p>许多 Twig 模板具有一个或多个作为变量传递的属性对象。默认情况下，以下属性对象变量可用于所有模板：<code>attributes</code>，<code>title_attributes</code> 和 <code>content_attributes</code></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml">&lt;div</span><span class="hljs-template-variable">&#123;&#123; attributes &#125;&#125;</span><span class="xml">&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml">attributes.addClass()</span><br><span class="xml">attributes.removeClass()</span><br><span class="xml">attributes.setAttribute($attribute, $value)</span><br><span class="xml">attributes.removeAttribute($attribute)</span><br><span class="xml">attributes.hasClass($class)</span><br></code></pre></td></tr></table></figure><p>创建一个新的属性对象：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml">&lt;div</span><span class="hljs-template-variable">&#123;&#123; create_attribute(&#123;&#x27;class&#x27;: [&#x27;region&#x27;, &#x27;region--header&#x27;]&#125;) &#125;&#125;</span><span class="xml">&gt;</span><br><span class="xml">  </span><span class="hljs-template-variable">&#123;&#123; content &#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>可以在 <code>.theme</code> 文件中对属性对象进行预处理或者修改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Implements hook_preprocess_HOOK() for menu.html.twig.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mytheme_preprocess_menu</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$variables</span></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$variables</span>[<span class="hljs-string">&#x27;menu_name&#x27;</span>] == <span class="hljs-string">&#x27;main&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$variables</span>[<span class="hljs-string">&#x27;attributes&#x27;</span>][<span class="hljs-string">&#x27;class&#x27;</span>])) &#123;<br>      <span class="hljs-variable">$variables</span>[<span class="hljs-string">&#x27;attributes&#x27;</span>][<span class="hljs-string">&#x27;class&#x27;</span>] = [];<br>    &#125;<br>    <span class="hljs-variable">$variables</span>[<span class="hljs-string">&#x27;attributes&#x27;</span>][<span class="hljs-string">&#x27;class&#x27;</span>] = array_merge(<span class="hljs-variable">$variables</span>[<span class="hljs-string">&#x27;attributes&#x27;</span>][<span class="hljs-string">&#x27;class&#x27;</span>], [<span class="hljs-string">&#x27;my-main-menu&#x27;</span>]);  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建高级主题设置"><a class="markdownIt-Anchor" href="#创建高级主题设置"></a> 创建高级主题设置</h2><p>高级主题设置即在“管理/外观/设置”里面对应主题名的设置页面，通常由 <code>THEME.theme</code> 或者 <code>theme-settings.php</code> 两个文件来进行控制，使用 <strong>Forms API</strong> 添加需要进行设置的项目。以 <code>THEMENAME_form_system_theme_settings_alter(&amp;$form, $form_state)</code> 为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo_form_system_theme_settings_alter</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$form</span>, \Drupal\Core\Form\FormStateInterface <span class="hljs-variable">$form_state</span>, <span class="hljs-variable">$form_id</span> = <span class="hljs-literal">NULL</span></span>) </span>&#123;<br>  <span class="hljs-comment">// Work-around for a core bug affecting admin themes. See issue #943212.</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$form_id</span>)) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-variable">$form</span>[<span class="hljs-string">&#x27;foo_example&#x27;</span>] = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;#type&#x27;</span>          =&gt; <span class="hljs-string">&#x27;textfield&#x27;</span>,<br>    <span class="hljs-string">&#x27;#title&#x27;</span>         =&gt; t(<span class="hljs-string">&#x27;Widget&#x27;</span>),<br>    <span class="hljs-string">&#x27;#default_value&#x27;</span> =&gt; theme_get_setting(<span class="hljs-string">&#x27;foo_example&#x27;</span>),<br>    <span class="hljs-string">&#x27;#description&#x27;</span>   =&gt; t(<span class="hljs-string">&quot;Place this text in the widget spot on your site.&quot;</span>),<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>默认值需要定义在 <code>config/install/THEME.settings.yml</code> 文件中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">foo_example:</span> <span class="hljs-string">default</span> <span class="hljs-string">value</span><br></code></pre></td></tr></table></figure><p>随后在所有主题的 PHP 文件中，可通过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$foo_example</span> = theme_get_setting(<span class="hljs-string">&#x27;foo_example&#x27;</span>);<br></code></pre></td></tr></table></figure><p>获取这个值，如果需要在 Twig 文件中使用，需要先在 <code>THEME.theme</code> 文件中定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo_preprocess_node</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$variables</span></span>) </span>&#123;<br>  <span class="hljs-variable">$variables</span>[<span class="hljs-string">&#x27;foo_example&#x27;</span>] = theme_get_setting(<span class="hljs-string">&#x27;foo_example&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后就可以在 Twig 文件中直接使用 <code>&#123;&#123; foo_example &#125;&#125;</code> 获取变量值</p><h1 id="附录1常用命令"><a class="markdownIt-Anchor" href="#附录1常用命令"></a> 附录1：常用命令</h1><ul><li>安装 Drupal</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer create-project drupal/recommended-project ./dir-name<br></code></pre></td></tr></table></figure><ul><li>安装 drush</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer require drush/drush<br></code></pre></td></tr></table></figure><ul><li>更新模块</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer outdated &#x27;drupal/*&#x27; # 检查可更新模块<br>composer update drupal/modulename --with-dependencies # 更新对应模块<br><br>drush updatedb<br>drush cache:rebuild<br>drush config:export --diff # 更新数据库、重建缓存同时导出可能更改的配置<br></code></pre></td></tr></table></figure><ul><li>列出已安装模块</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer [global] show -i<br></code></pre></td></tr></table></figure><ul><li>快速创建 Drupal 实例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php ./core/scripts/drupal quick-start PROFILE<br></code></pre></td></tr></table></figure><h1 id="附录2实用技巧"><a class="markdownIt-Anchor" href="#附录2实用技巧"></a> 附录2：实用技巧</h1><ul><li>在 JS 中判断当前页面是否为主页：</li></ul><p>先在 <code>* .libraries.yml</code> 文件中加载 <code>drupalSettings</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">js:</span><br>  <span class="hljs-attr">js/main.js:</span> &#123;&#125;<br><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">core/jquery</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">core/drupalSettings</span><br></code></pre></td></tr></table></figure><p>然后在 JS 文件中调用 <code>drupalSettings.path.isFront</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$, drupalSettings</span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(drupalSettings.path.isFront);<br>&#125;)(jQuery, drupalSettings);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给博客添加Live2D看板娘</title>
    <link href="/2020/03/03/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <url>/2020/03/03/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
    
    <content type="html"><![CDATA[<p>突然心血来潮想给自己的 Hexo 博客也整一个看板娘，刚刚好手上又有一个比较喜欢的角色模型，于是就开始动手，很快就找到了 <code>hexo-helper-live2d</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo-helper-live2d">[1]</span></a></sup>这个插件，配置也非常简单，三下五除二就搞定了，效果还不错，甚至觉得有点无聊，因为没有一点儿挑战性😃</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/1.png" alt="" /></p><p>正当我准备收手的时候，我突然发现有点儿不对劲😕：模型除了会根据鼠标位置转头之外就没了，非常单调，这让准完美主义（指强迫症）的我非常难受。由于我手上的模型已经有打包好的多种动作表情，因此我打算先去看看有没有什么办法可以直接调用模型的这些动作。Cubism Editor 就是制作 Live2D 模型的工具，我想大概也可以拿来修改模型从而加载各种动作吧，于是就下载了最新版（4.0）。然而杯具的是无论是 Cubism Editor 还是附带安装的 Viewer 都没法打开我的模型。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/2.png" alt="" /></p><p>百度了相关文章，不出预料果然就是软件版本的问题，现在已有的模型，基本都是用 Cubism Editor 2 开发的，新版本并没有向下兼容，因此是没法用官方的最新软件来编辑的。好在同时发现一个 Live2D Viewer<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Live2D Viewer for Cubism 2">[2]</span></a></sup> 的软件可以直接打开旧版本模型，只需要安装 Adobe Air 就可以使用。</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/3.png" alt="" /></p><p>通过查找软件使用文档（官方是日语，有中文版的镜像站但是完成度不高），基本摸清了这个软件的使用方法和 Live2D 模型的组成结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">textures/             <span class="hljs-comment">//模型贴图</span><br>  ├──texture_xx.png<br>  └──...<br>expressions/          <span class="hljs-comment">//模型表情</span><br>├──xx<span class="hljs-selector-class">.exp</span>.json<br>└──...<br>motions/              <span class="hljs-comment">//模型动作</span><br>├──xx.mtn<br>└──...<br>xxx<span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.moc</span>         <span class="hljs-comment">//模型数据</span><br>xxx<span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.json</span>        <span class="hljs-comment">//模型设置</span><br>physics<span class="hljs-selector-class">.json</span>          <span class="hljs-comment">//物理效果设置</span><br>pose<span class="hljs-selector-class">.json</span>             <span class="hljs-comment">//姿势设置</span><br></code></pre></td></tr></table></figure><p>分别点击表情和动作文件，可以在旁边的模型预览效果，需要新的效果可以自己调整下方的参数。不过毕竟不是来搞模型设计的，贴图、物理效果、姿势这些不用管了，也不需要自己制作表情和动作，想办法把已有的资源利用起来就好了，那么关键就是 <code>xxx.mode.json</code> 这个文件了。以我这个模型为例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;Sample 1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;madoka&quot;</span>,<br>  <span class="hljs-attr">&quot;model&quot;</span>: <span class="hljs-string">&quot;model.moc&quot;</span>,<br>  <span class="hljs-attr">&quot;textures&quot;</span>: [<br>    <span class="hljs-string">&quot;model.2048/texture_00.png&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;physics&quot;</span>: <span class="hljs-string">&quot;physics.json&quot;</span>,<br>  <span class="hljs-attr">&quot;pose&quot;</span>: <span class="hljs-string">&quot;pose.json&quot;</span>,<br>  <span class="hljs-attr">&quot;expressions&quot;</span>:<br>  [<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f01&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f01.exp.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f02&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f02.exp.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f03&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f03.exp.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f04&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f04.exp.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f05&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f05.exp.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f06&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f06.exp.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f07&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f07.exp.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;f08&quot;</span>,<span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;expressions/f08.exp.json&quot;</span>&#125;<br>  ],<br>  <span class="hljs-attr">&quot;layout&quot;</span>:<br>  &#123;<br>    <span class="hljs-attr">&quot;center_x&quot;</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;y&quot;</span>:<span class="hljs-number">1.5</span>,<br>    <span class="hljs-attr">&quot;width&quot;</span>:<span class="hljs-number">2.8</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hit_areas&quot;</span>: [<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;head&quot;</span>, <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;D_REF.HEAD&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;D_REF.BODY&quot;</span>&#125;<br>  ],<br>  <span class="hljs-attr">&quot;motions&quot;</span>:<br>  &#123;<br>    <span class="hljs-attr">&quot;idle&quot;</span>: [<br>      &#123;<span class="hljs-attr">&quot;file&quot;</span>: <span class="hljs-string">&quot;mtn/idle_01.mtn&quot;</span>, <span class="hljs-attr">&quot;fade_in&quot;</span>: <span class="hljs-number">2000</span>, <span class="hljs-attr">&quot;fade_out&quot;</span>: <span class="hljs-number">2000</span>&#125;,<br>      &#123;<span class="hljs-attr">&quot;file&quot;</span>: <span class="hljs-string">&quot;mtn/idle_02.mtn&quot;</span>, <span class="hljs-attr">&quot;fade_in&quot;</span>: <span class="hljs-number">2000</span>, <span class="hljs-attr">&quot;fade_out&quot;</span>: <span class="hljs-number">2000</span>&#125;,<br>      &#123;<span class="hljs-attr">&quot;file&quot;</span>: <span class="hljs-string">&quot;mtn/idle_03.mtn&quot;</span>, <span class="hljs-attr">&quot;fade_in&quot;</span>: <span class="hljs-number">2000</span>, <span class="hljs-attr">&quot;fade_out&quot;</span>: <span class="hljs-number">2000</span>&#125;,<br>      &#123;<span class="hljs-attr">&quot;file&quot;</span>: <span class="hljs-string">&quot;mtn/idle_04.mtn&quot;</span>, <span class="hljs-attr">&quot;fade_in&quot;</span>: <span class="hljs-number">2000</span>, <span class="hljs-attr">&quot;fade_out&quot;</span>: <span class="hljs-number">2000</span>&#125;<br>    ],<br>    <span class="hljs-attr">&quot;tap_body&quot;</span>: [<br>      &#123;<span class="hljs-attr">&quot;file&quot;</span>: <span class="hljs-string">&quot;mtn/tap_body.mtn&quot;</span>&#125;<br>    ],<br>    <span class="hljs-attr">&quot;flick_head&quot;</span>: [<br>      &#123; <span class="hljs-attr">&quot;file&quot;</span>:<span class="hljs-string">&quot;mtn/flick_head.mtn&quot;</span>&#125;<br>    ]<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>参数非常多，但其实需要注意的就这几个：</p><ul><li><code>hit_areas</code>：设置模型的可触发区域，一般的模型都有“head”和“body”两个区域，后面的 <code>id</code> 是模型制作时设置的，可以在 Live2D Viewer 里面查看；</li><li><code>expressions</code>：设置模型的表情；</li><li><code>motions</code>：设置模型的动作；<ul><li><code>idle</code>：模型闲置时动作；</li><li><code>tap_body</code>：点击 <code>hit_areas</code> 中对应的部分时触发的动作，这里对应了“body”；</li><li><code>flick_head</code>：同上，这里对应了“head”。</li></ul></li></ul><p>其他参数要么意义不言而喻，要么就完全一无所知，关于这些参数，可以参考 <code>Live2DViewerEX</code> 文档中<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Live2DViewerEX中文文档">[3]</span></a></sup> SDK 配置这部分内容（<em>Live2DViewerEX 是 Steam 上的一个收费软件，功能类似 Wallpaper Engine，不过集成了 Live2D 的 SDK</em>）。当然最开始我的配置并没有这么完善，因此模型的动作才十分单调，新的配置中，我给模型增加了4个闲置时的动作，可以随机触发，一个点击头部的动作和一个点击身体的动作，这下终于完美了！</p><p>这么想的话就太天真了，模型现在确实动作多了起来，随之而来的 B！U！G！也来了。主要有两个问题，一个我设置了4个闲置动作，想的是可以随机触发4个不同的动作，然而实际运行时，每次加载出模型后会随机选择一个动作，然后会反复重复这个动作；另一个问题是我点击头部不会触发 <code>flick_head</code> 这个动作，而是随机切换表情。准完美主义（指强迫症）的我怎么可能允许这种问题存在！于是我又开始了新一轮的学（zuo）习（si）。</p><p>通过 <code>hexo-helper-live2d</code> 插件的文档和张鑫旭大佬的博客<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="二次元live2d看板娘效果中的web前端技术">[4]</span></a></sup>文章，我了解到 <code>hexo-helper-live2d</code> 插件使用的是 <code>Live2D_SDK_WebGL</code> 官方版的魔改版本 <code>live2d-widget</code><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="live2d-widget">[5]</span></a></sup>。也就是说可以确定问题来自 <code>live2d-widget</code> 这个插件，作为对比，我下载了官方 SDK，并运行了里面的例子，结果发现官方的示例中，尽管不存在第一个问题，但是单击头部依然是切换表情而非触发动作，此时骑虎难下，只好开始研究示例的代码。</p><p>折腾了一整天，终于大概搞懂了 SDK 的运作方法，同时找了下 SDK 的 API 参考<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Live2D API 参考文件(WebGL)">[6]</span></a></sup>，不完整，但是也可以了解一下。首先以官方示例（注：这个示例是我稍微魔改过的，修改了显示样式和代码格式，不影响原有功能）介绍一下 SDK 的组成，有兴趣的可以下载这个例子<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="Live2D_Demo提取码: 3gdn">[7]</span></a></sup>来玩一下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 注释是我个人对代码的作用理解的，不一定正确</span><br><br>framework/<br>  └──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Live2DFramework</span>.</span></span>js   <span class="hljs-comment">//对核心代码的扩展，提供一个完整的开发框架</span><br>lib/<br>└──live2d.min.js        <span class="hljs-comment">//Live2D的核心代码，混淆+压缩过的</span><br>utils/<br>├──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MatrixStack</span>.</span></span>js       <span class="hljs-comment">//用于图形处理的工具，没学过图形编程不懂</span><br>└──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ModelSettingJson</span>.</span></span>js  <span class="hljs-comment">//处理 model.json 文件</span><br>src/<br>├──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LAppDefine</span>.</span></span>js         <span class="hljs-comment">//定义全局变量</span><br>├──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PlatformManager</span>.</span></span>js    <span class="hljs-comment">//用来加载本地数据的类</span><br>├──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LAppModel</span>.</span></span>js          <span class="hljs-comment">//定义模型相关的类</span><br>├──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LAppLive2DManager</span>.</span></span>js  <span class="hljs-comment">//一个封装模型的类</span><br>└──<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SampleApp</span>.</span></span>js          <span class="hljs-comment">//应用程序</span><br>index.html<br>main.css<br></code></pre></td></tr></table></figure><p>然后是文档中描述的关于 Live2D 渲染模型的整个过程：</p><ol><li>初始化 canvas</li><li>创建 webgl 上下文</li><li>初始化 live2d</li><li>从moc文件读取Live2D模型对象</li><li>读取贴图，对 live2DModel 设置贴图、WebGL对象、矩阵</li><li>模型的更新和绘制</li></ol><p>通过对 SDK 整体的了解，再来找问题，就轻松多了（个屁），关于第二个问题，点击头部只切换表情不触发动作的，那么只需要找到触发事件的函数，再一个一个跟踪下去就能找到问题。最后找到是在 <code>LAppLive2DManager</code> 的 <code>LAppLive2DManager.prototype.tapEvent</code> 这里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">LAppLive2DManager.prototype.tapEvent = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (LAppDefine.DEBUG_LOG)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;tapEvent view x:&quot;</span> + x + <span class="hljs-string">&quot; y:&quot;</span> + y);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.models.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.models[i].hitTest(LAppDefine.HIT_AREA_HEAD, x, y)) &#123;<br>      <span class="hljs-keyword">if</span> (LAppDefine.DEBUG_LOG)<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Tap face.&quot;</span>);<br><br>      <span class="hljs-built_in">this</span>.models[i].setRandomExpression();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.models[i].hitTest(LAppDefine.HIT_AREA_BODY, x, y)) &#123;<br>      <span class="hljs-keyword">if</span> (LAppDefine.DEBUG_LOG)<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Tap body.&quot;</span> + <span class="hljs-string">&quot; models[&quot;</span> + i + <span class="hljs-string">&quot;]&quot;</span>);<br><br>      <span class="hljs-built_in">this</span>.models[i].startRandomMotion(LAppDefine.MOTION_GROUP_TAP_BODY, LAppDefine.PRIORITY_NORMAL);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以看到，输出日志 “Tap face” 的下面调用的 <code>setRandomExpression()</code> 方法，字面理解就是设置随机表情，这就是为什么点击头部只会切换表情了，只需要改为下面 “Tap body” 的部分一样，应该就可以触发动作了，因此把这里改成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.models[i].startRandomMotion(LAppDefine.MOTION_GROUP_FLICK_HEAD,LAppDefine.PRIORITY_NORMAL);<br></code></pre></td></tr></table></figure><p>这样一来，第二个问题就完美解决了，这时候再来看第一个问题。由于已经确定第一个问题是 <code>live2d-widget</code> 的原因，那么这里只需要把它和官方的代码对比一下，很容易就可以找到问题了（个屁）。通过查看网页的请求，可以发现官方代码中，每次随机选择一个闲置动作时，会发出一个 <code>ajax</code> 请求，而 <code>live2d-widget</code> 只请求一次，因此只要找到请求闲置动作的部分，大概率就可以找到问题。（这里每次随机都请求实际是官方代码的BUG，感谢官方的BUG，如果不是官网的BUG我也发现不了这个问题，具体什么BUG下面有讲到）</p><p><img src="https://hexo-1251051422.cos.ap-guangzhou.myqcloud.com/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/4.png" alt="" /></p><p>通过查找调用栈，最后终于找到相关代码，在 <code>LAppModel.js</code> 中的 <code>LAppModel.prototype.startMotion</code> 里面，有一段这样的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.motions[name] == <span class="hljs-literal">null</span>) &#123;<br>  <span class="hljs-built_in">this</span>.loadMotion(<span class="hljs-literal">null</span>, <span class="hljs-built_in">this</span>.modelHomeDir + motionName, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">mtn</span>) </span>&#123;<br>    motion = mtn;<br>    thisRef.setFadeInFadeOut(name, no, priority, motion);<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  motion = <span class="hljs-built_in">this</span>.motions[name];<br>  thisRef.setFadeInFadeOut(name, no, priority, motion);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面最开始判断使用的“name”应该是指动作的名字，所有动作都保存在 <code>this.motions</code> 中，不过根据代码的上下文来看，这里传入的名字是动作的组名“idle”（详见上面的 <code>config.json</code>，组名就是一组同类型动作的名称），具体的动作名称应该是“motionName” （上述代码前面定义的一个变量，保存的是当前加载的动作的文件名）。根据现在这段代码的意思，当 <code>this.motions</code> 里面没有名为“idle”的动作时，就加载一个随机动作并执行，否则的话就直接执行这个动作 。然而从 <code>config.json</code> 也看到，四个动作没有一个名字叫 ”idle“ 的，因此每次都会随机加载一个动作而不是直接执行这个动作。</p><p>再看 <code>live2d-widget</code> 中同样部分（<code>cModel.js</code>）的代码，跟官方的代码不同的地方在于 <code>loadMotion</code> 这个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.loadMotion(name, <span class="hljs-built_in">this</span>.modelHomeDir + motionName, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">mtn</span>) </span>&#123;...&#125;) <span class="hljs-comment">// cModel.js</span><br></code></pre></td></tr></table></figure><p><code>live2d-widget</code> 的 <code>cModel.js</code> 里这里的第一个参数是“name”而官方的代码中是“null”，我顺着找了下这个函数的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">L2DBaseModel.prototype.loadMotion = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name<span class="hljs-comment">/*String*/</span>, path <span class="hljs-comment">/*String*/</span>, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> pm = Live2DFramework.getPlatformManager(); <span class="hljs-comment">//IPlatformManager</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.debugMode) pm.log(<span class="hljs-string">&quot;Load Motion : &quot;</span> + path);<br><br>  <span class="hljs-keyword">var</span> motion = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">var</span> thisRef = <span class="hljs-built_in">this</span>;<br>  pm.loadBytes(path, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">buf</span>) </span>&#123;<br>    motion = Live2DMotion.loadMotion(buf);<br>    <span class="hljs-keyword">if</span> (name != <span class="hljs-literal">null</span>) &#123;<br>      thisRef.motions[name] = motion;<br>    &#125;<br>    callback(motion);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，如果参数指定的是一个“name”的话，加载完后就会把这个动作添加到 <code>this.motions</code> 中，然后回到 <code>startMotion</code> 时就会执行 <code>else</code> 后面的内容，即每次都会运行这个 motion，但是上面也说了，这里的“name”实际上是动作的组名 ”idle“，也就是说它会把加载的第一个动作保存为 <code>this.motions.idle</code>，之后无论随机到哪个动作，都只会运行 <code>this.motions.idle</code> 这个动作，因此出现了第一个问题。现在找到问题所在就很简单了，把 <code>live2d-widget</code> 中对应的地方的 <code>name</code> 改成 <code>null</code> 就可以了。</p><p>表面上看这样就解决问题了，实际上仔细想一下会发现官方的代码是有问题的，也就是上面说到的官方的BUG。如果每次都传入“idle”作为动作的名称，那么 <code>else</code> 之后的代码永远都不会运行了，这违反了这段代码的原意，仔细观察之后就会发现这段代码应该是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.motions[motionName] == <span class="hljs-literal">null</span>) &#123;<br>  <span class="hljs-built_in">this</span>.loadMotion(motionName, <span class="hljs-built_in">this</span>.modelHomeDir + motionName, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">mtn</span>) </span>&#123;<br>    motion = mtn;<br>    thisRef.setFadeInFadeOut(name, no, priority, motion);<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  motion = <span class="hljs-built_in">this</span>.motions[motionName];<br>  thisRef.setFadeInFadeOut(name, no, priority, motion);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样一来既能保证每次随机到不同的动作，又不需要每次重新请求动作文件，节省了 http 请求的时间。</p><p>目前对 Live2D 的了解就到这里了，哪怕是研究了一整天，也只是一点皮毛罢了，真正核心的图形编程我都还没开始入门，因此之后学习了相关知识后，再来写写文章吧。</p><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://sites.cybernoids.jp/cubism2/tools/live2d-viewer">Live2D Viewer for Cubism 2</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://live2d.pavostudio.com/doc/zh-cn/live2d/model-config-sdk2/">Live2DViewerEX中文文档</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.zhangxinxu.com/wordpress/2018/05/live2d-web-webgl-js/">二次元live2d看板娘效果中的web前端技术</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://github.com/xiazeyu/live2d-widget.js">live2d-widget</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="http://www.live2d.com/usermanual/cubism2_cn/sdk_tutorial/platform-setting/webgl/sample.html"><em>Live2D</em> API 参考文件(<em>WebGL</em>)</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://pan.baidu.com/s/10QdpMTBqz06W6HflfCjAPQ">Live2D_Demo提取码: 3gdn</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Live2D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用npm-script快速构建实时预览项目</title>
    <link href="/2020/03/03/%E4%BD%BF%E7%94%A8npm-script%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/03/03/%E4%BD%BF%E7%94%A8npm-script%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>gulp/grunt 等任务流工具开发的脚手架比较复杂，往往要写很多的配置脚本，比较适合正式的项目使用，但是有时候我们又只想搭建一个简单的本地开发预览功能，这个时候用上面说到的任务流工具来开发就显得大材小用了。</p><p>npm-script 即利用 nodejs 实现的脚本命令，在 package.json 的 scripts 对象中描述。我们可以用 npm-script 快速实现一个具有浏览器同步更新、监控项目文件更改功能的 Demo，而仅仅只需要修改 package.json，不需要编写额外的配置。</p><p>以下面这个 package.json 为例，这个 Demo 的目录结构为：</p><figure class="highlight txt"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs txt">sass_test/<br>  -- dist<br>  -- src<br>  -- package.json<br></code></pre></td></tr></table></figure><p>我需要它完成的功能主要有三个：</p><ol><li><p>处理 <code>src</code> 中的 html 文件和 scss 文件，并将处理好的文件生成到 <code>dist</code> 目录中</p></li><li><p>以 <code>dist</code> 目录作为服务器根目录，创建本地 http 服务并自动打开浏览器，当目录内容更改时自动刷新</p></li><li><p>监控 <code>src</code> 目录中的文件，一旦发生更改就重新执行第一个功能</p></li></ol><p>实现上述功能所需的 package.json 如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;sass_test&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;run-p -s clean build:html build:sass browser-sync watch&quot;</span>,<br>    <span class="hljs-attr">&quot;build:html&quot;</span>: <span class="hljs-string">&quot;cp &#x27;src/index.html&#x27; &#x27;dist/index.html&#x27;&quot;</span>,<br>    <span class="hljs-attr">&quot;build:sass&quot;</span>: <span class="hljs-string">&quot;dart-sass --no-source-map src:dist&quot;</span>,<br>    <span class="hljs-attr">&quot;browser-sync&quot;</span>: <span class="hljs-string">&quot;browser-sync dist -w&quot;</span>,<br>    <span class="hljs-attr">&quot;watch&quot;</span>: <span class="hljs-string">&quot;run-p watch:html watch:sass&quot;</span>,<br>    <span class="hljs-attr">&quot;watch:html&quot;</span>: <span class="hljs-string">&quot;nodemon -e html -w src -x \&quot;npm run build:html\&quot;&quot;</span>,<br>    <span class="hljs-attr">&quot;watch:sass&quot;</span>: <span class="hljs-string">&quot;nodemon -e scss -w src -x \&quot;npm run build:sass\&quot;&quot;</span>,<br>    <span class="hljs-attr">&quot;clean&quot;</span>: <span class="hljs-string">&quot;rm -rf dist/*&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;browser-sync&quot;</span>: <span class="hljs-string">&quot;^2.26.7&quot;</span>,<br>    <span class="hljs-attr">&quot;dart-sass&quot;</span>: <span class="hljs-string">&quot;^1.25.0&quot;</span>,<br>    <span class="hljs-attr">&quot;nodemon&quot;</span>: <span class="hljs-string">&quot;^2.0.2&quot;</span>,<br>    <span class="hljs-attr">&quot;npm-run-all&quot;</span>: <span class="hljs-string">&quot;^4.1.5&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>browser-sync</code> 实现浏览器同步，监控 <code>dist</code> 目录，一旦这个目录的内容发生更改，就刷新浏览器。监控文件的任务由 <code>nodemon</code> 完成，为了提高效率，html 文件和 scss 文件分开监控，通过 <code>npm-run-all</code> 实现多任务同步执行。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
      <tag>项目构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SS安装配置笔记</title>
    <link href="/2019/10/03/SS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/10/03/SS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="挑选合适的-vps"><a class="markdownIt-Anchor" href="#挑选合适的-vps"></a> 挑选合适的 VPS</h1><p>推荐使用 Vultr 日本的 5 美元一个月的 VPS，价格不错而且延迟是最低的。DigitalOcean 虽然没有日本区的 VPS，但是 Github 教育包提供了一张 DigitalOcean 50美元的优惠券，使用下面我的推广链接的话还可以再获得10美元，在加上激活账号充值的5美元，总共65美元，而 DigitalOcean 最低价的 VPS 是5美元一个月，也就是说花5美元可以使用一年的 VPS。使用下面提供的链接注册会有新用户代金券：</p><ul><li>Vultr：<a href="https://www.vultr.com/?ref=7123901">https://www.vultr.com/?ref=7123901</a></li><li>DigitalOcean：<a href="https://m.do.co/c/cf551f8f7de1">https://m.do.co/c/cf551f8f7de1</a></li></ul><h1 id="安装配置-shadowsocks"><a class="markdownIt-Anchor" href="#安装配置-shadowsocks"></a> 安装配置 Shadowsocks</h1><p>如果使用的是 Ubuntu16.04 以及以上的系统，可以直接通过系统自带的源安装，如果低于 16.04 的版本，则需要去 Shadowsocks 的 github 上下载最新程序编译安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 shadowsocks-libev</span><br>sudo apt install shadowsocks-libev<br><br><span class="hljs-comment"># 启动 shadowsocks-libev 服务端</span><br>ss-server -c ./ss.json -u<br></code></pre></td></tr></table></figure><p>配置文件格式如下，如果不清楚配置项的作用，那么可以直接用下面这份配置，修改密码即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;server&quot;</span>: [<span class="hljs-string">&quot;[::0]&quot;</span>, <span class="hljs-string">&quot;&quot;</span><span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">&quot;&quot;</span>],<br>  <span class="hljs-attr">&quot;server_port&quot;</span>: <span class="hljs-number">8838</span>,<br>  <span class="hljs-attr">&quot;local_port&quot;</span>: <span class="hljs-number">1080</span>,<br>  <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>,<br>  <span class="hljs-attr">&quot;timeout&quot;</span>: <span class="hljs-number">300</span>,<br>  <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;chacha20-ietf-poly1305&quot;</span>,<br>  <span class="hljs-attr">&quot;fast_open&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;workers&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-chacha20-加密算法"><a class="markdownIt-Anchor" href="#使用-chacha20-加密算法"></a> 使用 ChaCha20 加密算法</h2><p>ChaCha 系列算法是 Bernstein 于 2008 年发布的与相关的 Salsa20 算法的一个变种，Google 采用带有 Poly1305 消息认证码的 ChaCha20 的作为 Chrome 和 Google 网站 TLS 中的加密算法，用来替代 OpenSSL 中 RC4。此后，ChaCha20 在 RFC 7539 中标准化，于是推出了 ChaCha20-IETF-Poly1305。Shadowsocks 在 SIP004 提出了采用 AEAD 算法取代原先的不安全的流加密 + OTA，并弃用了一次性验证（OTA）。当前配置默认使用 ChaCha20-IETF-Poly1305。</p><h2 id="使用-v2ray-plugin-混淆"><a class="markdownIt-Anchor" href="#使用-v2ray-plugin-混淆"></a> 使用 v2ray-plugin 混淆</h2><p>这一步是可选，用来伪装流量以免被运营商检测出来并 BAN 掉 IP。主要有两种混淆方式：HTTP 和 HTTPS，前者配置简单但是效果不好，后者需要注册域名，配置 SSL 证书，操作比较麻烦但是安全性比较高。具体使用方法参考 github 主页：<a href="https://github.com/shadowsocks/v2ray-plugin">v2ray-plugin</a>。</p><h2 id="开启-bbr-模块"><a class="markdownIt-Anchor" href="#开启-bbr-模块"></a> 开启 BBR 模块</h2><p>比起 Kcptun 或锐速，谷歌开源的 TCP 拥塞控制算法 BBR 更方便，而且加速效果不错，因此绝对是加速首选。由于 tcp_bbr 需要 Linux kernel 4.9+ 的内核提供支持，因此不满足要求的系统需要先升级内核。如果内核符合条件，执行 <code>lsmod | grep bbr</code>，如果结果中没有 tcp_bbr 的话就先执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">modprobe tcp_bbr<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tcp_bbr&quot;</span> | sudo tee --append /etc/modules-load.d/modules.conf<br></code></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.core.default_qdisc=fq&quot;</span> | sudo tee --append /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> | sudo tee --append /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure><p>最后是验证：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 显示结果为 net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br>sysctl net.ipv4.tcp_available_congestion_control<br><br><span class="hljs-comment"># 显示结果为 net.ipv4.tcp_congestion_control = bbr</span><br>sysctl net.ipv4.tcp_congestion_control<br></code></pre></td></tr></table></figure><p>如果显示结果如上所示，则说明 BBR 已经开启</p><h2 id="开启-tcp-fast-opentfo"><a class="markdownIt-Anchor" href="#开启-tcp-fast-opentfo"></a> 开启 TCP Fast Open（TFO）</h2><p>TCP Fast Open 要求服务器和客户端（Openwrt/LEDE）都是 Linux 3.7+ 的内核，内核参数配置文件 <code>/etc/sysctl.conf</code> 增加一行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">net.ipv4.tcp_fastopen = 3<br></code></pre></td></tr></table></figure><p>然后执行 <code>sysctl -p</code> 使之生效。服务端和客户端同时增加 Shadowsocks 配置项 <code>&quot;fast_open&quot;: true</code>，然后重启服务即可。</p><h1 id="系统参数优化"><a class="markdownIt-Anchor" href="#系统参数优化"></a> 系统参数优化</h1><h2 id="修改文件句柄数限制"><a class="markdownIt-Anchor" href="#修改文件句柄数限制"></a> 修改文件句柄数限制</h2><p>增加进程打开文件句柄数量，以便更好的处理大量的 TCP 连接。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/security/limits.conf<br><br><span class="hljs-comment"># 增加以下两行</span><br>* soft nofile 51200<br>* hard nofile 51200<br></code></pre></td></tr></table></figure><p>接下来，在开启 Shadowsocks 服务之前，先设置 ulimit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ulimit</span> -n 51200<br></code></pre></td></tr></table></figure><h2 id="内核参数优化"><a class="markdownIt-Anchor" href="#内核参数优化"></a> 内核参数优化</h2><p><code>/etc/sysctl.conf</code> 的配置如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">fs.file-max = 51200<br>net.core.rmem_max = 67108864<br>net.core.wmem_max = 67108864<br>net.core.netdev_max_backlog = 250000<br>net.core.somaxconn = 4096<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_tw_recycle = 0<br>net.ipv4.tcp_fin_timeout = 30<br>net.ipv4.tcp_keepalive_time = 1200<br>net.ipv4.ip_local_port_range = 10000 65000<br>net.ipv4.tcp_max_syn_backlog = 8192<br>net.ipv4.tcp_max_tw_buckets = 5000<br>net.ipv4.tcp_mem = 25600 51200 102400<br>net.ipv4.tcp_rmem = 4096 87380 67108864<br>net.ipv4.tcp_wmem = 4096 65536 67108864<br>net.ipv4.tcp_mtu_probing = 1<br>net.ipv4.tcp_congestion_control = hybla<br></code></pre></td></tr></table></figure><p>修改完后使用 <code>sysctl -p</code> 重载配置。</p><h1 id="多用户管理服务"><a class="markdownIt-Anchor" href="#多用户管理服务"></a> 多用户管理服务</h1><p>首先根据官网教程在服务端/客户端的服务器上进行安装<a href="https://shadowsocks.github.io/shadowsocks-manager/#/">Shadowsocks-manager</a>，然后需要分别配置服务端和客户端，该软件的好处是可以通过客户端可以管理多台服务器。</p><h2 id="服务端配置"><a class="markdownIt-Anchor" href="#服务端配置"></a> 服务端配置</h2><p>在服务端服务器上新建一个 <code>ssmgr.yml</code> 文件，输入：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">type: s<br>shadowsocks:<br>  address: 127.0.0.1:1080<br>manager:<br>  address: 0.0.0.0:6000<br>  password: &#x27;123456&#x27;<br>db: &#x27;db.sqlite&#x27;<br></code></pre></td></tr></table></figure><p>需要注意的是，无论把这个配置文件放在哪里，软件真正的配置数据在 <code>/root/.ssmgr</code> 文件中。</p><p>然后在 <code>/lib/systemd/system</code>（Ubuntu 18.04）中新建两个文件 <code>ss-manager.service</code> 和 <code>ssmgr-server.service</code>：</p><ol><li>ss-manager.service:</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">[Unit]<br>Description=Shadowsocks-libev multi-user controller<br>Documentation=man:ss-manager(1)<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/ss-manager -c /etc/shadowsocks-manager/config.json --manager-address 127.0.0.1:1080<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><code>ss-manager</code> 的安装位置可能不在 <code>/usr/bin</code> 下面，请确认并修改；</li><li><code>/etc/shadowsocks-manager/config.json</code> 是我的 Shadowsocls 配置文件，根据自己的配置文件位置进行修改；</li><li><code>--manager-address 127.0.0.1:1080</code> 后面的地址端口要和上面 <code>ssmgr.yml</code> 中设置的一致。</li></ul><ol start="2"><li>ssmgr-server.service</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">[Unit]<br>Description=Shadowsocks management server<br>After=network.target ss-manager.service<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/ssmgr -c /etc/ssmgr/ssmgr.yml<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><code>ssmgr</code> 的安装位置可能不在 <code>/usr/bin</code> 下面，请确认并修改；</li><li><code>/etc/ssmgr/ssmgr.yml</code> 是我的配置文件，根据自己的配置文件位置进行修改。</li></ul><p>然后输入下列命令开启服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl start ss-manager.service<br>sudo systemctl start ssmgr-server.service<br></code></pre></td></tr></table></figure><p>如果需要开机自启动，则输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl <span class="hljs-built_in">enable</span> ss-manager.service<br>sudo systemctl <span class="hljs-built_in">enable</span> ssmgr-server.service<br></code></pre></td></tr></table></figure><h2 id="客户端配置"><a class="markdownIt-Anchor" href="#客户端配置"></a> 客户端配置</h2><p>在客户端服务器上新建一个 <code>webgui.yml</code> 文件，根据注释输入：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs txt">type: m<br>manager:<br>  address: 服务器IP地址:6000 # 注意端口和服务端配置一致<br>  password: &#x27;123456&#x27; # 注意密码和服务端配置一致<br>plugins:<br>  flowSaver:<br>    use: true<br>  user:<br>    use: true<br>  account:<br>    use: true<br>  email:<br>    use: true<br>    type: &#x27;smtp&#x27;<br>    username: &#x27;邮箱用户名&#x27;<br>    password: &#x27;邮箱密码&#x27;<br>    host: &#x27;smtp.163.com&#x27; # 根据自己使用的邮箱服务填写<br>  webgui:<br>    use: true<br>    host: &#x27;0.0.0.0&#x27;<br>    port: &#x27;80&#x27;<br>    site: &#x27;http://自定义域名或者IP地址&#x27;<br>  giftcard:<br>    use: true # 开启礼品卡服务以免订单无法加载，可以根据官方文档添加支付宝等<br>db: &#x27;webgui.sqlite&#x27;<br>redis: # 记得安装 Redis，使用默认配置即可<br>  host: &#x27;127.0.0.1&#x27;<br>  port: 6379<br>  password: &#x27;&#x27;<br>  db: 0<br></code></pre></td></tr></table></figure><p>然后运行客户端：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssmgr -c /xxx/webgui.yml<br></code></pre></td></tr></table></figure><p>之后根据自己设置的域名或者IP访问网站，注册的第一个用户即为管理员，然后进行进一步的管理，可在服务器页面添加额外的 Shadowsocks 服务器。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>n的a次方求和问题</title>
    <link href="/2019/09/30/n%E7%9A%84a%E6%AC%A1%E6%96%B9%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2019/09/30/n%E7%9A%84a%E6%AC%A1%E6%96%B9%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本文通过推导 n, n² 和 n³ 的求和公式最终引出 Faulhaber’s formula，即 n 的 a 次方求和公式。</p><span id="more"></span><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>常见的 n 项递增数列的求和公式有以下 3 个：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>2</mn></mfrac></mrow></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{k=\frac{n\left(n+1\right)}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>6</mn></mfrac></mrow></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{k^2=\frac{n\left( n+1 \right) \left( 2n+1 \right)}{6}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><msup><mi>k</mi><mn>3</mn></msup><mo>=</mo><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>6</mn></mfrac></mrow></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{k^3=\frac{n\left( n+1 \right) \left( 2n+1 \right)}{6}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p><p>其中关于第一个公式的故事大概已经是家喻户晓了，不过据说高斯当时真正解出的题，比 1 加到 100 要难多了。正如传说中高斯的解法一样，从 1 加到 n，我们只需要重新组合这些数：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">[</mo><mn>2</mn><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mo stretchy="false">[</mo><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">(1 + n) + [2 + (n-1)] + ... + [n + (n+1)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p><p>每一组的值都是相等的，都等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，总共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 组，因此就可以很方便地得到等差数列的求和公式。</p><p>然而我们无法使用这个方法来求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1^2+2^2+...+n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，而在弦论、量子力学、人工智能等前沿学科中，这种方式（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><msup><mi>n</mi><mi>a</mi></msup></mrow><annotation encoding="application/x-tex">\sum{n^a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span></span></span>）的求和会非常常见，因此了解如何推导这样的求和公式就非常有意义。通过查找资料发现<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Sum of n, n², or n³">[1]</span></a></sup>，这个式子的求和公式最早是由德国数学家 <strong>Faulhaber</strong> 提出的，因此也叫做 <strong>Faulhaber’s formula</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mi>a</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>a</mi></munderover><mrow><msup><mrow><mo fence="true">(</mo><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mi>j</mi></msup><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>j</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><msub><mi>B</mi><mi>j</mi></msub><msup><mi>n</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>j</mi></mrow></msup></mrow></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{k^a}=\frac{1}{a+1}\sum_{j=0}^a{\left( -1 \right) ^j\left( \begin{array}{c}a+1\\j\\\end{array} \right) B_jn^{a+1-j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0651740000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h1 id="前-n-个正整数的总和"><a class="markdownIt-Anchor" href="#前-n-个正整数的总和"></a> 前 n 个正整数的总和</h1><p>了解上面这个公式前先看看另一种推导 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\sum{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span> 的方法：</p><ol><li>首先二项式展开：</li></ol><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>k</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">(k-1)^2 = k^2 -2k + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><ol start="2"><li>重新排列项目：</li></ol><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup><mo>−</mo><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mn>2</mn><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k^2 - (k-1)^2 = 2k - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><ol start="3"><li>对等式两边求和：</li></ol><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo fence="true">(</mo><msup><mi>k</mi><mn>2</mn></msup><mo>−</mo><msup><mrow><mo fence="true">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo>=</mo><mn>2</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>k</mi><mo>−</mo></mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{\left( k^2-\left( k-1 \right) ^2\right)}=2\sum_{k=1}^n{k-}\sum_{k=1}^n{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">1</span></span></span></span></span></span></p><ol start="4"><li>调整位置后求解得到：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>=</mo><mn>2</mn><msub><mi>S</mi><mi>n</mi></msub><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n^2 = 2S_n - n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>。</li></ol><p>根据最终得到的式子求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 即可得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\sum{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span> 的计算公式。</p><h1 id="前-n-个正整数平方的总和"><a class="markdownIt-Anchor" href="#前-n-个正整数平方的总和"></a> 前 n 个正整数平方的总和</h1><p>用同样的方法，这次我们推导 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum{n^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064118em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>：</p><ol><li>首先二项式展开：</li></ol><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>=</mo><msup><mi>k</mi><mn>3</mn></msup><mo>−</mo><mn>3</mn><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">(k-1)^3 = k^3 - 3k^2 + 3k - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><ol start="2"><li>重新排列项目：</li></ol><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>k</mi><mn>3</mn></msup><mo>−</mo><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>=</mo><mn>3</mn><msup><mi>k</mi><mn>2</mn></msup><mo>−</mo><mn>3</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k^3 - (k-1)^3 = 3k^2 - 3k + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><ol start="3"><li>和之前一样对两边求和，可以得到：</li></ol><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>n</mi><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>3</mn><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo>−</mo><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>k</mi><mo>+</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>3</mn><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo>−</mo><mn>3</mn><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>2</mn></mfrac><mo>+</mo><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}n^3&amp;=3\left( \sum_{k=1}^n{k^2} \right) -3\sum_{k=1}^n{k}+\sum_{k=1}^n{1} \\&amp;=3\left( \sum_{k=1}^n{k^2} \right) -3\frac{n\left( n+1 \right)}{2}+n\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.704226em;vertical-align:-3.102113em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.602113em;"><span style="top:-5.602113em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.102113em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.602113em;"><span style="top:-5.602113em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.102113em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ol start="4"><li>调整位置后求解得到：</li></ol><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mfrac><mn>1</mn><mn>6</mn></mfrac><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>6</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\sum_{k=1}^n{k^2}&amp;=\frac{1}{3}n^3+\frac{1}{2}n^2+\frac{1}{6}n\\&amp;=\frac{n\left( n+1 \right) \left( 2n+1 \right)}{6}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.666510000000001em;vertical-align:-2.5832550000000007em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.083255em;"><span style="top:-5.083254999999999em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.0541419999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5832550000000007em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.083255em;"><span style="top:-5.083254999999999em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">n</span></span></span><span style="top:-2.0541419999999997em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5832550000000007em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h1 id="前-n-个正整数的-3-次方的总和"><a class="markdownIt-Anchor" href="#前-n-个正整数的-3-次方的总和"></a> 前 n 个正整数的 3 次方的总和</h1><p>用同样的办法，求和后可以得到：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>4</mn></msup><mo>=</mo><mn>4</mn><msub><mi>S</mi><mrow><mn>3</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>−</mo><mn>6</mn><msub><mi>S</mi><mrow><mn>2</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>+</mo><mn>4</mn><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n^4 = 4S_{3,n} - 6S_{2,n} + 4S_{1,n} - n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">6</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p><p>结合上面求到的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mn>3</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{3,n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mn>2</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{2,n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{1,n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 可得：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>4</mn><msub><mi>S</mi><mrow><mn>3</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>n</mi><mn>4</mn></msup><mo>+</mo><mn>6</mn><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>6</mn></mfrac><mo>−</mo><mn>4</mn><mfrac><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mn>2</mn></mfrac><mo>+</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>S</mi><mrow><mn>3</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><msup><mi>n</mi><mn>4</mn></msup><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><msup><mi>n</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup><msup><mrow><mo fence="true">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}4S_{3,n}&amp;=n^4+6\frac{n\left( n+1 \right) \left( 2n+1 \right)}{6}-4\frac{n\left( n+1 \right)}{2}+n\\S_{3,n}&amp;=\frac{1}{4}n^4+\frac{1}{2}n^3+\frac{1}{4}n^2\\&amp;=\frac{n^2\left( n+1 \right) ^2}{4}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.337448em;vertical-align:-3.418724em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9187239999999997em;"><span style="top:-6.122731999999999em;"><span class="pstrut" style="height:3.631008em;"></span><span class="mord"><span class="mord">4</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.815292em;"><span class="pstrut" style="height:3.631008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1982840000000001em;"><span class="pstrut" style="height:3.631008em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.418724em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9187239999999997em;"><span style="top:-6.122731999999999em;"><span class="pstrut" style="height:3.631008em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span></span></span><span style="top:-3.815292em;"><span class="pstrut" style="height:3.631008em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.1982840000000001em;"><span class="pstrut" style="height:3.631008em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.631008em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.418724em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h1 id="一般化"><a class="markdownIt-Anchor" href="#一般化"></a> 一般化</h1><p>根据上面的推导，我们可以把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>=</mo><mo>∑</mo><msup><mi>n</mi><mi>a</mi></msup></mrow><annotation encoding="application/x-tex">S_{a,n} = \sum{n^a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span></span></span> 一般化为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><msub><mi>S</mi><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>−</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><msub><mi>S</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>+</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><msub><mi>S</mi><mrow><mi>a</mi><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>−</mo><mo>⋯</mo><mo>+</mo><msup><mrow><mo fence="true">(</mo><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>+</mo><msup><mrow><mo fence="true">(</mo><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mi>a</mi></msup><mi>n</mi></mrow><annotation encoding="application/x-tex">n^{a+1}=\left( \begin{array}{c}a+1\\1\\\end{array} \right) S_{a,n}-\left( \begin{array}{c}a+1\\2\\\end{array} \right) S_{a-1,n}+\left( \begin{array}{c}a+1\\3\\\end{array} \right) S_{a-2,n}-\cdots +\left( -1 \right) ^{a-1}\left( \begin{array}{c}a+1\\a\\\end{array} \right) S_{1,n}+\left( -1 \right) ^an</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.054292em;vertical-align:-0.25em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p><p>然后便可以解出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{a,n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的表达式（其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表有理数）：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msup><mi>n</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><msub><mi>c</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>S</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>+</mo><msub><mi>c</mi><mrow><mi>a</mi><mo>−</mo><mn>2</mn></mrow></msub><msub><mi>S</mi><mrow><mi>a</mi><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>+</mo><msub><mi>c</mi><mn>0</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">S_{a,n}=\frac{1}{a+1}n^{a+1}+c_{a-1}S_{a-1,n}+c_{a-2}S_{a-2,n}+\cdots +c_1S_{1,n}+c_0n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span></span></p><p><strong>注意：</strong> 通过观察可以发现，这个和式近似于积分 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mi>n</mi></msubsup><mrow><msup><mi>x</mi><mi>a</mi></msup><mi>d</mi><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msup><mi>n</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow></mrow><annotation encoding="application/x-tex">\int_0^n{x^adx=\frac{1}{a+1}n^{a+1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.262623em;vertical-align:-0.403331em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8592920000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span>（低级项可看作误差）</p><h1 id="faulhaber-公式"><a class="markdownIt-Anchor" href="#faulhaber-公式"></a> Faulhaber 公式</h1><p>由于我们可以把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{a,n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 近似地表达为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msup><mi>n</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>t</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_{a,n} = \frac{1}{a+1}n^{a+1} + (lower\ terms)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span>，因此现在的问题就变成了如何找到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>t</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">lower\ terms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span></span></span></span> 的一个精确解。事实上，我们可以用伯努利数来实现，从而得到了  Faulhaber’s formula：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mi>a</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>a</mi></munderover><mrow><msup><mrow><mo fence="true">(</mo><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mi>j</mi></msup><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>j</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><msub><mi>B</mi><mi>j</mi></msub><msup><mi>n</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>j</mi></mrow></msup></mrow></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{k^a}=\frac{1}{a+1}\sum_{j=0}^a{\left( -1 \right) ^j\left( \begin{array}{c}a+1\\j\\\end{array} \right) B_jn^{a+1-j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0651740000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://brilliant.org/wiki/sum-of-n-n2-or-n3/">Sum of n, n², or n³</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>定理证明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript常用设计模式</title>
    <link href="/2019/09/30/JavaScript%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/09/30/JavaScript%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>设计模式（design pattern）是对软件设计中普遍存在的各种问题，所提出的解决方案。是某种场景下解决问题的范式，因此掌握设计模式对于一个 Programmer 来说非常重要。本文介绍了几种常见的设计模式。</p><span id="more"></span><h1 id="原型模式the-prototype-pattern"><a class="markdownIt-Anchor" href="#原型模式the-prototype-pattern"></a> 原型模式（The Prototype Pattern）</h1><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 最直接的方法，使用 &quot;hasOwnProperty&quot; 时无法遍历原型对象</span><br><span class="hljs-keyword">var</span> vehicle = &#123;<br>  getModel: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log( <span class="hljs-string">&quot;The model of this vehicle is..&quot;</span> + <span class="hljs-built_in">this</span>.model );<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> car = <span class="hljs-built_in">Object</span>.create(vehicle, &#123;<br>  <span class="hljs-string">&quot;id&quot;</span>: &#123;<br>    value: MY_GLOBAL.nextId(),<br>    enumerable: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-string">&quot;model&quot;</span>: &#123;<br>    value: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    enumerable: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 优化后的方法</span><br><span class="hljs-keyword">var</span> beget = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">proto</span>) </span>&#123;<br>    F.prototype = proto;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-keyword">var</span> car = beget(vehicle);<br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>JavaScript 本身提供的原型优势；</li><li>所有对象实例共享原型中的方法，可以带来性能提升。</li></ul></li><li><p>缺点：</p><ul><li>优点2即是原型模式的缺点</li></ul></li></ul><h1 id="构造器模式the-constructor-pattern"><a class="markdownIt-Anchor" href="#构造器模式the-constructor-pattern"></a> 构造器模式（The Constructor Pattern ）</h1><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">model, year, miles</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.model = model;<br>  <span class="hljs-built_in">this</span>.year = year;<br>  <span class="hljs-built_in">this</span>.miles = miles;<br>&#125;<br><br><span class="hljs-comment">// 使用原型对象定义方法，避免每次实例都要重新定义同一个方法</span><br>Car.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.model + <span class="hljs-string">&quot; has done &quot;</span> + <span class="hljs-built_in">this</span>.miles + <span class="hljs-string">&quot; miles&quot;</span>;<br>&#125;;<br><br><span class="hljs-keyword">var</span> civic = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;Honda Civic&quot;</span>, <span class="hljs-number">2009</span>, <span class="hljs-number">20000</span>);<br><span class="hljs-keyword">var</span> mondeo = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;Ford Mondeo&quot;</span>, <span class="hljs-number">2010</span>, <span class="hljs-number">5000</span>);<br><span class="hljs-built_in">console</span>.log(civic.toString());<br><span class="hljs-built_in">console</span>.log(mondeo.toString());<br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>每个实例的公共对象都是不同的，不会相互影响。</li></ul></li><li><p>缺点：</p><ul><li>优点1即是构造器模式的缺点。</li></ul></li></ul><h1 id="模块模式the-module-pattern"><a class="markdownIt-Anchor" href="#模块模式the-module-pattern"></a> 模块模式（The Module Pattern ）</h1><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myNamespace = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 私有成员</span><br>  <span class="hljs-keyword">var</span> myPrivateVar, myPrivateMethod;<br><br>  myPrivateVar = <span class="hljs-number">0</span>;<br><br>  myPrivateMethod = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">foo</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(foo);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 公有成员</span><br>    myPublicVar: <span class="hljs-string">&quot;foo&quot;</span>,<br>    myPublicFunction: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">bar</span>) </span>&#123;<br>      myPrivateVar++;<br>      myPrivateMethod(bar);<br>    &#125;<br>  &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>比真正封装的想法更加清晰；</li><li>支持私有变量、私有方法。</li></ul></li><li><p>缺点：</p><ul><li>无法在以后添加到对象的方法中访问私有成员；</li><li>当更改可见性时，必须对使用该成员的每个位置进行更改；</li><li>无法为私有成员创建自动单元测试；</li><li>当错误需要热修复时的额外复杂性。</li></ul></li></ul><h2 id="揭示模块模式the-revealing-module-pattern"><a class="markdownIt-Anchor" href="#揭示模块模式the-revealing-module-pattern"></a> 揭示模块模式（The Revealing Module Pattern ）</h2><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myRevealingModule = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> privateVar = <span class="hljs-string">&quot;Ben Cherry&quot;</span>,<br>      publicVar = <span class="hljs-string">&quot;Hey there!&quot;</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">privateFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log( <span class="hljs-string">&quot;Name:&quot;</span> + privateVar );<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">publicSetName</span>(<span class="hljs-params"> strName </span>) </span>&#123;<br>    privateVar = strName;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">publicGetName</span>(<span class="hljs-params"></span>) </span>&#123;<br>    privateFunction();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    setName: publicSetName,<br>    greeting: publicVar,<br>    getName: publicGetName<br>  &#125;;<br>&#125;)();<br>myRevealingModule.setName( <span class="hljs-string">&quot;Paul Kinlan&quot;</span> );<br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>使脚本的语法更加一致；</li><li>使模块结尾处的内容更加清晰，增强了可读性；</li></ul></li><li><p>缺点：</p><ul><li>无法修改被私有方法引用的公共函数。</li></ul></li></ul><h1 id="单例模式the-singleton-pattern"><a class="markdownIt-Anchor" href="#单例模式the-singleton-pattern"></a> 单例模式（The Singleton Pattern ）</h1><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> SingletonTester = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Singleton</span>(<span class="hljs-params">options</span>) </span>&#123;<br>    options = options || &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;SingletonTester&quot;</span>;<br>    <span class="hljs-built_in">this</span>.pointX = options.pointX || <span class="hljs-number">6</span>;<br>    <span class="hljs-built_in">this</span>.pointY = options.pointY || <span class="hljs-number">10</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 实例容器</span><br>  <span class="hljs-keyword">var</span> instance;<br><br>  <span class="hljs-comment">// 模拟静态属性和方法</span><br>  <span class="hljs-keyword">var</span> _static = &#123;<br>    name: <span class="hljs-string">&quot;SingletonTester&quot;</span>,<br><br>    <span class="hljs-comment">// 返回单例模式的实例</span><br>    getInstance: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>) </span>&#123;<br>      <span class="hljs-keyword">if</span>(instance === <span class="hljs-literal">undefined</span>) &#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton(options);<br>      &#125;<br>      <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> _static;<br>&#125;)();<br><br><span class="hljs-keyword">var</span> singletonTest = SingletonTester.getInstance(&#123;<br>  pointX: <span class="hljs-number">5</span><br>&#125;);<br><br><span class="hljs-built_in">console</span>.log( singletonTest.pointX ); <span class="hljs-comment">// Outputs: 5</span><br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>提供了对唯一实例的受控访问；</li><li>相比于静态类（或对象），单例模式可以延迟初始化；</li><li>对于需要频繁创建和销毁的对象，可以避免对资源的多重占用，节约系统资源，提高效率；</li></ul></li><li><p>缺点：</p><ul><li>单例模式一般没有接口，扩展困难；</li><li>不适用于变化的对象。</li></ul></li></ul><h1 id="观察者模式the-observer-pattern"><a class="markdownIt-Anchor" href="#观察者模式the-observer-pattern"></a> 观察者模式（The Observer Pattern ）</h1><p>观察者组件：</p><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 通过主体维护的观察者列表</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ObserverList</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.observerList = [];<br>&#125;<br><br>ObserverList.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.observerList.push(obj);<br>&#125;;<br><br>ObserverList.prototype.count = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.observerList.length;<br>&#125;;<br><br>ObserverList.prototype.get = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(index &gt; -<span class="hljs-number">1</span> &amp;&amp; index &lt; <span class="hljs-built_in">this</span>.observerList.length) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.observerList[index];<br>  &#125;<br>&#125;;<br><br>ObserverList.prototype.indexOf = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj, startIndex</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> i = startIndex;<br>  <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-built_in">this</span>.observerList.length) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.observerList[i] === obj) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    i++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br><br>ObserverList.prototype.removeAt = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.observerList.splice(index, <span class="hljs-number">1</span>);<br>&#125;;<br><br><span class="hljs-comment">// 主体</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Subject</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.observers = <span class="hljs-keyword">new</span> ObserverList();<br>&#125;<br><br>Subject.prototype.addObserver = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">observer</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.observers.add(observer);<br>&#125;;<br><br>Subject.prototype.removeObserver = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">observer</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.observers.removeAt(<span class="hljs-built_in">this</span>.observers.indexOf(observer, <span class="hljs-number">0</span>));<br>&#125;;<br><br>Subject.prototype.notify = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> observerCount = <span class="hljs-built_in">this</span>.observers.count();<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; observerCount; i++)&#123;<br>    <span class="hljs-built_in">this</span>.observers.get(i).update(context);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 观察者</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Observer</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.update = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>观察者实例（Vue.js 的双向绑定实现）：</p><figure class="highlight html"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;log&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oApp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);<br><span class="hljs-keyword">var</span> oInput = oApp.children[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> oLog = oApp.children[<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// 扩展对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extend</span>(<span class="hljs-params">obj, extension</span>)</span>&#123;<br>  <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> extension )&#123;<br>    obj[key] = extension[key];<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 注册输入框为主体</span><br>extend(oInput, <span class="hljs-keyword">new</span> Subject());<br><span class="hljs-comment">// 指定广播事件</span><br>oInput.oninput = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.notify(<span class="hljs-built_in">this</span>.value);<br>&#125;<br><br><span class="hljs-comment">// 注册段落为观察者</span><br>extend(oLog, <span class="hljs-keyword">new</span> Observer());<br><span class="hljs-comment">// 指定观察者更新事件</span><br>oLog.update = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.innerHTML = message;<br>&#125;<br><span class="hljs-comment">// 添加观察者到主体</span><br>oInput.addObserver(oLog);<br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>观察者模式对于在应用程序设计中解耦许多不同的场景非常有用；</li><li>观察者模式可以在不使类紧密耦合的情况下保持相关对象之间的一致性；</li><li>观察者和主体之间可以存在动态关系，这提供了很大的灵活性。</li></ul></li><li><p>缺点：</p><ul><li>观察者和主体相关联，具有依赖关系，不利于应用的解耦。</li></ul></li></ul><h2 id="发布订阅模式the-publishsubscribe-pattern"><a class="markdownIt-Anchor" href="#发布订阅模式the-publishsubscribe-pattern"></a> 发布/订阅模式（The Publish/Subscribe Pattern）</h2><p>作为观察者模式的变体，其与观察者模式的不同在于：</p><ul><li>订阅者不需要绑定发布者；</li><li>允许任何订阅者注册和接收发布者的广播。</li></ul><p>发布订阅组件：</p><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pubsub = &#123;&#125;;<br><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">myObject</span>) </span>&#123;<br>  <span class="hljs-comment">// 广播/监听的主题</span><br>  <span class="hljs-keyword">var</span> topics = &#123;&#125;;<br><br>  <span class="hljs-comment">// 主题标识符</span><br>  <span class="hljs-keyword">var</span> subUid = -<span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">// 发布特定主题的广播</span><br>  myObject.publish = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">topic, args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!topics[topic]) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> subscribers = topics[topic],<br>        len = subscribers ? subscribers.length : <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (len--) &#123;<br>      subscribers[len].func(topic, args);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;;<br><br>  <span class="hljs-comment">// 订阅特定主题事件并调用回调函数</span><br>  myObject.subscribe = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">topic, func</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!topics[topic]) &#123;<br>      topics[topic] = [];<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> token = (++subUid).toString();<br>    topics[topic].push(&#123;<br>      token: token,<br>      func: func<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> token;<br>  &#125;;<br><br>  <span class="hljs-comment">// 根据订阅的 token 实现特定主题订阅的取消</span><br>  myObject.unsubscribe = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">token</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> m <span class="hljs-keyword">in</span> topics) &#123;<br>      <span class="hljs-keyword">if</span> (topics[m]) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, j = topics[m].length; i &lt; j; i++) &#123;<br>          <span class="hljs-keyword">if</span> (topics[m][i].token === token) &#123;<br>            topics[m].splice(i, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> token;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;;<br>&#125;(pubsub));<br></code></pre></td></tr></table></figure><p>发布订阅实例：</p><figure class="highlight html"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;log&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;log&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oApp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);<br><span class="hljs-keyword">var</span> oInput = oApp.children[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> oLog_1 = oApp.children[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> oLog_2 = oApp.children[<span class="hljs-number">2</span>];<br><br><span class="hljs-comment">// 新建一个主题为“输入事件”的订阅者，执行回调a</span><br><span class="hljs-keyword">var</span> subscriber = pubsub.subscribe(<span class="hljs-string">&quot;event_input&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">topic, data</span>) </span>&#123;<br>  oLog_1.innerHTML = data;<br>&#125;);<br><br><span class="hljs-comment">// 新建一个主题为“输入事件”的订阅者，执行回调b</span><br><span class="hljs-keyword">var</span> subscriber = pubsub.subscribe(<span class="hljs-string">&quot;event_input&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">topic, data</span>) </span>&#123;<br>  oLog_2.innerHTML = data.split(<span class="hljs-string">&quot;&quot;</span>).reverse().join(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 发布者，发布主题为“输入事件”的广播</span><br>oInput.oninput = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  pubsub.publish(<span class="hljs-string">&quot;event_input&quot;</span>, <span class="hljs-built_in">this</span>.value);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>发布订阅模式有效地将应用程序分解为更小，更松散耦合的块，以改善代码管理和重用；</li><li>发布者和订阅者之间不存在依赖，一个发布者可以绑定多个不同类型的订阅者。</li></ul></li><li><p>缺点：</p><ul><li>由于订阅者和发布者之间的动态关系，更新依赖性可能难以跟踪，同时也不方便排查错误。</li></ul></li></ul><h1 id="工厂模式the-factory-pattern"><a class="markdownIt-Anchor" href="#工厂模式the-factory-pattern"></a> 工厂模式（The Factory Pattern）</h1><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义汽车的构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">options</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.doors = options.doors || <span class="hljs-number">4</span>;<br>  <span class="hljs-built_in">this</span>.state = options.state || <span class="hljs-string">&quot;brand new&quot;</span>;<br>  <span class="hljs-built_in">this</span>.color = options.color || <span class="hljs-string">&quot;silver&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义货车的构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Truck</span>(<span class="hljs-params"> options</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.state = options.state || <span class="hljs-string">&quot;used&quot;</span>;<br>  <span class="hljs-built_in">this</span>.wheelSize = options.wheelSize || <span class="hljs-string">&quot;large&quot;</span>;<br>  <span class="hljs-built_in">this</span>.color = options.color || <span class="hljs-string">&quot;blue&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义一个基本的交通工具工厂</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">VehicleFactory</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>VehicleFactory.prototype.vehicleClass = Car;<br>VehicleFactory.prototype.createVehicle = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span>(options.vehicleType)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;car&quot;</span>:<br>      <span class="hljs-built_in">this</span>.vehicleClass = Car;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;truck&quot;</span>:<br>      <span class="hljs-built_in">this</span>.vehicleClass = Truck;<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">this</span>.vehicleClass(options);<br>&#125;;<br><br><span class="hljs-keyword">var</span> carFactory = <span class="hljs-keyword">new</span> VehicleFactory();<br><br><span class="hljs-comment">// 使用交通工具工厂生成一个汽车实例</span><br><span class="hljs-keyword">var</span> car = carFactory.createVehicle(&#123;<span class="hljs-attr">vehicleType</span>: <span class="hljs-string">&quot;car&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-attr">doors</span>: <span class="hljs-number">6</span>&#125;);<br><span class="hljs-built_in">console</span>.log(car <span class="hljs-keyword">instanceof</span> Car); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 使用交通工具工厂生成一个货车实例</span><br><span class="hljs-keyword">var</span> movingTruck = carFactory.createVehicle(&#123;<span class="hljs-attr">vehicleType</span>: <span class="hljs-string">&quot;truck&quot;</span>, <span class="hljs-attr">state</span>: <span class="hljs-string">&quot;like new&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">wheelSize</span>: <span class="hljs-string">&quot;small&quot;</span> &#125;);<br><span class="hljs-built_in">console</span>.log( movingTruck <span class="hljs-keyword">instanceof</span> Truck ); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>当对象或组件设置涉及高度复杂性时，有利于降低使用的复杂度；</li><li>可以根据所处的环境轻松生成不同的对象实例；</li><li>有利于处理许多共享相同属性的小对象或组件；</li><li>对于需要调用不同实例的对象可以提供一个统一的入口，方便解耦。</li></ul></li><li><p>缺点：</p><ul><li>可能给应用程序带来不必要的大量复杂性；</li><li>由于对象创建过程被抽象化，对于复杂度过大的对象，可能导致单元测试的问题。</li></ul></li></ul><h2 id="抽象工厂模式the-abstract-factory-pattern"><a class="markdownIt-Anchor" href="#抽象工厂模式the-abstract-factory-pattern"></a> 抽象工厂模式（The Abstract Factory Pattern）</h2><p>相比于工厂模式，抽象工厂将一组对象的实现细节与其一般用法分开。适用于系统必须独立于生成对象的方式，或者需要使用多种类型的对象的场景。</p><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> abstractVehicleFactory = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> types = &#123;&#125;;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    getVehicle: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">type, customizations</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> Vehicle = types[type];<br>      <span class="hljs-keyword">return</span> (Vehicle ? <span class="hljs-keyword">new</span> Vehicle(customizations) : <span class="hljs-literal">null</span>);<br>    &#125;,<br><br>    registerVehicle: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">type, Vehicle</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> proto = Vehicle.prototype;<br><br>      <span class="hljs-keyword">if</span> (proto.drive &amp;&amp; proto.breakDown ) &#123;<br>        types[type] = Vehicle;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> abstractVehicleFactory;<br>    &#125;<br>  &#125;;<br>&#125;)();<br><br>abstractVehicleFactory.registerVehicle(<span class="hljs-string">&quot;car&quot;</span>, Car);<br>abstractVehicleFactory.registerVehicle(<span class="hljs-string">&quot;truck&quot;</span>, Truck);<br><br><span class="hljs-keyword">var</span> car = abstractVehicleFactory.getVehicle(<span class="hljs-string">&quot;car&quot;</span>, &#123;<span class="hljs-attr">color</span>: <span class="hljs-string">&quot;lime green&quot;</span>, <span class="hljs-attr">state</span>: <span class="hljs-string">&quot;like new&quot;</span> &#125;);<br><br><span class="hljs-keyword">var</span> truck = abstractVehicleFactory.getVehicle(<span class="hljs-string">&quot;truck&quot;</span>, &#123;<span class="hljs-attr">wheelSize</span>: <span class="hljs-string">&quot;medium&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;neon yellow&quot;</span>&#125;);<br></code></pre></td></tr></table></figure><h1 id="混入模式the-mixin-pattern"><a class="markdownIt-Anchor" href="#混入模式the-mixin-pattern"></a> 混入模式（The Mixin Pattern）</h1><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 一个简单的构造函数</span><br><span class="hljs-keyword">var</span> Car = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">settings</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.model = settings.model || <span class="hljs-string">&quot;no model provided&quot;</span>;<br>  <span class="hljs-built_in">this</span>.color = settings.color || <span class="hljs-string">&quot;no colour provided&quot;</span>;<br>&#125;;<br><br><span class="hljs-comment">// Mixin</span><br><span class="hljs-keyword">var</span> Mixin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br>Mixin.prototype = &#123;<br>  driveForward: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;drive forward&quot;</span>);<br>  &#125;,<br>  driveBackward: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;drive backward&quot;</span>);<br>  &#125;,<br>  driveSideways: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;drive sideways&quot;</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 使用另一个对象扩展现有对象方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">augment</span>(<span class="hljs-params">receivingClass, givingClass</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>[<span class="hljs-number">2</span>]) &#123; <span class="hljs-comment">// 只提供特定方法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span>, len = <span class="hljs-built_in">arguments</span>.length; i &lt; len; i++) &#123;<br>      receivingClass.prototype[<span class="hljs-built_in">arguments</span>[i]] = givingClass.prototype[<span class="hljs-built_in">arguments</span>[i]];<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 提供所有方法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> methodName <span class="hljs-keyword">in</span> givingClass.prototype) &#123;<br>      <span class="hljs-comment">// 检查重名方法</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Object</span>.hasOwnProperty.call(receivingClass.prototype, methodName)) &#123;<br>        receivingClass.prototype[methodName] = givingClass.prototype[methodName];<br>      &#125;<br>      <span class="hljs-comment">// 可选：检查原型链</span><br>      <span class="hljs-comment">// if (!receivingClass.prototype[methodName]) &#123;</span><br>      <span class="hljs-comment">//   receivingClass.prototype[methodName] = givingClass.prototype[methodName];</span><br>      <span class="hljs-comment">// &#125;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 扩展 Car 构造函数以包含 &quot;driveForward&quot; 和 &quot;driveBackward&quot; 方法</span><br>augment(Car, Mixin, <span class="hljs-string">&quot;driveForward&quot;</span>, <span class="hljs-string">&quot;driveBackward&quot;</span>);<br><span class="hljs-keyword">var</span> myCar = <span class="hljs-keyword">new</span> Car(&#123;<span class="hljs-attr">model</span>: <span class="hljs-string">&quot;Ford Escort&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span>&#125;);<br>myCar.driveForward();  <span class="hljs-comment">// drive forward</span><br>myCar.driveBackward(); <span class="hljs-comment">// drive backward</span><br><br><span class="hljs-comment">// 扩展 Car 构造函数以包含所有 Mixin 方法</span><br>augment(Car, Mixin);<br><span class="hljs-keyword">var</span> mySportsCar = <span class="hljs-keyword">new</span> Car(&#123;<span class="hljs-attr">model</span>: <span class="hljs-string">&quot;Porsche&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>&#125;);<br>mySportsCar.driveSideways(); <span class="hljs-comment">// drive sideways</span><br></code></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>有助于减少功能重复并同时增加系统中的功能重用。</li></ul></li><li><p>缺点：</p><ul><li>有可能导致原型污染和原函数的不确定性。</li></ul></li></ul><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><ul><li><a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/">Learning JavaScript Design Patterns</a> A book by Addy Osmani <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这本书有对应的中文版，但是不推荐阅读中文版，因为翻译糟糕不易于理解。">[1]</span></a></sup></li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这本书有对应的中文版，但是不推荐阅读中文版，因为翻译糟糕不易于理解。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime详细配置笔记</title>
    <link href="/2019/09/30/Sublime%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/09/30/Sublime%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要用-sublime-text"><a class="markdownIt-Anchor" href="#为什么要用-sublime-text"></a> 为什么要用 Sublime Text</h1><p>有人也许会有疑问，为什么不用 Dreamweaver、WebStrom、Visual Studio 这些大型 IDE？功能齐全又好用，为什么要用 Sublime Text 呢？</p><span id="more"></span><p>首先，IDE 虽好，但是由于 IDE 们内置了大量的功能插件，导致软件启动速度特别慢，而 Sublime Text 是一款编辑器，类似于记事本，没有多余的加载项，因此启动速度很快。其次，IDE 的一大优点就是内置了许多强大的功能，但是平时学习工作中这些功能不一定用得到，因此造成了时间和资源的浪费，不适合平时较为小型、零散的开发，而 Sublime Text 有自己的插件管理工具（Package Control），可以通过各种各样的插件来扩展编辑器的功能，各种插件数量繁多，功能齐全，完全可以根据自己的需求自定义编辑器的功能，最大程度地提高效率。除此之外，Sublime Text 的扩展能力非常强大，包括插件、编译文件、快捷键、代码片段、主题配色等都可以完全自定义，只需要会用一点 Python 和正则表达式，通过一系列改装，Sublime Text 完全可以变成自己独一无二的个性化 IDE。与此同时，Sublime Text 是一款跨平台的编辑器，在 Window、IOS 和 Linux 下都可以使用。</p><p><strong>总的来说，Sublime Text 是图形界面环境（GUI）下的最佳编辑器选择</strong> （Vim 是命令行环境（CLI）下的最佳选择，喜欢 Emacs 的童鞋请无视这句话）</p><p>当然，类似的优秀的编辑器有很多，比如 Atom、Notepad++、VScode 等，我都试用过，不过体验下来，发现还是 Sublime Text 在各个方面的表现都更加出色。</p><h1 id="配置-sublime-text"><a class="markdownIt-Anchor" href="#配置-sublime-text"></a> 配置 Sublime Text</h1><h2 id="下载安装-sublime-text"><a class="markdownIt-Anchor" href="#下载安装-sublime-text"></a> 下载安装 Sublime Text</h2><p><a href="https://www.sublimetext.com/">Sublime Text 官网</a> 下载最新安装包，安装好之后先别打开程序，先在程序所在文件中新建一个 “Data” 文件夹，然后再打开程序。这样做的目的是为了让 Sublime Text 的配置直接保存在安装文件夹中，方便备份和使用，如果不这么做的话，在 Windows 平台下默认会把配置文件保存到 “C:\Users\XXX\AppData” 里面，不方便操作。</p><p>Sublime Text 是一款收费软件，但是它是永久试用的。换句话说，如果你有闲钱的话，可以买一个 License 支持一下作者，售价是 $80。如果你没有钱或者不想花钱的话，你也可以直接用，没有任何问题，只是每隔一段时间会提示你正在使用未注册版本。如果觉得弹窗不是大问题的话，大可放心使用，不过如果是强迫症患者受不了弹窗，也没有问题，可以百度对应版本号的注册码，比如我现在使用的是 3176 版本，那么就可以直接使用这个注册码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">----- BEGIN LICENSE -----<br>sgbteam<br>Single User License<br>EA7E-1153259<br>8891CBB9 F1513E4F 1A3405C1 A865D53F<br>115F202E 7B91AB2D 0D2A40ED 352B269B<br>76E84F0B CD69BFC7 59F2DFEF E267328F<br>215652A3 E88F9D8F 4C38E3BA 5B2DAAE4<br>969624E7 DC9CD4D5 717FB40C 1B9738CF<br>20B3C4F1 E917B5B3 87C38D9C ACCE7DD8<br>5F7EF854 86B9743C FADC04AA FB0DA5C0<br>F913BE58 42FEA319 F954EFDD AE881E0B<br>------ END LICENSE ------<br></code></pre></td></tr></table></figure><p>当然，如果经济上比较充裕的话，还是推荐购买一份支持作者的。</p><h2 id="安装-package-control"><a class="markdownIt-Anchor" href="#安装-package-control"></a> 安装 Package Control</h2><p>初始的 Sublime Text 其实就是一个比记事本好看点的编辑器，为了能够更自由地改造，还需要安装一个插件管理工具：Package Control。</p><p>在 <a href="https://packagecontrol.io/installation#st3">Package Control 官网</a> 上可以看到具体的安装方法：</p><ol><li>在 Sublime Text 中通过快捷键 <code>Ctrl+`</code> 打开控制台</li><li>输入代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request,os,hashlib; h = <span class="hljs-string">&#x27;6f4c264a24d933ce70df5dedcf1dcaee&#x27;</span> + <span class="hljs-string">&#x27;ebe013ee18cced0ef93d5f746d80ef60&#x27;</span>; pf = <span class="hljs-string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="hljs-string">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;%20&#x27;</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="hljs-string">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class="hljs-keyword">if</span> dh != h <span class="hljs-keyword">else</span> <span class="hljs-built_in">open</span>(os.path.join( ipp, pf), <span class="hljs-string">&#x27;wb&#x27;</span> ).write(by)<br></code></pre></td></tr></table></figure><p>即可完成安装。随后通过快捷键 <code>ctrl + shift + p</code> 打开命令面板，然后输入 “Package Control” 即可看到 Pacakage Control 的各种指令，也可以直接使用指令的首字母的简写调用：</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">pcip</td><td style="text-align:left">安装插件</td></tr><tr><td style="text-align:left">pcrp</td><td style="text-align:left">删除插件</td></tr><tr><td style="text-align:left">pclp</td><td style="text-align:left">列出已安装插件</td></tr></tbody></table><h2 id="安装常用插件"><a class="markdownIt-Anchor" href="#安装常用插件"></a> 安装常用插件</h2><h3 id="核心插件"><a class="markdownIt-Anchor" href="#核心插件"></a> 核心插件</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">Package Control</td><td style="text-align:left">插件管理插件</td></tr><tr><td style="text-align:left">PackageResourceViewer</td><td style="text-align:left">插件资源管理</td></tr><tr><td style="text-align:left">SideBarEnhancements</td><td style="text-align:left">扩展侧边栏功能</td></tr><tr><td style="text-align:left">AdvancedNewFile</td><td style="text-align:left">快速新建文件</td></tr><tr><td style="text-align:left">IMESupport</td><td style="text-align:left">输入法跟随光标</td></tr><tr><td style="text-align:left">FindKeyConflicts</td><td style="text-align:left">检测快捷键冲突</td></tr><tr><td style="text-align:left">Sublimerge 3</td><td style="text-align:left">文件对比</td></tr><tr><td style="text-align:left">Git</td><td style="text-align:left">整合 Git 命令</td></tr><tr><td style="text-align:left">Gitgutter</td><td style="text-align:left">显示当前仓库状态</td></tr><tr><td style="text-align:left">A File Icon</td><td style="text-align:left">文件图标显示</td></tr></tbody></table><h3 id="功能插件"><a class="markdownIt-Anchor" href="#功能插件"></a> 功能插件</h3><p><strong>前端工具</strong></p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">Emmet</td><td style="text-align:left">前端工具</td></tr><tr><td style="text-align:left">PyV8</td><td style="text-align:left">Emmet 所需插件，安装 Emmet 时自动安装</td></tr><tr><td style="text-align:left">Gulp</td><td style="text-align:left">整合 Gulp 命令</td></tr><tr><td style="text-align:left">Better Completion</td><td style="text-align:left">代码补全</td></tr><tr><td style="text-align:left">CSS3</td><td style="text-align:left">更完整地支持CSS3 和 PostCSS-cssnext</td></tr><tr><td style="text-align:left">SASS</td><td style="text-align:left">SASS 语法高亮和自动完成</td></tr><tr><td style="text-align:left">Color Convert</td><td style="text-align:left">颜色代码转换</td></tr><tr><td style="text-align:left">ColorPicker</td><td style="text-align:left">颜色选择器</td></tr><tr><td style="text-align:left">Autoprefixer</td><td style="text-align:left">添加 CSS 浏览器前缀</td></tr><tr><td style="text-align:left">HTML-CSS-JS Prettify</td><td style="text-align:left">HTML，CSS，JavaScript 和 JSON 代码格式化程序，需要 nodejs 支持</td></tr><tr><td style="text-align:left">SublimeLinter</td><td style="text-align:left">代码错误检测工具，需要使用 nodejs 的 npm 在本地安装相应的软件</td></tr><tr><td style="text-align:left">SublimeLinter-jshint</td><td style="text-align:left">JavaScript 错误检查工具，需要安装 jshint</td></tr><tr><td style="text-align:left">SublimeLinter-csslint</td><td style="text-align:left">CSS 错误检查工具，需要安装 csslint</td></tr></tbody></table><p><strong>综合工具</strong></p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">Alignment</td><td style="text-align:left">代码对齐</td></tr><tr><td style="text-align:left">BracketHighlighter</td><td style="text-align:left">匹配各种括号并高亮显示</td></tr><tr><td style="text-align:left">File Header</td><td style="text-align:left">文件标头模板生成</td></tr><tr><td style="text-align:left">AutoFileName</td><td style="text-align:left">在需要输入路径的地方显示路径下的文件内容</td></tr><tr><td style="text-align:left">DocBlockr</td><td style="text-align:left">辅助生成代码注释</td></tr><tr><td style="text-align:left">PlainTasks</td><td style="text-align:left">TO-DO List 插件</td></tr><tr><td style="text-align:left">MarkdownEditing</td><td style="text-align:left">Markdown 编辑器</td></tr><tr><td style="text-align:left">MarkdownPreview</td><td style="text-align:left">Markdown 预览以及导出</td></tr><tr><td style="text-align:left">LaTeXTools</td><td style="text-align:left">LaTeX 编辑器</td></tr><tr><td style="text-align:left">LaTeX-cwl</td><td style="text-align:left">LaTeX 自动完成</td></tr></tbody></table><p><em>注意</em></p><ul><li>使用 LaTeXTools 需要自己安装 MikTex 以及 SumatraPDF，并且在配置文件里面修改路径，其中 SumatraPDF 需要把安装路径加入 PATH。同时为了实现内容回溯，需要用到命令：</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sumatrapdf.exe -inverse-search &quot;\&quot;C:\Program Files\Sublime Text 3\sublime_text.exe\&quot; \&quot;%f:%l\&quot;&quot;<br></code></pre></td></tr></table></figure><h2 id="安装主题配色"><a class="markdownIt-Anchor" href="#安装主题配色"></a> 安装主题配色</h2><p>个人觉得比较好看的主题有两个：</p><ul><li>Theme - Gravity</li><li>DA UI</li></ul><p>都可以通过 Package Control 直接搜索安装，上图中我就是混合使用 DA UI 的主题和 Theme - Gravity 的配色。更多的主题和配色可以在 Package Control 的官网上找到。</p><h2 id="自定义设置"><a class="markdownIt-Anchor" href="#自定义设置"></a> 自定义设置</h2><p>Sublime Text 的设置在 “Preferences -&gt; Settings” 中，打开之后左边是每个设置项的具体描述，右边就可以编辑自己的设置了。下面给出的是我使用的设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-comment">// Theme</span><br><span class="hljs-attr">&quot;theme&quot;</span>: <span class="hljs-string">&quot;DA.sublime-theme&quot;</span>,                                         <span class="hljs-comment">// DA UI 主题</span><br><span class="hljs-attr">&quot;color_scheme&quot;</span>: <span class="hljs-string">&quot;Packages/Theme - Gravity/Monokai Gravity.tmTheme&quot;</span>,  <span class="hljs-comment">// Gravity 的配色</span><br><br><span class="hljs-comment">// Font</span><br><span class="hljs-attr">&quot;font_size&quot;</span>: <span class="hljs-number">16</span>,                 <span class="hljs-comment">// 设置字体大小</span><br><span class="hljs-attr">&quot;font_face&quot;</span>: <span class="hljs-string">&quot;Source Code Pro&quot;</span>,  <span class="hljs-comment">// 设置字体，如果没有安装 Source Code Pro 的话推荐使用 Consolas</span><br><span class="hljs-attr">&quot;font_options&quot;</span>: [<span class="hljs-string">&quot;gdi&quot;</span>],         <span class="hljs-comment">// 字体选项，使用 &quot;gdi&quot; 的方式渲染字体，如果没有这个选项，在最新版的 Sublime 中的中文显示会出问题</span><br><br><span class="hljs-comment">// Edit</span><br><span class="hljs-attr">&quot;tab_size&quot;</span>: <span class="hljs-number">2</span>,                              <span class="hljs-comment">// tab 一下缩进2个单位</span><br><span class="hljs-attr">&quot;translate_tabs_to_spaces&quot;</span>: <span class="hljs-literal">true</span>,           <span class="hljs-comment">// 将 tab 转成空格</span><br><span class="hljs-attr">&quot;trim_trailing_white_space_on_save&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 保存文件时将行尾的空白都去掉</span><br><span class="hljs-attr">&quot;ensure_newline_at_eof_on_save&quot;</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">// 保存文件时确保文件最后一行是空行</span><br><br><span class="hljs-comment">// View</span><br><span class="hljs-attr">&quot;show_encoding&quot;</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">// 界面右下角显示当前的文件编码</span><br><span class="hljs-attr">&quot;highlight_line&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 将光标所在行高亮</span><br><br><span class="hljs-comment">// Auto Complete</span><br><span class="hljs-attr">&quot;auto_complete_commit_on_tab&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 使用 tab 自动补全</span><br><span class="hljs-attr">&quot;auto_complete_cycle&quot;</span>: <span class="hljs-literal">true</span>,          <span class="hljs-comment">// 在自动补全的弹窗中可以循环选择项目</span><br><span class="hljs-attr">&quot;auto_complete_triggers&quot;</span>:             <span class="hljs-comment">// 设置具体的自动完成触发规则</span><br>[<br>&#123;<br><span class="hljs-attr">&quot;characters&quot;</span>: <span class="hljs-string">&quot;&lt;&quot;</span>,<br><span class="hljs-attr">&quot;selector&quot;</span>: <span class="hljs-string">&quot;text.html&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;characters&quot;</span>: <span class="hljs-string">&quot;\\&quot;</span>,<br><span class="hljs-attr">&quot;selector&quot;</span>: <span class="hljs-string">&quot;text.tex.latex&quot;</span><br>&#125;<br>],<br><br><span class="hljs-comment">// Match（此处是为了配合 BracketHighlighter 插件而做的更改）</span><br><span class="hljs-attr">&quot;match_brackets&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;match_brackets_angle&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;match_brackets_braces&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;match_brackets_content&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;match_brackets_square&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;match_tags&quot;</span>: <span class="hljs-literal">false</span>,<br><br><span class="hljs-comment">// Package Ignorance</span><br><span class="hljs-attr">&quot;ignored_packages&quot;</span>: [<span class="hljs-string">&quot;Vintage&quot;</span>]  <span class="hljs-comment">// 忽略插件</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用-sublime-text"><a class="markdownIt-Anchor" href="#使用-sublime-text"></a> 使用 Sublime Text</h1><h2 id="使用技巧"><a class="markdownIt-Anchor" href="#使用技巧"></a> 使用技巧</h2><h3 id="编译系统"><a class="markdownIt-Anchor" href="#编译系统"></a> 编译系统</h3><p>Sublime Text 自带多语言的编译选项，位于 “Tools -&gt; Build System” 中，不过 Sublime Text 本身不带有任何编译器，需要提前安装好所需编译器并添加到系统的 PATH 中，现在以 C++ 为例，写一个编译文件，提供额外的编译选项。编译文件以 “.sublime-build” 结尾，保存在 “Data/Packages/User” 下（通过 “Preferences -&gt; Browser Packages” 访问），可以自己新建文件也可以通过 “Tools -&gt; Build System -&gt; New Build System” 新建编译文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;encoding&quot;</span>: <span class="hljs-string">&quot;utf-8&quot;</span>,<br><span class="hljs-attr">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;g++ -Wall -std=c++11 \&quot;$file_name\&quot; -o \&quot;$file_base_name\&quot;&quot;</span>,<br><span class="hljs-attr">&quot;file_regex&quot;</span>: <span class="hljs-string">&quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;</span>,<br><span class="hljs-attr">&quot;working_dir&quot;</span>: <span class="hljs-string">&quot;$file_path&quot;</span>,<br><span class="hljs-attr">&quot;selector&quot;</span>: <span class="hljs-string">&quot;source.c++, source.c&quot;</span>,<br><span class="hljs-attr">&quot;variants&quot;</span>:<br>[<br>&#123;<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Display in Sublime&quot;</span>,<br>        <span class="hljs-attr">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;g++ -Wall -std=c++11 \&quot;$file_name\&quot; -o \&quot;$file_base_name\&quot; &amp;&amp; cmd /c \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot;&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Display in CMD&quot;</span>,<br>        <span class="hljs-attr">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;g++ -Wall -std=c++11 \&quot;$file\&quot; -o \&quot;$file_base_name\&quot; &amp;&amp; start cmd /c \&quot;\&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot; &amp; pause\&quot;&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Buld with Makefile&quot;</span>,<br>        <span class="hljs-attr">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;make &amp;&amp; start cmd /c \&quot;\&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot; &amp; pause\&quot;&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Debug in GDB&quot;</span>,<br>        <span class="hljs-attr">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;g++ -g -std=c++11 \&quot;$file\&quot; -o \&quot;$file_base_name\&quot; &amp;&amp; start cmd /c gdb $&#123;file_path&#125;/$&#123;file_base_name&#125; &amp; pause&quot;</span><br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p>各个参数的含义和使用方法参照这篇博客：<a href="http://www.yalewoo.com/sublime_text_3_gcc.html">http://www.yalewoo.com/sublime_text_3_gcc.html</a></p><h3 id="代码片段"><a class="markdownIt-Anchor" href="#代码片段"></a> 代码片段</h3><p>Sublime Text 自带了许多语言的常见代码片段，然而在某些情况下，自带的代码片段不能满足自己的需求，比如结构不符合，参数不符合等等，这时可以利用自定义的代码片段来解决问题。可以自己新建代码片段保存为 “.sublime-snippet”  文件，也可以通过 “Tools -&gt; Developer -&gt; New Snippet” 新建代码片段，自定义代码片段也保存在 “Data/Packages/User” 文件夹下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">snippet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Custom if<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">content</span>&gt;</span><br>    &lt;![CDATA[if ($&#123;1:/* condition */&#125;) &#123;<br>      $&#123;2:/* codes */&#125;<br>    &#125;]]&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">content</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tabTrigger</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">tabTrigger</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>source.c, source.objc, source.c++, source.objc++<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">snippet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这其中：</p><ul><li><code>&lt;description&gt;</code>：触发自动完成时，待选项右边显示的描述。</li><li><code>&lt;content&gt;</code>：代码片段内容，包含在<code>&lt;![CDATA[]]&gt;</code>中。类似 “${1:xxx}” 的结构的作用是在显示片段后，光标所在的位置，通过 tab 键切换，顺序就是里面的数字大小，唯一不同的是 “$0”，它代表代码片段结束的位置。</li><li><code>&lt;tabTrigger&gt;</code>：触发代码片段的关键词。</li><li><code>&lt;scope&gt;</code>：代码片段的适用范围</li></ul><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h3><p>Sublime Text 自带了各种各样的快捷键，有关快捷键的具体使用说明在下一部分，这里主要的目的是解决快捷键的一个常见问题。这个问题就是发生按键冲突，发生冲突的原因有很多种：要么是由于不同的插件有自己的快捷键，但是键盘上的按键就那么多，因此很多插件会由于快捷键冲突而无法使用；要么某些系统或软件的快捷键和 Sublime Text 的快捷键起冲突。无论是哪种，都有可能需要自己修改默认的快捷键，除此之外，有时候某些快捷键不符合自己的习惯，这时也需要修改默认的快捷键。快捷键在 “Preferences -&gt; Key Bindings” 进行设置，接下来以处理按键冲突为例，展示如何修改快捷键：</p><p>首先利用之前安装的 “FindKeyConflicts” 插件检查具体发生冲突的有哪些按键：</p><p><code>ctrl + shift + p</code> 打开命令栏，然后输入 “fkc”，在下方选择 “FindKeyConflicts：All Conflicts”，然后稍等片刻就会显示。现在随便取一个按键为例子：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">[ctrl+s]<br>   save             Default<br>   sublimerge_save  Sublimerge 3  [&#123;&quot;key&quot;: &quot;setting.is_sublimerge_view&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: true, &quot;match_all&quot;: true&#125;]<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>ctrl + s</code> 这个按键有两个行为，一个是默认的保存功能，一个是插件 “Sublimerge 3” 提供的 “sublimerge_save” 功能。尽管实际上，由于插件的按键设置中的 “Context（解决按键冲突的额外方法）” 部分的设置，并不会发生冲突，但这里假设它发生冲突，需要把它改为其他按键。</p><p>首先在对应插件的设置中，这里以 Sublimerge 为例的话就是：“Preferences -&gt; Package Settings -&gt; Sublimerge” 找到 “Key Bindings - User”，点击打开后即可输入自己的快捷键设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;keys&quot;</span>: [<span class="hljs-string">&quot;ctrl+s&quot;</span>,<span class="hljs-string">&quot;ctrl+c&quot;</span>], <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;sublimerge_save&quot;</span>, <span class="hljs-attr">&quot;context&quot;</span>: [<br>    &#123;<span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;setting.is_sublimerge_view&quot;</span>, <span class="hljs-attr">&quot;operator&quot;</span>: <span class="hljs-string">&quot;equal&quot;</span>, <span class="hljs-attr">&quot;operand&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">&quot;match_all&quot;</span>: <span class="hljs-literal">true</span>&#125;<br>]&#125;<br></code></pre></td></tr></table></figure><p>这其中：</p><ul><li>“keys”：具体的按键，这里的 “[“ctrl+s”,“ctrl+c”]” 代表多个按键，即按住 “ctrl” 键然后顺序按下 “s” 和 “c”。</li><li>“command”：执行的命令，这里的命令一般是插件提供的。</li><li>“context”：上下文，可以在这里指定快捷键生效的具体条件。</li></ul><h2 id="常用快捷键"><a class="markdownIt-Anchor" href="#常用快捷键"></a> 常用快捷键</h2><h3 id="通用general"><a class="markdownIt-Anchor" href="#通用general"></a> 通用（General）</h3><ul><li><code>↑↓←→</code>：上下左右移动光标</li><li><code>Alt</code>：调出菜单</li><li><code>Ctrl + Shift + P</code>：调出命令板（Command Palette）</li><li><code>Ctrl + `</code> ：调出控制台</li></ul><h3 id="编辑editing"><a class="markdownIt-Anchor" href="#编辑editing"></a> 编辑（Editing）</h3><ul><li><code>Ctrl + Enter</code>：在当前行下面新增一行然后跳至该行</li><li><code>Ctrl + Shift + Enter</code>：在当前行上面增加一行并跳至该行</li><li><code>Ctrl + ←/→</code>：进行逐词移动</li><li><code>Ctrl + Shift + ←/→</code>进行逐词选择</li><li><code>Ctrl + ↑/↓</code>移动当前显示区域</li><li><code>Ctrl + Shift + ↑/↓</code>移动当前行</li></ul><h3 id="选择selecting"><a class="markdownIt-Anchor" href="#选择selecting"></a> 选择（Selecting）</h3><ul><li><code>Ctrl + D</code>：选择当前光标所在的词并高亮该词所有出现的位置，再次 <code>Ctrl + D</code> 选择该词出现的下一个位置，在多重选词的过程中，使用 <code>Ctrl + K</code> 进行跳过，使用 <code>Ctrl + U</code> 进行回退，使用 <code>Esc</code> 退出多重编辑</li><li><code>Ctrl + Shift + L</code>：将当前选中区域打散</li><li><code>Ctrl + J</code>：把当前选中区域合并为一行</li><li><code>Ctrl + M</code>：在起始括号和结尾括号间切换</li><li><code>Ctrl + Shift + M</code>：快速选择括号间的内容</li><li><code>Ctrl + Shift + J</code>：快速选择同缩进的内容</li><li><code>Ctrl + Shift + Space</code>：快速选择当前作用域（Scope）的内容</li></ul><h3 id="查找替换findingreplacing"><a class="markdownIt-Anchor" href="#查找替换findingreplacing"></a> 查找&amp;替换（Finding&amp;Replacing）</h3><ul><li><code>F3</code>：跳至当前关键字下一个位置</li><li><code>Shift + F3</code>：跳到当前关键字上一个位置</li><li><code>Alt + F3</code>：选中当前关键字出现的所有位置</li><li><code>Ctrl + F/H</code>：进行标准查找/替换，之后：<ul><li><code>Alt + C</code>：切换大小写敏感（Case-sensitive）模式</li><li><code>Alt + W</code>：切换整字匹配（Whole matching）模式</li><li><code>Alt + R</code>：切换正则匹配（Regex matching）模式</li><li><code>Ctrl + Shift + H</code>：替换当前关键字</li><li><code>Ctrl + Alt + Enter</code>：替换所有关键字匹配</li></ul></li><li><code>Ctrl + Shift + F</code>：多文件搜索&amp;替换</li></ul><h3 id="跳转jumping"><a class="markdownIt-Anchor" href="#跳转jumping"></a> 跳转（Jumping）</h3><ul><li><code>Ctrl + P</code>：跳转到指定文件，输入文件名后可以：<ul><li><code>@</code> 符号跳转：输入 <code>@symbol</code> 跳转到 <code>symbol</code> 符号所在的位置</li><li><code>#</code> 关键字跳转：输入 <code>#keyword</code> 跳转到 <code>keyword</code> 所在的位置</li><li><code>:</code> 行号跳转：输入 <code>:12</code> 跳转到文件的第12行。</li></ul></li><li><code>Ctrl + R</code>：跳转到指定符号</li><li><code>Ctrl + G</code>：跳转到指定行号</li></ul><h3 id="窗口window"><a class="markdownIt-Anchor" href="#窗口window"></a> 窗口（Window）</h3><ul><li><code>Ctrl + Shift + N</code>：创建一个新窗口</li><li><code>Ctrl + N</code>：在当前窗口创建一个新标签</li><li><code>Ctrl + W</code>：关闭当前标签，当窗口内没有标签时会关闭该窗口</li><li><code>Ctrl + Shift + T</code>：恢复刚刚关闭的标签</li></ul><h4 id="屏幕screen"><a class="markdownIt-Anchor" href="#屏幕screen"></a> 屏幕（Screen）</h4><ul><li><code>F11</code>：切换普通全屏</li><li><code>Shift + F11</code>：切换无干扰全屏</li><li><code>Alt + Shift + 2</code>：进行左右分屏</li><li><code>Alt + Shift + 8</code>：进行上下分屏</li><li><code>Alt + Shift + 5</code>：进行上下左右分屏</li><li>分屏之后，使用 <code>Ctrl + 数字键</code> 跳转到指定屏，使用 <code>Ctrl + Shift + 数字键</code> 将当前屏移动到指定屏</li></ul><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p>官方文档：<a href="http://www.sublimetext.com/docs/3/">http://www.sublimetext.com/docs/3/</a><br />官方论坛：<a href="http://www.sublimetext.com/forum/">http://www.sublimetext.com/forum/</a><br />非官方文档（推荐）：<a href="http://sublime-text-unofficial-documentation.readthedocs.org/">http://sublime-text-unofficial-documentation.readthedocs.org/</a><br />Sublime Text 全程指南：<a href="http://lucida.me/blog/sublime-text-complete-guide/">http://lucida.me/blog/sublime-text-complete-guide/</a></p>]]></content>
    
    
    <categories>
      
      <category>效率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Gulp&amp;Webpack构建前端脚手架</title>
    <link href="/2019/09/30/%E4%BD%BF%E7%94%A8Gulp&amp;Webpack%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/2019/09/30/%E4%BD%BF%E7%94%A8Gulp&amp;Webpack%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="使用构建工具的原因"><a class="markdownIt-Anchor" href="#使用构建工具的原因"></a> 使用构建工具的原因</h1><p>自从 nodejs 诞生以来，很多前端工作都可以在本地进行，其中就包括 JS 调试和工作流等。最开始应用工作流的插件叫 Grunt，因为起步早，因此插件多，内容丰富，但是执行速度比较慢。后来就出了 Gulp，和 Grunt 类似，不过由于 Gulp 利用了 nodejs 的流（stream），因此效率十分给力，唯一的缺点就是插件没有 Grunt 多，不过发展到今天，插件也逐渐多起来了。大家有可能还听说过 Webpack，最近几年非常热门，但是 Webpack 的亮点主要是模块打包，可以和 Gulp 配合使用。</p><p>使用 Gulp 不仅能对资源进行优化，而且在开发过程中能够通过配置自动完成很多重复的任务，让我们可以专注于代码，提高工作效率；而使用 Webpack，可以把众多模块打包成一个文件，减少网络请求次数。尽管 Gulp 和 Webpack 的许多功能可以互相代替，但是它们各自的核心功能还是不同的。</p><p>用 Gulp 完成的工作：</p><ul><li>模块化</li><li>编译 sass</li><li>合并优化压缩 css</li><li>校验压缩 js</li><li>优化图片</li><li>添加文件指纹（md5）</li><li>浏览器实时刷新</li></ul><p>用 Webpack 完成的工作：</p><ul><li>打包所有 js 文件</li></ul><h1 id="安装配置-gulp-和-webpack"><a class="markdownIt-Anchor" href="#安装配置-gulp-和-webpack"></a> 安装配置 Gulp 和 Webpack</h1><p>首先安装好最新的 nodejs（10.0.0）和 npm（6.0.0）。然后全局安装 gulp，由于我用的 ES6 的语法，因此还安装了 Babel：</p><ul><li>第一步：项目中新建以下目录结构</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">dist<br>src<br>├──layout/<br>├──sass/<br>├──img/<br>├──js/<br>└──index.html<br>.babelrc<br>package.json<br>gulpfile.babel.js<br></code></pre></td></tr></table></figure><ul><li>第二步：完成 package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;gulp-build&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Gulp.js&quot;</span>,<br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123; <span class="hljs-comment">// 提供 npm 脚本用于编译</span><br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;gulp&quot;</span>,<br>    <span class="hljs-attr">&quot;watch&quot;</span>: <span class="hljs-string">&quot;gulp watch&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;gulp build --production&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第三步：完成 .babelrc</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;env&quot;</span>], <span class="hljs-comment">// 使用 babel 默认的转换规则</span><br>  <span class="hljs-attr">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第四步：完成 gulpfile.babel.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Gulp Build File</span><br><span class="hljs-comment"> * Version: 2.0.0</span><br><span class="hljs-comment"> * User: NickHopps</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> gulp          <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gulp&#x27;</span>;<br><span class="hljs-keyword">import</span> plugins       <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gulp-load-plugins&#x27;</span>;<br><span class="hljs-keyword">import</span> yargs         <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;yargs&#x27;</span>;<br><span class="hljs-keyword">import</span> browser       <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;browser-sync&#x27;</span>;<br><span class="hljs-keyword">import</span> named         <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vinyl-named&#x27;</span>;<br><span class="hljs-keyword">import</span> webpackStream <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;webpack-stream&#x27;</span>;<br><span class="hljs-keyword">import</span> webpack       <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;webpack&#x27;</span><br><br><span class="hljs-keyword">const</span> $ = plugins(&#123;<br>  rename: &#123;<br>    <span class="hljs-string">&#x27;gulp-rev-append&#x27;</span>: <span class="hljs-string">&#x27;rev&#x27;</span>,<br>    <span class="hljs-string">&#x27;gulp-file-include&#x27;</span>: <span class="hljs-string">&#x27;fileinclude&#x27;</span><br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> PORT = <span class="hljs-number">8000</span>;<br><br><span class="hljs-keyword">const</span> PRODUCTION = !!(yargs.argv.production);<br><br><span class="hljs-keyword">const</span> PATHS = &#123;<br>  pages: &#123;<br>    src: <span class="hljs-string">&#x27;src/*.html&#x27;</span>,<br>    dist: <span class="hljs-string">&#x27;dist/&#x27;</span><br>  &#125;,<br>  styles: &#123;<br>    vendor: [<span class="hljs-string">&#x27;node_modules/foundation-sites/scss&#x27;</span>, <span class="hljs-string">&#x27;node_modules/bootstrap/scss/&#x27;</span>],<br>    src: <span class="hljs-string">&#x27;src/sass/**/*.scss&#x27;</span>,<br>    dist: <span class="hljs-string">&#x27;dist/css/&#x27;</span><br>  &#125;,<br>  scripts: &#123;<br>    src: <span class="hljs-string">&#x27;src/js/**/*.js&#x27;</span>,<br>    dist: <span class="hljs-string">&#x27;dist/js/&#x27;</span><br>  &#125;,<br>  images: &#123;<br>    src: <span class="hljs-string">&#x27;src/img/**/*.&#123;jpg,jpeg,png&#125;&#x27;</span>,<br>    dist: <span class="hljs-string">&#x27;dist/img/&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> WPCONFIG = &#123;<br>  mode: PRODUCTION ? <span class="hljs-string">&#x27;production&#x27;</span> : <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [&#123;<br>      test: <span class="hljs-regexp">/.js$/</span>,<br>      use: [&#123;<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span><br>      &#125;]<br>    &#125;]<br>  &#125;,<br>  devtool: <span class="hljs-string">&#x27;#source-map&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">/* Task to build files */</span><br>gulp.task(<span class="hljs-string">&#x27;build&#x27;</span>, gulp.series(clean, gulp.parallel(html, image, sass, javascript)));<br><br><span class="hljs-comment">/* Default Task */</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, gulp.series(<span class="hljs-string">&#x27;build&#x27;</span>, server, watch));<br><br><span class="hljs-comment">/* Task to watch */</span><br>gulp.task(<span class="hljs-string">&#x27;watch&#x27;</span>, gulp.series(server, watch));<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">html</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(PATHS.pages.src)<br>    .pipe($.fileinclude())<br>    .pipe($.cached(<span class="hljs-string">&#x27;html&#x27;</span>))<br>    .pipe($.rev())<br>    .pipe(gulp.dest(PATHS.pages.dist));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">image</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(PATHS.images.src)<br>    .pipe($.cached(<span class="hljs-string">&#x27;image&#x27;</span>))<br>    .pipe($.<span class="hljs-keyword">if</span>(PRODUCTION, $.imagemin(&#123;<span class="hljs-attr">progressive</span>: <span class="hljs-literal">true</span>&#125;)))<br>    .pipe(gulp.dest(PATHS.images.dist));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sass</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(PATHS.styles.src)<br>    .pipe($.plumber(&#123;<span class="hljs-attr">errorHandler</span>: $.notify.onError(<span class="hljs-string">&#x27;Error: &lt;%= error.message %&gt;&#x27;</span>)&#125;))<br>    .pipe($.sourcemaps.init())<br>    .pipe($.sass(&#123;<span class="hljs-attr">includePaths</span>: PATHS.styles.vendor&#125;))<br>    .pipe($.cached(<span class="hljs-string">&#x27;sass&#x27;</span>))<br>    .pipe($.autoprefixer(<span class="hljs-string">&#x27;last 2 version&#x27;</span>))<br>    .pipe($.<span class="hljs-keyword">if</span>(PRODUCTION, $.cssnano()))<br>    .pipe($.<span class="hljs-keyword">if</span>(PRODUCTION, $.rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)))<br>    .pipe($.sourcemaps.write(<span class="hljs-string">&#x27;&#x27;</span>))<br>    .pipe(gulp.dest(PATHS.styles.dist))<br>    .pipe(browser.reload(&#123; <span class="hljs-attr">stream</span>: <span class="hljs-literal">true</span> &#125;));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">javascript</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(PATHS.scripts.src)<br>    .pipe(named())<br>    .pipe($.cached(<span class="hljs-string">&#x27;script&#x27;</span>))<br>    .pipe(webpackStream(WPCONFIG, webpack))<br>    .pipe($.<span class="hljs-keyword">if</span>(PRODUCTION, $.rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)))<br>    .pipe(gulp.dest(PATHS.scripts.dist));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clean</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">`<span class="hljs-subst">$&#123;PATHS.pages.dist&#125;</span>/*`</span>)<br>    .pipe($.clean());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">server</span>(<span class="hljs-params">done</span>) </span>&#123;<br>  browser.init(&#123;<br>    server: PATHS.pages.dist,<br>    port: PORT<br>  &#125;);<br>  done();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watch</span>(<span class="hljs-params"></span>) </span>&#123;<br>  gulp.watch(<span class="hljs-string">&#x27;src/**/*.html&#x27;</span>).on(<span class="hljs-string">&#x27;all&#x27;</span>, gulp.series(html, browser.reload));<br>  gulp.watch(<span class="hljs-string">&#x27;src/img/**/*.&#123;jpg,jpeg,png&#125;&#x27;</span>).on(<span class="hljs-string">&#x27;all&#x27;</span>, gulp.series(image, browser.reload));<br>  gulp.watch(<span class="hljs-string">&#x27;src/sass/**/*.scss&#x27;</span>).on(<span class="hljs-string">&#x27;all&#x27;</span>, sass);<br>  gulp.watch(<span class="hljs-string">&#x27;src/js/**/*.js&#x27;</span>).on(<span class="hljs-string">&#x27;all&#x27;</span>, gulp.series(javascript, browser.reload));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第四步：安装项目开发依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D babel-core babel-loader babel-preset-env browser-sync gulp gulp autoprefixer gulp-babel gulp-cached gulp-clean gulp-cssnano gulp-file-include gulp-if gulp-imagemin gulp-load-plugins gulp-notify gulp-plumber gulp-rename gulp rev-append gulp-sass gulp-sourcemaps vinyl-named webpack webpack-stream yargs<br></code></pre></td></tr></table></figure><h2 id="使用的各个包及其功能"><a class="markdownIt-Anchor" href="#使用的各个包及其功能"></a> 使用的各个包及其功能</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs text">babel-core        : babel 的核心部分<br>babel-loader      : babel 提供给外部的加载器<br>babel-preset-env  : babel 的 env 规则<br>browser-sync      : 提供浏览器实时更新<br>gulp              : gulp 主程序<br>gulp-autoprefixer : gulp 的 autoprefixer 插件<br>gulp-babel        : gulp 的 babel 插件<br>gulp-cached       : 缓存 gulp 的文件流<br>gulp-clean        : 清理文件<br>gulp-cssnano      : 压缩 CSS<br>gulp-file-include : 在 HTML 中使用 include<br>gulp-if           : 提供 if 判断功能<br>gulp-imagemin     : 压缩图片<br>gulp-load-plugins : 加载 gulp 插件<br>gulp-notify       : 弹窗提醒<br>gulp-plumber      : 处理 gulp 的错误流<br>gulp-rename       : 重命名<br>gulp-rev-append   : 给文件添加 MD5<br>gulp-sass         : sass 编译插件<br>gulp-sourcemaps   : 生成 sourcemap<br>vinyl-named       : 给 vinyl 文件命名<br>webpack           : webpack 主程序<br>webpack-stream    : 把 webpack 转成流供 gulp 处理<br>yargs             : 提供命令参数功能<br></code></pre></td></tr></table></figure><h1 id="使用-gulp-和-webpack-构建项目"><a class="markdownIt-Anchor" href="#使用-gulp-和-webpack-构建项目"></a> 使用 Gulp 和 Webpack 构建项目</h1><p>创建好自己的项目文件之后，可运行下列命令构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm start <span class="hljs-comment"># 相当于执行 gulp</span><br>npm run watch <span class="hljs-comment"># 相当于执行 gulp watch</span><br>npm run build <span class="hljs-comment"># 相当于执行 gulp build --production</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
      <tag>项目构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++标准模板库STL</title>
    <link href="/2019/09/30/C++%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL/"/>
    <url>/2019/09/30/C++%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL/</url>
    
    <content type="html"><![CDATA[<p>由于在算法题中常用 C 或者 C++ 来作为解题语言，而 STL 又提供了现成好用的工具，因此本篇文章的目的就是简要地介绍 STL 里面常用的各种数据结构以及工具。</p><span id="more"></span><h1 id="vector-常见用法"><a class="markdownIt-Anchor" href="#vector-常见用法"></a> vector 常见用法</h1><h2 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h2><p>动态数组</p><h2 id="定义-vector"><a class="markdownIt-Anchor" href="#定义-vector"></a> 定义 vector</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;type&gt; name;<br></code></pre></td></tr></table></figure><p>如果 type 也是一个 STL 容器，定义时需要注意“&gt;&gt;”之间要加空格：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt; name;<br></code></pre></td></tr></table></figure><h3 id="元素访问"><a class="markdownIt-Anchor" href="#元素访问"></a> 元素访问</h3><ol><li>通过下标直接访问: <code>v[index]</code></li><li>通过迭代器访问：<code>vector&lt;type&gt;::iterator it</code></li></ol><h3 id="常用函数"><a class="markdownIt-Anchor" href="#常用函数"></a> 常用函数</h3><ol><li><code>push_back(x)</code>：元素后新增一个元素，复杂度为O(1)</li><li><code>pop_back(x)</code>：删除容器的尾元素，复杂度为O(1)</li><li><code>size()</code>：获得容器中的元素个数，复杂度为O(1)</li><li><code>clear()</code>：清空容器中所有元素，复杂度为O(N)</li><li><code>insert(it, x)</code>：在容器任意迭代器处插入元素，复杂度为O(N)</li><li><code>erase(it)[erase(it1, it2)]</code>：删除容器中单个元素或者某一范围中的元素，复杂度为O(N)</li></ol><h1 id="set-常见用法"><a class="markdownIt-Anchor" href="#set-常见用法"></a> set 常见用法</h1><h2 id="特点-2"><a class="markdownIt-Anchor" href="#特点-2"></a> 特点</h2><ol><li>内部自动有序</li><li>不含重复元素</li></ol><h2 id="定义-set"><a class="markdownIt-Anchor" href="#定义-set"></a> 定义 set</h2><p>和 vector 类似</p><h2 id="元素访问-2"><a class="markdownIt-Anchor" href="#元素访问-2"></a> 元素访问</h2><p>set 只能通过迭代器访问，遍历 set 方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;type&gt;::iterator it = st.begin(); it != st.end(); ++it) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用函数-2"><a class="markdownIt-Anchor" href="#常用函数-2"></a> 常用函数</h2><ol><li><code>insert(x)</code>：插入容器并自动递增排序和去重，复杂度为O(logN)</li><li><code>find(val)</code>：返回容器中对应值为 val 的迭代器，复杂度为O(logN)</li><li><code>erase(it[val])[erase(it1, it2)]</code>：删除容器中元素，删除单个元素复杂度为O(1)或者O(logN)，删除多个元素复杂度为O(it1\sim it2)</li><li><code>size()</code>：获得容器中元素的个数，复杂度为O(1)</li><li><code>clear()</code>：清空容器中的元素，复杂度为O(N)</li></ol><h1 id="string-常见用法"><a class="markdownIt-Anchor" href="#string-常见用法"></a> string 常见用法</h1><h2 id="定义-string"><a class="markdownIt-Anchor" href="#定义-string"></a> 定义 string</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">string</span> s = <span class="hljs-string">&quot;xxx&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="元素访问-3"><a class="markdownIt-Anchor" href="#元素访问-3"></a> 元素访问</h2><ol><li>通过下标</li><li>通过迭代器：<code>string::iterator it</code></li></ol><h2 id="常用函数-3"><a class="markdownIt-Anchor" href="#常用函数-3"></a> 常用函数</h2><ol><li><code>+=</code>：可以将两个 string 拼接起来</li><li><code>==/!=/&gt;/&lt;...</code>：通过字典序比较两个 string 的大小</li><li><code>length()/size()</code>：返回 string 的长度，复杂度为O(1)</li><li><code>insert(n, string)[insert(it, it1, it2)]</code>：将 string 插入 n 位置，或将另一 string 的 it1 到 it2 插入到当前 string 的 it 处，复杂度为O(N)</li><li><code>erase(it)[erase(it1, it2)][erase(n, length)]</code>：删除容器中元素，复杂度为O(N)</li><li><code>clear()</code>：清空容器中的元素，复杂度为O(1)</li><li><code>substr(n, len)</code>：返回从 n 开始，长度为 len 的子串，复杂度为O(len)</li><li><code>string::npos</code>：find 函数失配时的返回值</li><li><code>find(str)[find(str, n)]</code>：从头或从 n 处开始匹配 str，复杂度为O(nm)，其中 n 为主串的长度，m 为 str 的长度</li><li><code>replace(n, len, str)[replace(it1, it2, str)]</code>：将主串某一范围内的子串替换为 str，复杂度为O(L)，L 为主串的长度</li></ol><h1 id="map-常见用法"><a class="markdownIt-Anchor" href="#map-常见用法"></a> map 常见用法</h1><h2 id="特点-3"><a class="markdownIt-Anchor" href="#特点-3"></a> 特点</h2><ol><li>提供多类型键值对映射</li></ol><h2 id="定义-map"><a class="markdownIt-Anchor" href="#定义-map"></a> 定义 map</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">map</span>&lt;type1, type2&gt; name;<br></code></pre></td></tr></table></figure><h2 id="元素访问-4"><a class="markdownIt-Anchor" href="#元素访问-4"></a> 元素访问</h2><ol><li>通过下标</li><li>通过迭代器：<code>map&lt;type1, type2&gt;::iterator it</code>，其中 <code>it-&gt;first</code> 是键，<code>it-&gt;second</code> 是值</li></ol><h2 id="常用函数-4"><a class="markdownIt-Anchor" href="#常用函数-4"></a> 常用函数</h2><ol><li><code>find(key)</code>：返回键为 key 的映射的迭代器，复杂度为O(logN)</li><li><code>erase(it)[erase(key)][erase(it1, it2)]</code>：删除元素，删除单个元素，迭代器复杂度为O(1)，通过键删除复杂度为O(logN)，删除所有元素复杂度为O(it1\sim it2)</li><li><code>size()</code>：获得映射的对数，复杂度为O(1)</li><li><code>clear()</code>：清空容器中所有元素，复杂度为O(1)</li></ol><h1 id="queue-常见用法"><a class="markdownIt-Anchor" href="#queue-常见用法"></a> queue 常见用法</h1><h2 id="定义-queue"><a class="markdownIt-Anchor" href="#定义-queue"></a> 定义 queue</h2><p>和上述容器类似</p><h2 id="元素访问-5"><a class="markdownIt-Anchor" href="#元素访问-5"></a> 元素访问</h2><ol><li>通过 <code>front()</code> 访问队首</li><li>通过 <code>back()</code> 访问队尾</li></ol><h2 id="常用函数-5"><a class="markdownIt-Anchor" href="#常用函数-5"></a> 常用函数</h2><ol><li><code>push(x)/pop(x)</code>：入队出队，复杂度都为O(1)</li><li><code>front()/back()</code>：获得队首、队尾元素，复杂度都为O(1)</li><li><code>empty()</code>：判断队列是否为空，复杂度为O(1)</li><li><code>size()</code>：返回队列中元素个数，复杂度为O(1)</li></ol><h1 id="priority_queue-常见用法"><a class="markdownIt-Anchor" href="#priority_queue-常见用法"></a> priority_queue 常见用法</h1><h2 id="特点-4"><a class="markdownIt-Anchor" href="#特点-4"></a> 特点</h2><ol><li>底层用堆实现</li><li>队首元素一定是当前队列中优先级最高的</li></ol><h2 id="定义-priority_queue"><a class="markdownIt-Anchor" href="#定义-priority_queue"></a> 定义 priority_queue</h2><p>和上述容器类似</p><h2 id="元素访问-6"><a class="markdownIt-Anchor" href="#元素访问-6"></a> 元素访问</h2><p>只能通过 <code>top()</code> 访问队首元素</p><h2 id="常用函数-6"><a class="markdownIt-Anchor" href="#常用函数-6"></a> 常用函数</h2><ol><li><code>push(x)/pop(x)</code>：入队出队，复杂度都为O(logN)</li><li><code>top()</code>：获得队首元素，复杂度为O(1)</li><li><code>empty()</code>：判断队列是否为空，复杂度为O(1)</li><li><code>size()</code>：返回队列中元素个数，复杂度为O(1)</li></ol><h2 id="元素优先级设置"><a class="markdownIt-Anchor" href="#元素优先级设置"></a> 元素优先级设置</h2><h3 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型"></a> 基本数据类型</h3><p>以 int 为例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, less&lt;<span class="hljs-keyword">int</span>&gt; &gt; name;<br></code></pre></td></tr></table></figure><p>其中多出来的两个参数：</p><ul><li><code>vector&lt;int&gt;</code>：承载底层数据结构堆的容器</li><li><code>less&lt;int&gt;</code>：对第一个参数的比较类，less 表示数字大的优先级大，greater 表示数字小的优先级大</li></ul><h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h3><p>首先在结构体中重载运算符（使用 &amp; 引用提高效率）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">struct_name</span> &#123;</span><br>  <span class="hljs-built_in">string</span> name;<br>  <span class="hljs-keyword">int</span> value;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (struct_name&amp; s1, struct_name&amp; s2) &#123;<br>    <span class="hljs-keyword">return</span> f1.value &lt; f2.value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着直接定义 struct_name 类型的优先队列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">priority_queue</span>&lt;struct_name&gt; name;<br></code></pre></td></tr></table></figure><p>或者可以把重载函数写在结构体外面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmp</span> &#123;</span><br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span> <span class="hljs-params">()</span> <span class="hljs-params">(struct_name&amp; s1, struct_name&amp; s2)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> f1.value &lt; f2.value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时定义优先队列的方法为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, cmp &gt; name;<br></code></pre></td></tr></table></figure><h1 id="stack-常见用法"><a class="markdownIt-Anchor" href="#stack-常见用法"></a> stack 常见用法</h1><h2 id="定义-stack"><a class="markdownIt-Anchor" href="#定义-stack"></a> 定义 stack</h2><p>和上述容器类似</p><h2 id="元素访问-7"><a class="markdownIt-Anchor" href="#元素访问-7"></a> 元素访问</h2><p>只能通过 <code>top()</code> 访问栈顶元素</p><h2 id="常用函数-7"><a class="markdownIt-Anchor" href="#常用函数-7"></a> 常用函数</h2><ol><li><code>push(x)/pop(x)</code>：入栈出栈，复杂度都为O(1)</li><li><code>top()</code>：获得栈顶元素，复杂度为O(1)</li><li><code>empty()</code>：判断队列是否为空，复杂度为O(1)</li><li><code>size()</code>：返回队列中元素个数，复杂度为O(1)</li></ol><h1 id="pair-常见用法"><a class="markdownIt-Anchor" href="#pair-常见用法"></a> pair 常见用法</h1><h2 id="特点-5"><a class="markdownIt-Anchor" href="#特点-5"></a> 特点</h2><p>方便地绑定两个元素</p><h2 id="定义-pair"><a class="markdownIt-Anchor" href="#定义-pair"></a> 定义 pair</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">pair</span>&lt;type1, type2&gt; name;<br></code></pre></td></tr></table></figure><h2 id="元素访问-8"><a class="markdownIt-Anchor" href="#元素访问-8"></a> 元素访问</h2><p>通过 <code>name.first</code> 和 <code>name.second</code> 访问</p><h2 id="常用函数-8"><a class="markdownIt-Anchor" href="#常用函数-8"></a> 常用函数</h2><ol><li><code>==/!=/&gt;/&lt;...</code>：比较，先比较 first，当 first 相等时再比较 second</li></ol><h2 id="常见用途"><a class="markdownIt-Anchor" href="#常见用途"></a> 常见用途</h2><ol><li>用来替代二元结构体，节省时间</li><li>作为 map 的键值对进行插入</li></ol><h1 id="algorithm-常用函数"><a class="markdownIt-Anchor" href="#algorithm-常用函数"></a> algorithm 常用函数</h1><h2 id="max-min-和-abs"><a class="markdownIt-Anchor" href="#max-min-和-abs"></a> max()、min() 和 abs()</h2><p><code>max(x, y)/min(x, y)</code> 用来返回 x 和 y 中的最大值/最小值，<code>abs(x)</code> 返回 x 的绝对值，如果需要返回三个数的最大值，可使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">max(x, max(y, z));<br></code></pre></td></tr></table></figure><h2 id="swap"><a class="markdownIt-Anchor" href="#swap"></a> swap()</h2><p><code>swap(x, y)</code> 用来交换 x 和 y 的值</p><h2 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> reverse()</h2><p><code>reverse(it1, it2)</code> 将 it1 到 it2 之间的元素反转，it 可以是数组指针或者容器的迭代器</p><h2 id="next_permutation"><a class="markdownIt-Anchor" href="#next_permutation"></a> next_permutation()</h2><p>用来给出一个序列在全排列中的下一个序列</p><h2 id="fill"><a class="markdownIt-Anchor" href="#fill"></a> fill()</h2><p>用来把数组或容器中的某一段区间赋为某个相同的值</p><h2 id="sort"><a class="markdownIt-Anchor" href="#sort"></a> sort()</h2><p>sort 的使用方法为：</p><p><code>sort(首元素地址, 尾元素的下一个地址， [比较函数])</code></p><p>不填写比较函数时，默认进行递增排序，而比较函数的构造方法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(type a, type b)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lower_bound-和-upper_bound"><a class="markdownIt-Anchor" href="#lower_bound-和-upper_bound"></a> lower_bound() 和 upper_bound()</h2><p>二者需要用在有序数组或者容器中，其中</p><ol><li><code>lower_bound(it1, it2, val)</code> 用来寻找在数组或者容器中 [it1, it2) 范围内第一个大于或等于 val 的元素的位置</li><li><code>upper_bound(it1, it2, val)</code> 用来寻找在数组或者容器中 [it1, it2) 范围内第一个大于 val 的元素的位置</li></ol><p>它们的复杂度均为 O(log(it1 - it2))</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LEMP环境下WordPress建站教程</title>
    <link href="/2019/09/30/LEMP%E7%8E%AF%E5%A2%83%E4%B8%8BWordPress%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/"/>
    <url>/2019/09/30/LEMP%E7%8E%AF%E5%A2%83%E4%B8%8BWordPress%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>LEMP代表的是（L：Linux OS，E：Nginx，M：MySQL/MariaDB, P：PHP)，与之对应的是LAMP（唯一不同的是A，代表Apache网络服务器），由于Nginx轻量、高效的特性，LEMP在近来的WEB服务中的出镜率越来越高。为了追随潮流，在之前LAMP搭建Wordpress的基础上，我又尝试了使用Nginx作为Wordpress的网络服务器，尽管遇到了各种各样的问题，但是取得了不错的效果。由于Nginx的配置十分复杂，于是有很多需要注意的地方。</p><h1 id="常见网络服务器的优缺点"><a class="markdownIt-Anchor" href="#常见网络服务器的优缺点"></a> 常见网络服务器的优缺点</h1><h2 id="1-nginx"><a class="markdownIt-Anchor" href="#1-nginx"></a> 1. Nginx</h2><p>Nginx是十分轻量级的HTTP服务器，是一个高性能的HTTP和反向代理服务器，Nginx以事件驱动的方式编写，所以有非常好的性能，同时也是一个非常高效的反向代理、负载平衡。其拥有匹配Lighttpd的性能，同时还没有Lighttpd的内存泄漏问题。</p><ul><li><p>优点</p><ul><li>轻量级，处理请求异步非阻塞，抗并发，高度模块化，有着Lighttpd的性能，且更稳定。</li></ul></li><li><p>缺点</p><ul><li>Nginx在处理动态请求方面不如Apache。</li></ul></li></ul><h2 id="2-apache"><a class="markdownIt-Anchor" href="#2-apache"></a> 2. Apache</h2><p>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。但是对于那些需要更强大的Web应用服务器（比如大小、可定制、响应速度、可扩展性等方面）的人而言，Apache明显不符合他们的要求。</p><ul><li><p>优点</p><ul><li>兼容性和稳定性强，处理动态请求能力好。</li></ul></li><li><p>缺点</p><ul><li>体量大，在速度、性能不及其他轻量级WEB服务器，并且消费内存较高。</li></ul></li></ul><h2 id="3-lighttpd"><a class="markdownIt-Anchor" href="#3-lighttpd"></a> 3. Lighttpd</h2><p>Lighttpd是一个具有非常低的内存开销，cpu占用率低，效能好，以及丰富的模块等特点。lighttpd是众多OpenSource轻量级的web server中较为优秀的一个。支持FastCGI, CGI, Auth, 输出压缩(output compress), URL重写, Alias等重要功能。</p><ul><li><p>优点</p><ul><li>轻量级，CPU占用低，效能好，模块丰富，对fastcgi支持非常好，比Apache性能更高。</li></ul></li><li><p>缺点</p><ul><li>稳定性没有Apache和Nginx好。</li></ul></li></ul><p>如果考虑网站的综合状况的话，比较理想的做法是Nginx做高并发、缓存、代理前端内容，而使用Apache处理后台动态内容。不过如果只是驱动Wordpress，单独使用Nginx就够了。</p><h1 id="安装lemp"><a class="markdownIt-Anchor" href="#安装lemp"></a> 安装LEMP</h1><p>安装过程和LAMP差不多，只是几个地方稍微不同。</p><h2 id="安装nginx"><a class="markdownIt-Anchor" href="#安装nginx"></a> 安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装Nginx</span><br>sudo apt install nginx<br><br><span class="hljs-comment"># 检查Nginx运行状况</span><br>sudo systemctl status nginx.service<br></code></pre></td></tr></table></figure><h2 id="安装php7"><a class="markdownIt-Anchor" href="#安装php7"></a> 安装PHP7</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装PHP7和PHPFastCGI管理器PHP-FPM</span><br>sudo apt install php7.0 php7.0-fpm<br></code></pre></td></tr></table></figure><h2 id="安装mariadb数据库"><a class="markdownIt-Anchor" href="#安装mariadb数据库"></a> 安装MariaDB数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装MariaDB</span><br>sudo apt install mariadb-server mariadb-client php7.0-mysql<br><br><span class="hljs-comment"># 重启PHP-FPM服务以便使用MySQL模块与数据库通信</span><br>sudo systemctl restart php7.0-fpm.service<br></code></pre></td></tr></table></figure><p>为了安全加固MariaDB，运行来自Ubuntu软件仓库中的二进制包提供的安全脚本，这会询问你设置一个root密码，移除匿名用户，禁用root用户远程登录，移除测试数据库等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用安全脚本</span><br>sudo mysql_secure_installation<br><br><span class="hljs-comment"># 配置MariaDB以便普通用户能够不使用root权限来访问数据库</span><br>sudo mysql<br>MariaDB&gt; use mysql;<br>MariaDB&gt; update user <span class="hljs-built_in">set</span> plugin=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-built_in">where</span> User=<span class="hljs-string">&#x27;root&#x27;</span>;<br>MariaDB&gt; flush privileges;<br>MariaDB&gt; <span class="hljs-built_in">exit</span><br><br><span class="hljs-comment"># 然后使用如下命令执行数据库命令</span><br>mysql -u root -p -e <span class="hljs-string">&#x27;show databases&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="安装其他模块"><a class="markdownIt-Anchor" href="#安装其他模块"></a> 安装其他模块</h2><p>还有一些Wordpress会用到的模块，比如phpmyadmin和xmlrpc，安装完后需要重启PHP-FPM。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 其他模块</span><br>sudo apt install php7.0-mcrypt php7.0-mbstring php7.0-xml php7.0-xmrpc<br></code></pre></td></tr></table></figure><p>到这里LEMP的安装工作就已经基本搞定了，接下来是最重要的配置环节。</p><h1 id="配置nginx"><a class="markdownIt-Anchor" href="#配置nginx"></a> 配置Nginx</h1><h2 id="主配置"><a class="markdownIt-Anchor" href="#主配置"></a> 主配置</h2><p>首先是主配置文件<code>/etc/nginx/nginx.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># Set user and group.</span><br><span class="hljs-attribute">user</span> www-data www-data;<br><br><span class="hljs-comment"># Usually equal to number of CPUs you have.</span><br><span class="hljs-attribute">worker_processes</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment"># Global error log [ debug | info | notice | warn | error | crit ].</span><br><span class="hljs-attribute">error_log</span> /var/log/nginx/error.log <span class="hljs-literal">warn</span>;<br><br><span class="hljs-comment"># Pid file</span><br><span class="hljs-attribute">pid</span> /run/nginx.pid;<br><br><span class="hljs-section">events</span> &#123;<br><span class="hljs-attribute">worker_connections</span> <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br><span class="hljs-comment">### Basic Settings ###</span><br><br><span class="hljs-attribute">include</span> /etc/nginx/mime.types;<br><span class="hljs-attribute">default_type</span> application/octet-stream;<br><span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">60</span>;<br><span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">15m</span>; <span class="hljs-comment"># Limit the max size of plugin in Wordpress.</span><br><br><span class="hljs-comment">### SSL Settings ###</span><br><br><span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>; <span class="hljs-comment"># Dropping SSLv3, ref: POODLE</span><br><span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br><span class="hljs-comment">### Logging Settings ###</span><br><br><span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;<br><span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;<br><br><span class="hljs-comment">### Gzip Settings ###</span><br><br><span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">&quot;msie6&quot;</span>;<br><span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">gzip_proxied</span> any;<br><span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">6</span>;<br><span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">16</span> <span class="hljs-number">8k</span>;<br><span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br><span class="hljs-attribute">gzip_types</span> text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;<br><br><span class="hljs-comment">### FastCGI Settings ###</span><br><br><span class="hljs-attribute">fastcgi_cache_path</span> /tmp/wpcache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=WORDPRESS:<span class="hljs-number">250m</span> inactive=<span class="hljs-number">1d</span> max_size=<span class="hljs-number">1G</span>;<br><span class="hljs-attribute">fastcgi_temp_path</span> /tmp/wpcache/temp;<br><span class="hljs-attribute">fastcgi_cache_key</span> <span class="hljs-string">&quot;$scheme$request_method$host$request_uri&quot;</span>;<br><span class="hljs-attribute">fastcgi_cache_use_stale</span> <span class="hljs-literal">error</span> timeout invalid_header http_500;<br><span class="hljs-attribute">fastcgi_ignore_headers</span> Cache-Control Expires Set-Cookie;<br><br><span class="hljs-comment">### Virtual Host Configs ###</span><br><br><span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br><span class="hljs-attribute">include</span> /etc/nginx/sites-enabled/*;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="子配置"><a class="markdownIt-Anchor" href="#子配置"></a> 子配置</h2><p>然后是Wordpress的配置文件<code>etc/site-enabled/wordpress.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br><span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server;<br><br><span class="hljs-attribute">root</span> /home/ubuntu/wordpress;<br><br><span class="hljs-attribute">index</span> index.html index.php;<br><br><span class="hljs-attribute">server_name</span> localhost;<br><br><span class="hljs-attribute">access_log</span> /var/log/nginx/infiniture.com.access.log;<br><span class="hljs-attribute">error_log</span> /var/log/nginx/infiniture.com.<span class="hljs-literal">error</span>.log;<br><br><span class="hljs-comment"># Managed by Certbot</span><br><span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br><span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/localhost/fullchain.pem;<br><span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/localhost/privkey.pem;<br><span class="hljs-attribute">include</span> /etc/letsencrypt/options-ssl-nginx.conf;<br><span class="hljs-attribute">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem;<br><br><span class="hljs-attribute">if</span> ($scheme != <span class="hljs-string">&quot;https&quot;</span>) &#123;<br><span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://$host$request_uri;<br>&#125;<br><br><span class="hljs-comment"># Add rewrite support for wordpress</span><br><span class="hljs-attribute">location</span> / &#123;<br><span class="hljs-attribute">try_files</span> $uri $uri/ /index.php?$args;<br><span class="hljs-attribute">rewrite</span> /wp-admin$ $scheme://$host$uri/ <span class="hljs-literal">permanent</span>;<br>&#125;<br><br><span class="hljs-comment"># Cache strategy</span><br><span class="hljs-attribute">set</span> $no_cache <span class="hljs-number">0</span>;<br><br><span class="hljs-comment"># POST requests and urls with a query string should always go to PHP</span><br><span class="hljs-attribute">if</span> ($request_method = POST) &#123;<br><span class="hljs-attribute">set</span> $no_cache <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-attribute">if</span> ($query_string != <span class="hljs-string">&quot;&quot;</span>) &#123;<br><span class="hljs-attribute">set</span> $no_cache <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment"># Don&#x27;t cache uris containing the following segments</span><br><span class="hljs-attribute">if</span> ($request_uri <span class="hljs-regexp">~* &quot;(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(_index)?.xml|[a-z0-9_-]+-sitemap([0-9]+)?.xml)&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> $no_cache <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment"># Don&#x27;t use the cache for logged in users or recent commenters</span><br><span class="hljs-attribute">if</span> ($http_cookie <span class="hljs-regexp">~* &quot;comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> $no_cache <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /wp-admin</span> &#123;<br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br><span class="hljs-attribute">include</span> snippets/fastcgi-php.conf;<br><span class="hljs-attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;<br><span class="hljs-comment"># Making the updates in Wordpress real time.</span><br><span class="hljs-attribute">fastcgi_buffering</span> <span class="hljs-literal">off</span>;<br><span class="hljs-attribute">add_header</span> X-Accel-Buffering <span class="hljs-string">&quot;no&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br><span class="hljs-attribute">include</span> snippets/fastcgi-php.conf;<br><span class="hljs-attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;<br><span class="hljs-attribute">fastcgi_connect_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">fastcgi_send_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">fastcgi_read_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">fastcgi_buffer_size</span> <span class="hljs-number">64k</span>;<br><span class="hljs-attribute">fastcgi_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">64k</span>;<br><span class="hljs-attribute">fastcgi_busy_buffers_size</span> <span class="hljs-number">128k</span>;<br><span class="hljs-attribute">fastcgi_temp_file_write_size</span> <span class="hljs-number">128k</span>;<br><span class="hljs-attribute">fastcgi_cache_bypass</span> $no_cache;<br><span class="hljs-attribute">fastcgi_no_cache</span> $no_cache;<br><span class="hljs-attribute">fastcgi_cache</span> WORDPRESS;<br><span class="hljs-attribute">fastcgi_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">301</span> <span class="hljs-number">302</span> <span class="hljs-number">1d</span>;<br><span class="hljs-attribute">add_header</span> X-Cache <span class="hljs-string">&quot;$upstream_cache_status From $host&quot;</span>;<br>&#125;<br><br><span class="hljs-comment"># Purge cache(Nginx Helper Purge Method: Using a Get)</span><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /purge(/.*)</span> &#123;<br><span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>;<br><span class="hljs-attribute">allow</span> <span class="hljs-number">182.254.246.42</span>;<br><span class="hljs-attribute">deny</span> all;<br><span class="hljs-attribute">fastcgi_cache_purge</span> WORDPRESS <span class="hljs-string">&quot;$scheme$request_method$host<span class="hljs-variable">$1</span>&quot;</span>;<br>&#125;<br><br><span class="hljs-comment"># Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).</span><br><span class="hljs-comment"># Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)</span><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /\.</span> &#123;<br><span class="hljs-attribute">deny</span> all;<br>&#125;<br><br><span class="hljs-comment"># Deny access to any files with a .php extension in the uploads directory</span><br><span class="hljs-comment"># Works in sub-directory installs and also in multisite network</span><br><span class="hljs-comment"># Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)</span><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~* /(?:uploads|files)/.*\.php$</span> &#123;<br><span class="hljs-attribute">deny</span> all;<br>&#125;<br><br><span class="hljs-attribute">location</span> = /favicon.ico &#123;<br><span class="hljs-attribute">log_not_found</span> <span class="hljs-literal">off</span>;<br><span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>&#125;<br><br><span class="hljs-attribute">location</span> = /robots.txt &#123;<br><span class="hljs-attribute">allow</span> all;<br><span class="hljs-attribute">log_not_found</span> <span class="hljs-literal">off</span>;<br><span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>&#125;<br><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(js|css|png|jpg|jpeg|gif|ico)$</span> &#123;<br><span class="hljs-attribute">expires</span> max;<br><span class="hljs-attribute">log_not_found</span> <span class="hljs-literal">off</span>;<br><span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置说明"><a class="markdownIt-Anchor" href="#配置说明"></a> 配置说明</h2><p>以上配置中，需要说明的几个：</p><ul><li><p><code>client_max_body_size 15m;</code> 因为Wordpress里很多插件的体积比较大，如果不设置这个值的大小，会导致插件或者主题安装失败。</p></li><li><p><code>fastcgi_cache_path /tmp/wpcache levels=1:2 keys_zone=WORDPRESS:250m inactive=1d max_size=1G;</code> 这个包括下面的所有内容都是为了使 Nginx 缓存动态文件，参数对应的是缓存位置，缓存级别，缓存标识及大小，有效期，最大容量。</p></li><li><p>由于 Nginx 不支持 Apache 的 .htaccess 文件，因此无法使用 Wordpress 自带的地址重写功能，需要自己添加相应的功能。</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># Add rewrite support for wordpress</span><br><span class="hljs-attribute">location</span> / &#123;<br><span class="hljs-attribute">try_files</span> $uri $uri/ /index.php?$args;<br><span class="hljs-attribute">rewrite</span> /wp-admin$ $scheme://$host$uri/ <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>fastcgi_buffering off;</code> 这个选项默认是开启的，它会把 fastcgi 返回的内容缓存起来，知道缓存空间满了之后一并输出，这会导致 Wordpress 下更新时不会实时显示，而是更新完成后全部一起显示。关掉这个选项即可解决这个问题。</p></li><li><p>由于在线安装插件、主题需要等待的时间有时候会很长，因此如果不设置 fastcgi 的读写等待时长，很容易导致安装或者更新失败，因此需要设置如下内容。</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fastcgi_connect_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">fastcgi_send_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">fastcgi_read_timeout</span> <span class="hljs-number">600</span>;<br></code></pre></td></tr></table></figure><ul><li>为了更好管理动态文件缓存，我用了一个名为“Nginx hleper”的插件，为此增加了如下配置。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># Purge cache(Nginx Helper Purge Method: Using a Get)</span><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /purge(/.*)</span> &#123;<br><span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>;<br><span class="hljs-attribute">allow</span> xxx.xxx.xxx.xxx; <span class="hljs-comment"># 你的服务器地址</span><br><span class="hljs-attribute">deny</span> all;<br><span class="hljs-attribute">fastcgi_cache_purge</span> WORDPRESS <span class="hljs-string">&quot;$scheme$request_method$host<span class="hljs-variable">$1</span>&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LEMP</tag>
      
      <tag>Wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式速查表</title>
    <link href="/2019/09/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <url>/2019/09/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>本文提供了一份用来快速查看的常用 JavaScript 的正则表达式命令参数。</p><span id="more"></span><h1 id="字符"><a class="markdownIt-Anchor" href="#字符"></a> 字符</h1><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">匹配</th></tr></thead><tbody><tr><td style="text-align:left">字母和数字</td><td style="text-align:left">自身</td></tr><tr><td style="text-align:left"><code>\o</code></td><td style="text-align:left">NUL字符</td></tr><tr><td style="text-align:left"><code>\t</code></td><td style="text-align:left">制表符</td></tr><tr><td style="text-align:left"><code>\n</code></td><td style="text-align:left">换行符</td></tr><tr><td style="text-align:left"><code>\v</code></td><td style="text-align:left">垂直制表符</td></tr><tr><td style="text-align:left"><code>\f</code></td><td style="text-align:left">换页符</td></tr><tr><td style="text-align:left"><code>\r</code></td><td style="text-align:left">回车符</td></tr><tr><td style="text-align:left"><code>\xnn</code></td><td style="text-align:left">由十六进制数 nn 指定的拉丁字符</td></tr><tr><td style="text-align:left"><code>\uxxxx</code></td><td style="text-align:left">由十六进制数 xxxx 指定的 Unicode 字符</td></tr><tr><td style="text-align:left"><code>\cX</code></td><td style="text-align:left">控制字符 ^X</td></tr></tbody></table><h1 id="字符类"><a class="markdownIt-Anchor" href="#字符类"></a> 字符类</h1><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">匹配</th></tr></thead><tbody><tr><td style="text-align:left"><code>[...]</code></td><td style="text-align:left">括号内任意字符</td></tr><tr><td style="text-align:left"><code>[^...]</code></td><td style="text-align:left">不在括号内的任意字符</td></tr><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">除换行符和其他Unicode行终止符之外的任意字符</td></tr><tr><td style="text-align:left"><code>\w</code></td><td style="text-align:left">任何ASCII字符组成的单词，等价于<code>[a-zA-Z0-9]</code></td></tr><tr><td style="text-align:left"><code>\W</code></td><td style="text-align:left">任何非ASCII字符组成的单词，等价于<code>[^a-zA-Z0-9]</code></td></tr><tr><td style="text-align:left"><code>\s</code></td><td style="text-align:left">任何Unicode空白符</td></tr><tr><td style="text-align:left"><code>\S</code></td><td style="text-align:left">任何非Unicode空白符</td></tr><tr><td style="text-align:left"><code>\d</code></td><td style="text-align:left">任何ASCII数字，等价于<code>[0-9]</code></td></tr><tr><td style="text-align:left"><code>\D</code></td><td style="text-align:left">任何非ASCII数字，等价于<code>[^0-9]</code></td></tr><tr><td style="text-align:left"><code>[\b]</code></td><td style="text-align:left">退格直接量</td></tr></tbody></table><h1 id="重复"><a class="markdownIt-Anchor" href="#重复"></a> 重复</h1><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>&#123;n,m&#125;</code></td><td style="text-align:left">匹配前一项至少n次，但不能超过m次</td></tr><tr><td style="text-align:left"><code>&#123;n,&#125;</code></td><td style="text-align:left">匹配前一项n次或者更多次</td></tr><tr><td style="text-align:left"><code>&#123;n&#125;</code></td><td style="text-align:left">匹配前一项n次</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left">匹配前一次0次或者1次，等价于<code>&#123;0,1&#125;</code></td></tr><tr><td style="text-align:left"><code>+</code></td><td style="text-align:left">匹配前一项1次或者多次，等价于<code>&#123;1,&#125;</code></td></tr><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">匹配前一项0次或者多次，等价于<code>&#123;0,&#125;</code></td></tr></tbody></table><p>非贪婪匹配模式：<code>??</code>、<code>+?</code>、<code>*?</code> 或 <code>&#123;n,m&#125;?</code></p><h1 id="选择-分组和引用"><a class="markdownIt-Anchor" href="#选择-分组和引用"></a> 选择、分组和引用</h1><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>|</code></td><td style="text-align:left">匹配符号左边的子表达式或右边的子表达式</td></tr><tr><td style="text-align:left"><code>(...)</code></td><td style="text-align:left">组合，将几个项组成一个单元，可用重复符号修饰，并且可以记住匹配的字符串</td></tr><tr><td style="text-align:left"><code>(?:...)</code></td><td style="text-align:left">组合但是不记忆</td></tr><tr><td style="text-align:left"><code>\n</code></td><td style="text-align:left">第n个分组匹配的字符</td></tr></tbody></table><h1 id="指定匹配位置"><a class="markdownIt-Anchor" href="#指定匹配位置"></a> 指定匹配位置</h1><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>^</code></td><td style="text-align:left">匹配字符串开头，多行检索时匹配一行的开头</td></tr><tr><td style="text-align:left"><code>$</code></td><td style="text-align:left">匹配字符串结尾，多行检索时匹配一行的结尾</td></tr><tr><td style="text-align:left"><code>\b</code></td><td style="text-align:left">匹配一个单词的边界位置</td></tr><tr><td style="text-align:left"><code>\B</code></td><td style="text-align:left">匹配非单词的边界位置</td></tr><tr><td style="text-align:left"><code>x(?=y)</code></td><td style="text-align:left">正向断言（Lookahead assertion），当x后跟着y时匹配x</td></tr><tr><td style="text-align:left"><code>x(?!y)</code></td><td style="text-align:left">否定正向断言（Negative lookahead assertion），当x后面跟的不是y时才匹配x</td></tr><tr><td style="text-align:left"><code>(?&lt;=y)x</code></td><td style="text-align:left">负向断言（Lookbehind assertion），当x在y的后面时匹配x</td></tr><tr><td style="text-align:left"><code>(?&lt;!y)x</code></td><td style="text-align:left">否定负向断言（Negative lookbehind assertion），当x不跟着y时才匹配x</td></tr></tbody></table><h1 id="修饰符"><a class="markdownIt-Anchor" href="#修饰符"></a> 修饰符</h1><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>i</code></td><td style="text-align:left">不区分大小写</td></tr><tr><td style="text-align:left"><code>g</code></td><td style="text-align:left">执行全局匹配</td></tr><tr><td style="text-align:left"><code>m</code></td><td style="text-align:left">多行匹配</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解JavaScript函数</title>
    <link href="/2019/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E5%87%BD%E6%95%B0/"/>
    <url>/2019/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>对于 JavaScript 来说，最核心的部分莫过于函数和对象，这篇文章就通过对函数的展开介绍，提供了一份全面的关于 JavaScript 函数的指南。</p><span id="more"></span><h1 id="函数定义"><a class="markdownIt-Anchor" href="#函数定义"></a> 函数定义</h1><p>到目前为止，定义普通函数总共有四种方式（加一种特殊方式）：</p><ul><li>函数声明</li><li>函数表达式</li><li>箭头函数</li><li><code>Function</code> 构造函数</li><li><code>Generator</code> 函数</li></ul><h2 id="函数声明"><a class="markdownIt-Anchor" href="#函数声明"></a> 函数声明</h2><p>对于函数声明语句，需要注意如下几点：</p><ul><li>函数声明语句必须定义函数名称，<strong>函数的名称为函数内部的一个局部变量，指代该函数对象本身</strong>；</li><li>函数声明语句不能出现在循环、判断，或者 <code>try/cache/finally</code> 以及 <code>with</code> 语句中；</li><li>函数声明语句定义的函数，会被提前到外部脚本或者外部函数作用域的顶端，因此可以在定义之前使用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数声明语句</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params">param[, ...param]</span>) </span>&#123;<br>  statements<br>  [<span class="hljs-keyword">return</span> xxx]<br>&#125;<br></code></pre></td></tr></table></figure><p>大部分函数中会包含一条 <code>return</code> 语句，该语句用来停止函数的执行，如果一个函数不包含 <code>return</code> 语句或者 <code>return</code> 语句没有一个与之相关的表达式，则函数默认返回 <code>undefined</code>。</p><h2 id="函数表达式"><a class="markdownIt-Anchor" href="#函数表达式"></a> 函数表达式</h2><p>与函数声明语句相比，函数表达式具有以下特点：</p><ul><li>函数表达式可以省略函数名称；</li><li>函数表达式可以出现在任何地方；</li><li>函数表达式定义的函数，由于变量提升作用的存在，该表达式变量被提前，但是函数本身并未提前，因此无法在定义前调用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数表达式</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-function"><span class="hljs-keyword">function</span> [<span class="hljs-title">name</span>](<span class="hljs-params">param[, ...param]</span>) </span>&#123;<br>  statements<br>  [<span class="hljs-keyword">return</span> xxx]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a class="markdownIt-Anchor" href="#箭头函数"></a> 箭头函数</h2><p>使用箭头函数需要注意：</p><ul><li>箭头函数没有自己的 <code>this</code>，<code>arguments</code>，<code>super</code> 或 <code>new.target</code> 关键字绑定；</li><li>函数体内的 <code>this</code> 对象，就是定义时所在的对象，而不是使用时所在的对象，因此箭头函数不适合作为方法；</li><li>无法当作构造函数使用，也就是说，不可以使用 <code>new</code> 命令，否则会抛出一个错误；</li><li>不可以使用 <code>yield</code> 命令，因此箭头函数不能用作 <code>Generator</code> 函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基本用法</span><br>(param1, param2, …, paramN) =&gt; &#123;statements&#125;<br>(param1, param2, …, paramN) =&gt; expression <span class="hljs-comment">// 等同于：=&gt; &#123;return expression;&#125;</span><br><br><span class="hljs-comment">// 当只有一个参数时括号是可选的</span><br>(singleParam) =&gt; &#123;statements&#125; <span class="hljs-comment">// 等同于：singleParam =&gt; &#123;statements&#125;</span><br><br><span class="hljs-comment">// 没有参数时括号是不可以省略的</span><br>() =&gt; &#123;statements&#125;<br><br><span class="hljs-comment">// 将函数体用大括号括起来返回对象字面量</span><br>params =&gt; (&#123;<span class="hljs-attr">foo</span>: bar&#125;)<br></code></pre></td></tr></table></figure><h2 id="function-构造函数"><a class="markdownIt-Anchor" href="#function-构造函数"></a> Function 构造函数</h2><p>使用 <code>Function</code> 定义函数时可以传入任意数量的字符串实参，最后一个实参就是函数体：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;return x + y;&quot;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) </span>&#123;<span class="hljs-keyword">return</span> x + y;&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>Function</code> 构造函数定义函数时只需要注意一个问题：由 <code>Function</code> 构造函数定义的函数只继承全局作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> foo = <span class="hljs-number">2</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decl</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(foo);<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> expr = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(foo);<br>  &#125;;<br><br>  <span class="hljs-keyword">var</span> cons = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;\tconsole.log(foo);&#x27;</span>);<br><br>  decl(); <span class="hljs-comment">// 2</span><br>  expr(); <span class="hljs-comment">// 2</span><br>  cons(); <span class="hljs-comment">// 1</span><br>&#125;<br><br>myFunc();<br></code></pre></td></tr></table></figure><p><code>Function()</code> 构造函数允许 JavaScript 在运行时动态地创建并编译函数，每次调用都会解析函数体并创建新的函数对象，而使用函数声明语句和表达式只会解析一次，很明显使用构造函数的效率比较低，因此，通常应尽可能避免使用 <code>Function</code> 构造函数。</p><h1 id="函数调用"><a class="markdownIt-Anchor" href="#函数调用"></a> 函数调用</h1><p>在 JavaScript 中，函数调用总共有四种方式：</p><ul><li>作为函数</li><li>作为方法</li><li>作为构造函数</li><li>通过 <code>call()</code> 和 <code>apply()</code> 方法间接调用</li></ul><p>其中作为函数调用是最基本的形式，只需注意以这种方式调用函数通常不使用 <code>this</code> 关键字，但是此时 <code>this</code> 可以用来判断当前是否为严格模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strict = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">return</span> !<span class="hljs-built_in">this</span>;&#125;());<br></code></pre></td></tr></table></figure><h2 id="方法调用"><a class="markdownIt-Anchor" href="#方法调用"></a> 方法调用</h2><p>方法指的是保存在对象属性中的 JavaScript 函数，使用方法调用有两种形式，与访问对象的属性访问方法一致：</p><ul><li>使用“.”：<code>obj.f(argu)</code>；</li><li>使用“[]”：<code>obj[&quot;f&quot;](argu)</code>。</li></ul><p>方法调用的参数和返回值处理和函数调用一致，但是方法调用有一个重要的特点：调用上下文（context），即函数体可以使用 <code>this</code> 引用该对象。</p><h2 id="构造函数调用"><a class="markdownIt-Anchor" href="#构造函数调用"></a> 构造函数调用</h2><p>如果函数和方法调用之前带有关键字 <code>new</code>，它便构成构造函数调用。构造函数调用和函数调用以及方法调用在实参处理、调用上下文和返回值方便都有不同。</p><p>如果构造函数没有形参，则可以省略实参列表。构造函数创建的是一个新的对象，这个对象继承自构造函数的 <code>prototype</code> 属性，因此此时的调用上下文是生成的新对象而非构造函数。如果在构造函数中使用 <code>return</code> 语句并返回一个对象，那么这个新对象将作为调用结果，这一特性可用来实现私有属性、方法。</p><h2 id="this"><a class="markdownIt-Anchor" href="#this"></a> this</h2><p>任何函数只要作为方法调用都会传入一个隐式实参——方法调用的母体对象。可以使用 <code>this</code> 关键字访问该母体对象的任意属性。<code>this</code> 关键字没有作用域的限制，嵌套的函数不会从调用它的函数中继承 <code>this</code>，因此如果需要在嵌套的函数中使用 <code>this</code>，需要先使用一个变量来保存外部的 <code>this</code>。</p><p>需要注意的一点是，无论是否在严格模式下，在全局执行环境中（在任何函数体外部）<code>this</code> 都指向全局对象。在严格模式下，如果进入执行环境时没有设置 <code>this</code> 的值，<code>this</code> 会保持为 <code>undefined</code>。</p><p>可以使用 <code>call()</code> 和 <code>apply()</code> 显式指定函数的调用上下文，即 <code>this</code> 的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Custom&#x27;</span>&#125;;<br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;Global&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">whatsThis</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a;<br>&#125;<br><br>whatsThis(); <span class="hljs-comment">// &#x27;Global&#x27;</span><br>whatsThis.call(obj); <span class="hljs-comment">// &#x27;Custom&#x27;</span><br>whatsThis.apply(obj); <span class="hljs-comment">// &#x27;Custom&#x27;</span><br></code></pre></td></tr></table></figure><p>使用 <code>bind()</code> 方法绑定函数的调用上下文，绑定后无论如何调用该函数，不会改变其调用上下文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a;<br>&#125;<br><br><span class="hljs-keyword">var</span> g = f.bind(&#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;azerty&#x27;</span>&#125;);<br><span class="hljs-built_in">console</span>.log(g()); <span class="hljs-comment">// azerty</span><br><br><span class="hljs-keyword">var</span> h = g.bind(&#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;yoo&#x27;</span>&#125;); <span class="hljs-comment">// 绑定只生效一次</span><br><span class="hljs-built_in">console</span>.log(h()); <span class="hljs-comment">// azerty</span><br></code></pre></td></tr></table></figure><h2 id="闭包"><a class="markdownIt-Anchor" href="#闭包"></a> 闭包</h2><p>一般来说，只有在函数运行时，子函数才能访问父函数内定义的局部变量，但是利用闭包的特性，调用父函数中返回的子函数也能访问到父函数所有局部变量。闭包是由函数以及创建该函数的词法环境（作用域链）组合而成，这个环境包含了这个闭包创建时所能访问的所有局部变量。闭包常被用来实现私有变量和方法。</p><p>要理解闭包，首先需要理解嵌套函数的作用域规则。正常情况下，局部变量定义在 CPU 的栈中，因此函数返回后这些局部变量就不存在了。但是在 JavaScript 中，作用域链是以一个对象列表形式存在，而并非直接添加到栈中，因此只要有引用到这个对象的部分存在，该作用域就一直存在，否则就会被当作垃圾回收掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> foo = <span class="hljs-number">2</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">return</span> foo;&#125;<br>  <span class="hljs-keyword">return</span> show();<br>&#125;<br><br>f(); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>因此，只需要把私有变量方法放到父函数中，公共变量和方法放到嵌套函数中，即可实现变量方法的私有化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addPrivateProperty</span>(<span class="hljs-params">o, name, predicate</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> value;<br><br>  <span class="hljs-comment">// getter 方法</span><br>  o[<span class="hljs-string">&quot;get&quot;</span> + name] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">return</span> value;&#125;<br><br>  <span class="hljs-comment">// setter 方法</span><br>  o[<span class="hljs-string">&quot;set&quot;</span> + name] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (predicate &amp;&amp; !predicate(v)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;set&quot;</span> + name + <span class="hljs-string">&quot;: invalid value &quot;</span> + v);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      value = v;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，记住关联到闭包的作用域链都是“活动的”，嵌套的函数不会将作用域内的私有成员复制一份，如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> funcs = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    funcs[i] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">return</span> i;&#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> funcs;<br>&#125;<br><br><span class="hljs-keyword">var</span> funcs = f();<br><br>f[<span class="hljs-number">5</span>](); <span class="hljs-comment">// 返回值为10</span><br></code></pre></td></tr></table></figure><h1 id="函数参数"><a class="markdownIt-Anchor" href="#函数参数"></a> 函数参数</h1><p>在 JavaScript 中，参数的传入是非常灵活的。当调用函数的时候传入的实参比函数声明时指定的形参个数少，则剩下的形参都会被设置为 undefined。</p><h2 id="arguments-对象"><a class="markdownIt-Anchor" href="#arguments-对象"></a> arguments 对象</h2><p>在函数体内，标识符 <code>arguments</code> 指向实参对象的引用，是一个类数组对象，可以直接使用访问数组元素的方法访问对应位置的实参，也可以使用 length 属性来获取参数的个数。利用这个特性可以实现让函数操作任意数量的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">max</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> max = <span class="hljs-built_in">Number</span>.NEGATIVE_INFINITY;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>[i] &gt; max) max = <span class="hljs-built_in">arguments</span>[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><p>尽管 <code>arguments</code> 并非真正的数组，但是可以通过一定的方法把它转为真正的数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>);<br><span class="hljs-comment">// 等效于</span><br><span class="hljs-keyword">var</span> args = [].slice.call(<span class="hljs-built_in">arguments</span>);<br></code></pre></td></tr></table></figure><p>实参对象还有 <code>callee</code> 和 <code>caller</code> 两个属性，它们类似两个指针，<code>callee</code> 指向当前正在执行的函数，<code>caller</code> 指向当前正在执行的函数的函数，即调用栈。</p><p><code>callee</code> 属性在递归中的应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> factorial = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> x * <span class="hljs-built_in">arguments</span>.callee(x - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="rest-参数"><a class="markdownIt-Anchor" href="#rest-参数"></a> Rest 参数</h2><p>ES6 引入 <code>rest</code> 参数（形式为 <code>...变量名</code> ），用于获取函数的多余参数，这样就不需要使用 <code>arguments</code> 对象了。<code>rest</code> 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。需要注意的是，<code>rest</code> 参数只能作为函数的最后一个参数，否则会报错。同时，函数的 <code>length</code> 属性，不包括 <code>rest</code> 参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">...theArgs</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> theArgs.reduce(<span class="hljs-function">(<span class="hljs-params">previous, current</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> previous + current;<br>  &#125;);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// expected output: 6</span><br></code></pre></td></tr></table></figure><h2 id="参数默认值"><a class="markdownIt-Anchor" href="#参数默认值"></a> 参数默认值</h2><p>ES6 之前，想要为函数指定默认值只能采用如下的办法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  a = a || <span class="hljs-number">0</span>;<br>  b = <span class="hljs-keyword">typeof</span> b == <span class="hljs-string">&quot;undefined&quot;</span> ? <span class="hljs-number">0</span> : b;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论是上面说到的 <code>rest</code> 参数，还是参数默认值，都可以使用 ES6 的解构赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">&#123;x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(x, y);<br>&#125;<br><br>foo() <span class="hljs-comment">// 0 0</span><br>foo(&#123;&#125;) <span class="hljs-comment">// 0 0</span><br>foo(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// 1 0</span><br>foo(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>&#125;) <span class="hljs-comment">// 1 2</span><br></code></pre></td></tr></table></figure><h1 id="函数的属性和方法"><a class="markdownIt-Anchor" href="#函数的属性和方法"></a> 函数的属性和方法</h1><h2 id="length-属性"><a class="markdownIt-Anchor" href="#length-属性"></a> length 属性</h2><p>函数的 <code>length</code> 属性不同于 <code>arguments.length</code>，后者表示传入函数的实参个数，而前者表示函数定义时所需的实参个数，可以通过这个特性来判断传入函数的参数个数是否满足要求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">args</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (args.length != args.callee.length) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Expected &#x27;</span> + args.callee.length + <span class="hljs-string">&quot; arguments&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="call-apply-和-bind"><a class="markdownIt-Anchor" href="#call-apply-和-bind"></a> call、apply 和 bind</h2><p><code>call()</code> 和 <code>apply()</code> 的功能是一样的，可以将函数作为某个对象的方法调用，以此来改变调用上下文（context），即 <code>this</code> 的指向。它们的第一个参数是用来绑定上下文的对象，之后的参数是传入函数的实参，二者唯一的不同便是传入实参的形式，<code>call()</code> 直接传入实参，类似 <code>call(o, 1, 2, 3)</code>，而 <code>apply()</code> 传入一个实参的数组或者类数组对象（arguments），比如 <code>apply(o, [1, 2, 3])</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  x: <span class="hljs-number">1</span>,<br>  y: <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(sum()); <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">console</span>.log(sum.call(obj)); <span class="hljs-comment">// 3</span><br><span class="hljs-built_in">console</span>.log(sum.apply(obj)); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p><code>apply()</code> 对于任意参数的函数或者将一个函数的参数传给另一个函数的场景会非常好用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calcu</span>(<span class="hljs-params">m, nums</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.method = m.name;<br>  <span class="hljs-keyword">return</span> m.apply(<span class="hljs-built_in">this</span>, nums);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">Array</span>.prototype.slice.apply(<span class="hljs-built_in">arguments</span>).forEach(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> total += n);<br>  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">method</span>: <span class="hljs-built_in">this</span>.method, <span class="hljs-attr">result</span>: total&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cumprod</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> total = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">Array</span>.prototype.slice.apply(<span class="hljs-built_in">arguments</span>).forEach(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> total *= n);<br>  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">method</span>: <span class="hljs-built_in">this</span>.method, <span class="hljs-attr">result</span>: total&#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> op1 = <span class="hljs-keyword">new</span> calcu(sum, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br><span class="hljs-keyword">let</span> op2 = <span class="hljs-keyword">new</span> calcu(cumprod, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;The result of &quot;</span> + op1.method + <span class="hljs-string">&quot; is: &quot;</span> + op1.result);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;The result of &quot;</span> + op2.method + <span class="hljs-string">&quot; is: &quot;</span> + op2.result);<br></code></pre></td></tr></table></figure><p><code>bind()</code> 是 ECMAScript5 中新增的方法，用于将函数绑定至某个对象，返回值是一个新的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  x: <span class="hljs-number">1</span>,<br>  y: <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y;<br>&#125;<br><br><span class="hljs-keyword">var</span> temp = sum.bind(obj);<br><span class="hljs-built_in">console</span>.log(temp()) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>在 ECMAScript3 中可以通过已有的方法来模拟 <code>bind()</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Function</span>.prototype.bind) &#123;<br>  <span class="hljs-built_in">Function</span>.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">o<span class="hljs-comment">/*, args */</span></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> self = <span class="hljs-built_in">this</span>, boundArgs = <span class="hljs-built_in">arguments</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> args = [], i;<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; boundArgs.length; i++) args.push(boundArgs[i]);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) args.push(<span class="hljs-built_in">arguments</span>[i]);<br>      <span class="hljs-keyword">return</span> slef.apply(o, args);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><ul><li><p><code>prototype</code> 属性：指向原型对象，当函数作为构造函数时，新创建的对象会从原型对象继承属性；</p></li><li><p><code>toString()</code> 方法：以字符串的形式返回函数的完整源码。</p></li></ul><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p>[1] 《JavaScript权威指南》第六版. 机械工业出版社，2015.<br />[2] 《JavaScript Guide》MDN web docs.<br />[3] 《ECMAScript 6 入门教程》阮一峰.</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闭包</tag>
      
      <tag>ES6</tag>
      
      <tag>箭头函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>证明自然数的算术性质</title>
    <link href="/2019/09/29/%E8%AF%81%E6%98%8E%E8%87%AA%E7%84%B6%E6%95%B0%E7%9A%84%E7%AE%97%E6%95%B0%E6%80%A7%E8%B4%A8/"/>
    <url>/2019/09/29/%E8%AF%81%E6%98%8E%E8%87%AA%E7%84%B6%E6%95%B0%E7%9A%84%E7%AE%97%E6%95%B0%E6%80%A7%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>我们很早就知道 a + b = b + a，a * b = b * a，而且也经常用到它，似乎这对于我们来说已经是不证自明的常识了。然而直觉告诉我，很多数学的常识是因为日常使用频繁，不需要知道它们是如何证明的，但是往往这样的常识会有很精彩的数学定义和证明过程。果不其然，查找资料<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="查看原文：Proving the Properties of Natural Numbers">[1]</span></a></sup>后，我了解到实数的算数性质（交换律，结合律，分配率）都是通过皮亚诺公理推导出来的，看完整个证明过程之后，不得不再一次深深体会到数学的绝妙之处，这篇文章就是对该过程的实现和总结。</p><h1 id="证明过程"><a class="markdownIt-Anchor" href="#证明过程"></a> 证明过程</h1><p>要证明自然数的算数性质，就需要用到皮亚诺公理（The Peano Postulates），它完美地用数学语言定义了什么是自然数，总共有六条：</p><ul><li>P1：1 属于 N</li><li>P2： 如果 x 也属于 N，那么它的后继数 x’ 也属于 N.</li><li>P3： 不存在一个数 x 它的后继数 x’ 为 1.</li><li>P4： 如果 y 属于 N 且 y 不等于 1，则一定有一个 x 属于 N 使得 x’ = y.</li><li>P5： 如果 x，y 都属于 N 且 x’ = y’，则 x = y.</li><li>P6： 如果 S 是 N 的子集，1 属于 S，并且通过 S 中的一个数 x 可以得出它的后继数 x’ 也属于 S，则 S = N.</li></ul><p>直观理解，如果 x 是一个自然数，那么 x 的后继数 x+1 也是自然数（P1，P2），任何自然数的后继数都不可能是1（P3），任何自然数都有它的后继数（P4），任何一个自然数的后继数是唯一的（P5），如果一个自然数的子集中的数的后继数都在这个子集中，那么这个子集就是自然数集（P6）。</p><h2 id="递归定义自然数的加法"><a class="markdownIt-Anchor" href="#递归定义自然数的加法"></a> 递归定义自然数的加法</h2><p><code>D+</code>：设 a 和 b 属于 N.</p><ol><li>如果 b = 1, 那么定义 a + b = a’ (P1，P2).</li><li>如果 b 不等于 1, 那么另 c’ = b, 则有 c 属于 N (P4), 同时定义 a + b = (a + c)’.</li></ol><p>通过定义可知： <code>D+(1)</code>：a + 1 = a’，<code>D+(2)</code>：a + b’ = (a + b)’.</p><h2 id="递归定义自然数的乘法"><a class="markdownIt-Anchor" href="#递归定义自然数的乘法"></a> 递归定义自然数的乘法</h2><p><code>D*</code>：设 a 和 b 属于 N.</p><ol><li>如果 b = 1, 那么定义 a * b = a.</li><li>如果 b 不等于 1, 那么另 c’ = b, 则有 c 属于 N (P4), 同时定义 a * b = (a * c) + a.</li></ol><p>通过定义可知： <code>D*(1)</code>： a * 1 = a，<code>D*(2)</code>： a * b’ = (a * b) + a.</p><p><strong>定理 1</strong>： 如果 a 是一个自然数, 那么 1 + a = a + 1.</p><p>证明：令 S 为所有满足 1 + x = x + 1 的 自然数 x 的集合，1 属于 S，假设 a 也在 S 中，则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nocode">1 + a&#39; &#x3D; (1 + a)&#39;  --D+(2)<br>       &#x3D; (a + 1)&#39;  --假设 a 属于 S<br>       &#x3D; (a&#39;)&#39;     --D+(1)<br>       &#x3D; a&#39; + 1    --D+(1)<br></code></pre></td></tr></table></figure><p>因此 a’ 也属于 S，根据 P6，S = N，所以证明成立</p><p><strong>定理 2</strong>（加法交换律）：如果 a，b 都是自然数, 那么 a + b = b + a.</p><p>证明：令 S 为自然数 y 的集合，使得所有属于自然数 N 的 x 都满足 x + y = y + x，类比定理1，1 属于 S，假设自然数 b 属于 S. 令 S(b’) 为所有满足 x + b’ = b’ + x 的自然数 x 的集合，类比定理1，假设自然数 a 属于 S(b’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nocode">a&#39; + b&#39; &#x3D; (a&#39; + b)&#39;    --D+(2)<br>        &#x3D; (b + a&#39;)&#39;    --假设 b 属于 S<br>        &#x3D; ((b + a)&#39;)   --D+(2)<br>        &#x3D; ((a + b)&#39;)&#39;  --假设 b 属于 S<br>        &#x3D; (a + b&#39;)&#39;    --D+(2)<br>        &#x3D; (b&#39; + a)&#39;    --假设 a 属于 T(b&#39;)<br>        &#x3D; b&#39; + a&#39;      --D+(2)<br></code></pre></td></tr></table></figure><p>因此 a’ 也属于 S(b’)，根据 P6，S(b’) = N，因此 b’ 属于 S，再次根据 P6，S = N，所以证明成立</p><p><strong>定理 3</strong>（加法结合律）：如果 a，b 和 c 都是自然数, 那么 a + (b + c) = (a + b) + c.</p><p>证明：令 S 为自然数 z 的集合，使得所有属于自然数 N 的 x，y 都满足 x + (y + z) = (x + y) + z. 则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nocode">a + (b + 1) &#x3D; a + b&#39;       --D+(1)<br>            &#x3D; (a + b)&#39;     --D+(2)<br>            &#x3D; (a + b) + 1  --D+(1)<br></code></pre></td></tr></table></figure><p>因此 1 属于 S. 假设自然数 c 属于 S， 则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nocode">a + (b + c&#39;) &#x3D; a + (b + c)&#39;    --D+(2)<br>             &#x3D; (a + (b + c))   --D+(2)<br>             &#x3D; ((a + b) + c)&#39;  --假设c属于S<br>             &#x3D; (a + b) + c&#39;    --D+(2)<br></code></pre></td></tr></table></figure><p>因此 c’ 也属于 S，根据 P6，S = N，所以证明成立</p><p>使用同样的证明过程，还可以证明：</p><p>1 * a = a，进而证明</p><p>a * b = b * a，进而证明</p><p>(a + b) * c = (a * c) + (b * c)，接着证明</p><p>(a * b) * c = a * (b * c)</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://mathforum.org/library/drmath/view/51563.html">查看原文：Proving the Properties of Natural Numbers</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>定理证明</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
